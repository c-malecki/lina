// Package apify provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apify

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyScopes     = "apiKey.Scopes"
	HttpBearerScopes = "httpBearer.Scopes"
)

// Defines values for ActorDefinitionActorSpecification.
const (
	N1 ActorDefinitionActorSpecification = 1
)

// Defines values for FlatPricePerMonthActorPricingInfoPricingModel.
const (
	FlatPricePerMonthActorPricingInfoPricingModelFLATPRICEPERMONTH FlatPricePerMonthActorPricingInfoPricingModel = "FLAT_PRICE_PER_MONTH"
)

// Defines values for FreeActorPricingInfoPricingModel.
const (
	FREE FreeActorPricingInfoPricingModel = "FREE"
)

// Defines values for PayPerEventActorPricingInfoPricingModel.
const (
	PAYPEREVENT PayPerEventActorPricingInfoPricingModel = "PAY_PER_EVENT"
)

// Defines values for PricePerDatasetItemActorPricingInfoPricingModel.
const (
	PRICEPERDATASETITEM PricePerDatasetItemActorPricingInfoPricingModel = "PRICE_PER_DATASET_ITEM"
)

// Defines values for RunMetaOrigin.
const (
	RunMetaOriginACTOR       RunMetaOrigin = "ACTOR"
	RunMetaOriginAPI         RunMetaOrigin = "API"
	RunMetaOriginCLI         RunMetaOrigin = "CLI"
	RunMetaOriginDEVELOPMENT RunMetaOrigin = "DEVELOPMENT"
	RunMetaOriginSCHEDULER   RunMetaOrigin = "SCHEDULER"
	RunMetaOriginSTANDBY     RunMetaOrigin = "STANDBY"
	RunMetaOriginTEST        RunMetaOrigin = "TEST"
	RunMetaOriginWEB         RunMetaOrigin = "WEB"
	RunMetaOriginWEBHOOK     RunMetaOrigin = "WEBHOOK"
)

// Defines values for RunShortMetaOrigin.
const (
	RunShortMetaOriginACTOR       RunShortMetaOrigin = "ACTOR"
	RunShortMetaOriginAPI         RunShortMetaOrigin = "API"
	RunShortMetaOriginCLI         RunShortMetaOrigin = "CLI"
	RunShortMetaOriginDEVELOPMENT RunShortMetaOrigin = "DEVELOPMENT"
	RunShortMetaOriginSCHEDULER   RunShortMetaOrigin = "SCHEDULER"
	RunShortMetaOriginSTANDBY     RunShortMetaOrigin = "STANDBY"
	RunShortMetaOriginTEST        RunShortMetaOrigin = "TEST"
	RunShortMetaOriginWEB         RunShortMetaOrigin = "WEB"
	RunShortMetaOriginWEBHOOK     RunShortMetaOrigin = "WEBHOOK"
)

// Defines values for VersionSourceFiles0Format.
const (
	BASE64 VersionSourceFiles0Format = "BASE64"
	TEXT   VersionSourceFiles0Format = "TEXT"
)

// Defines values for VersionSourceFiles1Folder.
const (
	True VersionSourceFiles1Folder = true
)

// Defines values for VersionSourceType.
const (
	GITHUBGIST  VersionSourceType = "GITHUB_GIST"
	GITREPO     VersionSourceType = "GIT_REPO"
	SOURCEFILES VersionSourceType = "SOURCE_FILES"
	TARBALL     VersionSourceType = "TARBALL"
)

// Defines values for ActsGetParamsSortBy.
const (
	CreatedAt             ActsGetParamsSortBy = "createdAt"
	StatsLastRunStartedAt ActsGetParamsSortBy = "stats.lastRunStartedAt"
)

// Defines values for KeyValueStoreRecordPutParamsContentEncoding.
const (
	Gzip KeyValueStoreRecordPutParamsContentEncoding = "gzip"
)

// Defines values for RequestQueueRequestsBatchDeleteParamsContentType.
const (
	RequestQueueRequestsBatchDeleteParamsContentTypeApplicationjson RequestQueueRequestsBatchDeleteParamsContentType = "application/json"
)

// Defines values for RequestQueueRequestLockDeleteParamsContentType.
const (
	RequestQueueRequestLockDeleteParamsContentTypeApplicationjson RequestQueueRequestLockDeleteParamsContentType = "application/json"
)

// Defines values for StoreGetParamsPricingModel.
const (
	StoreGetParamsPricingModelFLATPRICEPERMONTH   StoreGetParamsPricingModel = "FLAT_PRICE_PER_MONTH"
	StoreGetParamsPricingModelFREE                StoreGetParamsPricingModel = "FREE"
	StoreGetParamsPricingModelPAYPEREVENT         StoreGetParamsPricingModel = "PAY_PER_EVENT"
	StoreGetParamsPricingModelPRICEPERDATASETITEM StoreGetParamsPricingModel = "PRICE_PER_DATASET_ITEM"
)

// AccountLimits defines model for AccountLimits.
type AccountLimits struct {
	Current           Current           `json:"current"`
	Limits            Limits            `json:"limits"`
	MonthlyUsageCycle MonthlyUsageCycle `json:"monthlyUsageCycle"`
}

// Actor defines model for Actor.
type Actor struct {
	CreatedAt         string                 `json:"createdAt"`
	DefaultRunOptions DefaultRunOptions      `json:"defaultRunOptions"`
	DeploymentKey     string                 `json:"deploymentKey"`
	Description       *string                `json:"description"`
	ExampleRunInput   *Actor_ExampleRunInput `json:"exampleRunInput,omitempty"`
	Id                string                 `json:"id"`
	IsDeprecated      *bool                  `json:"isDeprecated"`
	IsPublic          bool                   `json:"isPublic"`
	ModifiedAt        string                 `json:"modifiedAt"`
	Name              string                 `json:"name"`
	PricingInfos      *[]ActorRunPricingInfo `json:"pricingInfos,omitempty"`
	RestartOnError    *bool                  `json:"restartOnError"`
	Stats             ActorStats             `json:"stats"`
	TaggedBuilds      *Actor_TaggedBuilds    `json:"taggedBuilds,omitempty"`
	Title             *string                `json:"title"`
	UserId            string                 `json:"userId"`
	Username          string                 `json:"username"`
	Versions          []Version              `json:"versions"`
}

// ActorExampleRunInput0 defines model for .
type ActorExampleRunInput0 = interface{}

// Actor_ExampleRunInput defines model for Actor.ExampleRunInput.
type Actor_ExampleRunInput struct {
	union json.RawMessage
}

// ActorTaggedBuilds0 defines model for .
type ActorTaggedBuilds0 = interface{}

// Actor_TaggedBuilds defines model for Actor.TaggedBuilds.
type Actor_TaggedBuilds struct {
	union json.RawMessage
}

// ActorChargeEvent defines model for ActorChargeEvent.
type ActorChargeEvent struct {
	EventDescription string  `json:"eventDescription"`
	EventPriceUsd    float32 `json:"eventPriceUsd"`
	EventTitle       string  `json:"eventTitle"`
}

// ActorDefinition The definition of the Actor, the full specification of this field can be found in [Apify docs](https://docs.apify.com/platform/actors/development/actor-definition/actor-json)
type ActorDefinition struct {
	// ActorSpecification The Actor specification version that this Actor follows. This property must be set to 1.
	ActorSpecification ActorDefinitionActorSpecification `json:"actorSpecification"`

	// BuildTag The tag name to be applied to a successful build of the Actor. Defaults to 'latest' if not specified.
	BuildTag *string `json:"buildTag,omitempty"`

	// Changelog The path to the CHANGELOG file displayed in the Actor's information tab.
	Changelog *string `json:"changelog,omitempty"`

	// DockerContextDir The path to the directory used as the Docker context when building the Actor.
	DockerContextDir *string `json:"dockerContextDir,omitempty"`

	// Dockerfile The path to the Dockerfile used for building the Actor on the platform.
	Dockerfile *string `json:"dockerfile,omitempty"`

	// EnvironmentVariables A map of environment variables to be used during local development and deployment.
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`

	// Input The input schema object, the full specification can be found in [Apify docs](https://docs.apify.com/platform/actors/development/actor-definition/input-schema)
	Input *map[string]interface{} `json:"input,omitempty"`

	// MaxMemoryMbytes Specifies the maximum amount of memory in megabytes required by the Actor.
	MaxMemoryMbytes *int `json:"maxMemoryMbytes,omitempty"`

	// MinMemoryMbytes Specifies the minimum amount of memory in megabytes required by the Actor.
	MinMemoryMbytes *int `json:"minMemoryMbytes,omitempty"`

	// Name The name of the Actor.
	Name string `json:"name"`

	// Readme The path to the README file for the Actor.
	Readme   *string `json:"readme,omitempty"`
	Storages *struct {
		// Dataset Defines the schema of items in your dataset, the full specification can be found in [Apify docs](https://docs.apify.com/platform/actors/development/actor-definition/dataset-schema)
		Dataset *map[string]interface{} `json:"dataset,omitempty"`
	} `json:"storages,omitempty"`

	// UsesStandbyMode Specifies whether the Actor will have Standby mode enabled.
	UsesStandbyMode *bool `json:"usesStandbyMode,omitempty"`

	// Version The version of the Actor, specified in the format [Number].[Number], e.g., 0.1, 1.0.
	Version string `json:"version"`
}

// ActorDefinitionActorSpecification The Actor specification version that this Actor follows. This property must be set to 1.
type ActorDefinitionActorSpecification int

// ActorRunPricingInfo defines model for ActorRunPricingInfo.
type ActorRunPricingInfo struct {
	union json.RawMessage
}

// ActorShort defines model for ActorShort.
type ActorShort struct {
	CreatedAt  string `json:"createdAt"`
	Id         string `json:"id"`
	ModifiedAt string `json:"modifiedAt"`
	Name       string `json:"name"`
	Username   string `json:"username"`
}

// ActorStats defines model for ActorStats.
type ActorStats struct {
	LastRunStartedAt string  `json:"lastRunStartedAt"`
	TotalBuilds      float32 `json:"totalBuilds"`
	TotalMetamorphs  float32 `json:"totalMetamorphs"`
	TotalRuns        float32 `json:"totalRuns"`
	TotalUsers       float32 `json:"totalUsers"`
	TotalUsers30Days float32 `json:"totalUsers30Days"`
	TotalUsers7Days  float32 `json:"totalUsers7Days"`
	TotalUsers90Days float32 `json:"totalUsers90Days"`
}

// AddRequestResponse defines model for AddRequestResponse.
type AddRequestResponse struct {
	Data struct {
		RequestId         string `json:"requestId"`
		WasAlreadyHandled bool   `json:"wasAlreadyHandled"`
		WasAlreadyPresent bool   `json:"wasAlreadyPresent"`
	} `json:"data"`
}

// BatchOperationResponse defines model for BatchOperationResponse.
type BatchOperationResponse struct {
	Data struct {
		ProcessedRequests   []ProcessedRequest   `json:"processedRequests"`
		UnprocessedRequests []UnprocessedRequest `json:"unprocessedRequests"`
	} `json:"data"`
}

// Build defines model for Build.
type Build struct {
	ActId           string                 `json:"actId"`
	ActorDefinition *Build_ActorDefinition `json:"actorDefinition,omitempty"`
	BuildNumber     string                 `json:"buildNumber"`
	FinishedAt      *string                `json:"finishedAt"`
	Id              string                 `json:"id"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	InputSchema *string        `json:"inputSchema"`
	Meta        BuildsMeta     `json:"meta"`
	Options     *Build_Options `json:"options,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Readme        *string         `json:"readme"`
	StartedAt     string          `json:"startedAt"`
	Stats         *Build_Stats    `json:"stats,omitempty"`
	Status        string          `json:"status"`
	Usage         *Build_Usage    `json:"usage,omitempty"`
	UsageTotalUsd *float32        `json:"usageTotalUsd"`
	UsageUsd      *Build_UsageUsd `json:"usageUsd,omitempty"`
	UserId        string          `json:"userId"`
}

// BuildActorDefinition1 defines model for .
type BuildActorDefinition1 = map[string]interface{}

// Build_ActorDefinition defines model for Build.ActorDefinition.
type Build_ActorDefinition struct {
	union json.RawMessage
}

// BuildOptions0 defines model for .
type BuildOptions0 = interface{}

// Build_Options defines model for Build.Options.
type Build_Options struct {
	union json.RawMessage
}

// BuildStats0 defines model for .
type BuildStats0 = interface{}

// Build_Stats defines model for Build.Stats.
type Build_Stats struct {
	union json.RawMessage
}

// BuildUsage0 defines model for .
type BuildUsage0 = interface{}

// Build_Usage defines model for Build.Usage.
type Build_Usage struct {
	union json.RawMessage
}

// BuildUsageUsd0 defines model for .
type BuildUsageUsd0 = interface{}

// Build_UsageUsd defines model for Build.UsageUsd.
type Build_UsageUsd struct {
	union json.RawMessage
}

// BuildActorResponse defines model for BuildActorResponse.
type BuildActorResponse struct {
	Data Build `json:"data"`
}

// BuildOptions defines model for BuildOptions.
type BuildOptions struct {
	BetaPackages *bool    `json:"betaPackages"`
	DiskMbytes   *float32 `json:"diskMbytes"`
	MemoryMbytes *float32 `json:"memoryMbytes"`
	UseCache     *bool    `json:"useCache"`
}

// BuildShort defines model for BuildShort.
type BuildShort struct {
	ActId      *string `json:"actId,omitempty"`
	FinishedAt string  `json:"finishedAt"`
	Id         string  `json:"id"`
	Meta       *struct {
		ClientIp  string `json:"clientIp"`
		Origin    string `json:"origin"`
		UserAgent string `json:"userAgent"`
	} `json:"meta,omitempty"`
	StartedAt     string  `json:"startedAt"`
	Status        string  `json:"status"`
	UsageTotalUsd float32 `json:"usageTotalUsd"`
}

// BuildStats defines model for BuildStats.
type BuildStats struct {
	ComputeUnits   float32 `json:"computeUnits"`
	DurationMillis float32 `json:"durationMillis"`
	RunTimeSecs    float32 `json:"runTimeSecs"`
}

// BuildUsage defines model for BuildUsage.
type BuildUsage struct {
	ACTORCOMPUTEUNITS *float32 `json:"ACTOR_COMPUTE_UNITS"`
}

// BuildsMeta defines model for BuildsMeta.
type BuildsMeta struct {
	ClientIp  string `json:"clientIp"`
	Origin    string `json:"origin"`
	UserAgent string `json:"userAgent"`
}

// ChargeRunRequest defines model for ChargeRunRequest.
type ChargeRunRequest struct {
	EventCount float32 `json:"eventCount"`
	EventName  string  `json:"eventName"`
}

// CommonActorPricingInfo defines model for CommonActorPricingInfo.
type CommonActorPricingInfo struct {
	// ApifyMarginPercentage In [0, 1], fraction of pricePerUnitUsd that goes to Apify
	ApifyMarginPercentage float32 `json:"apifyMarginPercentage"`

	// CreatedAt When this pricing info record has been created
	CreatedAt                   time.Time  `json:"createdAt"`
	NotifiedAboutChangeAt       *time.Time `json:"notifiedAboutChangeAt"`
	NotifiedAboutFutureChangeAt *time.Time `json:"notifiedAboutFutureChangeAt"`
	ReasonForChange             *string    `json:"reasonForChange"`

	// StartedAt Since when is this pricing info record effective for a given Actor
	StartedAt time.Time `json:"startedAt"`
}

// CreateActorRequest defines model for CreateActorRequest.
type CreateActorRequest struct {
	Categories        *[]string                             `json:"categories"`
	DefaultRunOptions *CreateActorRequest_DefaultRunOptions `json:"defaultRunOptions,omitempty"`
	Description       *string                               `json:"description"`
	IsPublic          *bool                                 `json:"isPublic"`
	Name              *string                               `json:"name"`
	PricingInfos      *[]ActorRunPricingInfo                `json:"pricingInfos,omitempty"`
	RestartOnError    *bool                                 `json:"restartOnError"`
	SeoDescription    *string                               `json:"seoDescription"`
	SeoTitle          *string                               `json:"seoTitle"`
	Title             *string                               `json:"title"`
	Versions          *[]Version                            `json:"versions"`
}

// CreateActorRequestDefaultRunOptions0 defines model for .
type CreateActorRequestDefaultRunOptions0 = interface{}

// CreateActorRequest_DefaultRunOptions defines model for CreateActorRequest.DefaultRunOptions.
type CreateActorRequest_DefaultRunOptions struct {
	union json.RawMessage
}

// CreateActorResponse defines model for CreateActorResponse.
type CreateActorResponse struct {
	Data Actor `json:"data"`
}

// CreateKeyValueStoreResponse defines model for CreateKeyValueStoreResponse.
type CreateKeyValueStoreResponse struct {
	Data KeyValueStore `json:"data"`
}

// CreateOrUpdateEnvVarRequest defines model for CreateOrUpdateEnvVarRequest.
type CreateOrUpdateEnvVarRequest struct {
	IsSecret *bool  `json:"isSecret"`
	Name     string `json:"name"`
	Value    string `json:"value"`
}

// CreateOrUpdateVersionRequest defines model for CreateOrUpdateVersionRequest.
type CreateOrUpdateVersionRequest struct {
	ApplyEnvVarsToBuild *bool                                    `json:"applyEnvVarsToBuild"`
	BuildTag            *string                                  `json:"buildTag"`
	EnvVars             *[]EnvVar                                `json:"envVars"`
	SourceFiles         *VersionSourceFiles                      `json:"sourceFiles,omitempty"`
	SourceType          *CreateOrUpdateVersionRequest_SourceType `json:"sourceType,omitempty"`
	VersionNumber       *string                                  `json:"versionNumber"`
}

// CreateOrUpdateVersionRequestSourceType0 defines model for .
type CreateOrUpdateVersionRequestSourceType0 = interface{}

// CreateOrUpdateVersionRequest_SourceType defines model for CreateOrUpdateVersionRequest.SourceType.
type CreateOrUpdateVersionRequest_SourceType struct {
	union json.RawMessage
}

// CreateRequestQueueResponse defines model for CreateRequestQueueResponse.
type CreateRequestQueueResponse struct {
	Data RequestQueue `json:"data"`
}

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	ActId   string                     `json:"actId"`
	Input   *CreateTaskRequest_Input   `json:"input,omitempty"`
	Name    string                     `json:"name"`
	Options *CreateTaskRequest_Options `json:"options,omitempty"`
}

// CreateTaskRequestInput0 defines model for .
type CreateTaskRequestInput0 = interface{}

// CreateTaskRequest_Input defines model for CreateTaskRequest.Input.
type CreateTaskRequest_Input struct {
	union json.RawMessage
}

// CreateTaskRequestOptions0 defines model for .
type CreateTaskRequestOptions0 = interface{}

// CreateTaskRequest_Options defines model for CreateTaskRequest.Options.
type CreateTaskRequest_Options struct {
	union json.RawMessage
}

// CreateWebhookResponse defines model for CreateWebhookResponse.
type CreateWebhookResponse struct {
	Data Webhook `json:"data"`
}

// Current defines model for Current.
type Current struct {
	ActiveActorJobCount               float32 `json:"activeActorJobCount"`
	ActorCount                        float32 `json:"actorCount"`
	ActorMemoryGbytes                 float32 `json:"actorMemoryGbytes"`
	ActorTaskCount                    float32 `json:"actorTaskCount"`
	MonthlyActorComputeUnits          float32 `json:"monthlyActorComputeUnits"`
	MonthlyExternalDataTransferGbytes float32 `json:"monthlyExternalDataTransferGbytes"`
	MonthlyProxySerps                 float32 `json:"monthlyProxySerps"`
	MonthlyResidentialProxyGbytes     float32 `json:"monthlyResidentialProxyGbytes"`
	MonthlyUsageUsd                   float32 `json:"monthlyUsageUsd"`
	TeamAccountSeatCount              float32 `json:"teamAccountSeatCount"`
}

// CurrentPricingInfo defines model for CurrentPricingInfo.
type CurrentPricingInfo struct {
	PricingModel string `json:"pricingModel"`
}

// DailyServiceUsages defines model for DailyServiceUsages.
type DailyServiceUsages struct {
	Date                 string       `json:"date"`
	ServiceUsage         ServiceUsage `json:"serviceUsage"`
	TotalUsageCreditsUsd float32      `json:"totalUsageCreditsUsd"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	AccessedAt     string    `json:"accessedAt"`
	ActId          *string   `json:"actId"`
	ActRunId       *string   `json:"actRunId"`
	CleanItemCount float32   `json:"cleanItemCount"`
	ConsoleUrl     string    `json:"consoleUrl"`
	CreatedAt      string    `json:"createdAt"`
	Fields         *[]string `json:"fields"`
	Id             string    `json:"id"`
	ItemCount      float32   `json:"itemCount"`

	// ItemsPublicUrl A public link to access the dataset items directly.
	ItemsPublicUrl *string `json:"itemsPublicUrl,omitempty"`
	ModifiedAt     string  `json:"modifiedAt"`
	Name           string  `json:"name"`

	// Schema Defines the schema of items in your dataset, the full specification can be found in [Apify docs](/platform/actors/development/actor-definition/dataset-schema)
	Schema *map[string]interface{} `json:"schema"`
	Stats  *DatasetStats           `json:"stats,omitempty"`

	// UrlSigningSecretKey A secret key for generating signed public URLs. It is only provided to clients with WRITE permission for the dataset.
	UrlSigningSecretKey *string `json:"urlSigningSecretKey"`
	UserId              string  `json:"userId"`
}

// DatasetFieldStatistics defines model for DatasetFieldStatistics.
type DatasetFieldStatistics struct {
	// EmptyCount How many items in the dataset are `undefined`, meaning that for example empty string is not considered empty.
	EmptyCount *float32 `json:"emptyCount"`

	// Max Maximum value of the field. For numbers, this is calculated directly. For strings, this is the length of the longest string. For arrays, this is the length of the longest array. For objects, this is the number of keys in the largest object.
	Max *float32 `json:"max"`

	// Min Minimum value of the field. For numbers, this is calculated directly. For strings, this is the length of the shortest string. For arrays, this is the length of the shortest array. For objects, this is the number of keys in the smallest object.
	Min *float32 `json:"min"`

	// NullCount How many items in the dataset have a null value for this field.
	NullCount *float32 `json:"nullCount"`
}

// DatasetListItem defines model for DatasetListItem.
type DatasetListItem struct {
	AccessedAt     string  `json:"accessedAt"`
	ActId          *string `json:"actId"`
	ActRunId       *string `json:"actRunId"`
	CleanItemCount float32 `json:"cleanItemCount"`
	CreatedAt      string  `json:"createdAt"`
	Id             string  `json:"id"`
	ItemCount      float32 `json:"itemCount"`
	ModifiedAt     string  `json:"modifiedAt"`
	Name           string  `json:"name"`
	UserId         string  `json:"userId"`
}

// DatasetResponse defines model for DatasetResponse.
type DatasetResponse struct {
	Data Dataset `json:"data"`
}

// DatasetSchemaValidationError defines model for DatasetSchemaValidationError.
type DatasetSchemaValidationError struct {
	Error *struct {
		Data struct {
			// InvalidItems A list of invalid items in the received array of items.
			InvalidItems []struct {
				// ItemPosition The position of the invalid item in the array.
				ItemPosition *float32 `json:"itemPosition,omitempty"`

				// ValidationErrors A complete list of AJV validation error objects for the invalid item.
				ValidationErrors *[]struct {
					// InstancePath The path to the instance being validated.
					InstancePath *string `json:"instancePath,omitempty"`

					// Keyword The validation keyword that caused the error.
					Keyword *string `json:"keyword,omitempty"`

					// Message A message describing the validation error.
					Message *string `json:"message,omitempty"`

					// Params Additional parameters specific to the validation error.
					Params *map[string]interface{} `json:"params,omitempty"`

					// SchemaPath The path to the schema that failed the validation.
					SchemaPath *string `json:"schemaPath,omitempty"`
				} `json:"validationErrors,omitempty"`
			} `json:"invalidItems"`
		} `json:"data"`

		// Message A human-readable message describing the error.
		Message string `json:"message"`

		// Type The type of the error.
		Type string `json:"type"`
	} `json:"error,omitempty"`
}

// DatasetStats defines model for DatasetStats.
type DatasetStats struct {
	ReadCount    float32 `json:"readCount"`
	StorageBytes float32 `json:"storageBytes"`
	WriteCount   float32 `json:"writeCount"`
}

// DefaultRunOptions defines model for DefaultRunOptions.
type DefaultRunOptions struct {
	Build        string  `json:"build"`
	MemoryMbytes float32 `json:"memoryMbytes"`
	TimeoutSecs  float32 `json:"timeoutSecs"`
}

// EffectivePlatformFeature defines model for EffectivePlatformFeature.
type EffectivePlatformFeature struct {
	DisabledReason     *string `json:"disabledReason"`
	DisabledReasonType *string `json:"disabledReasonType"`
	IsEnabled          bool    `json:"isEnabled"`
	IsTrial            bool    `json:"isTrial"`
	TrialExpirationAt  *string `json:"trialExpirationAt"`
}

// EffectivePlatformFeatures defines model for EffectivePlatformFeatures.
type EffectivePlatformFeatures struct {
	ACTORS                EffectivePlatformFeature `json:"ACTORS"`
	ACTORSPUBLICALL       EffectivePlatformFeature `json:"ACTORS_PUBLIC_ALL"`
	ACTORSPUBLICDEVELOPER EffectivePlatformFeature `json:"ACTORS_PUBLIC_DEVELOPER"`
	SCHEDULER             EffectivePlatformFeature `json:"SCHEDULER"`
	STORAGE               EffectivePlatformFeature `json:"STORAGE"`
	WEBHOOKS              EffectivePlatformFeature `json:"WEBHOOKS"`
}

// EnvVar defines model for EnvVar.
type EnvVar struct {
	IsSecret *bool  `json:"isSecret"`
	Name     string `json:"name"`
	Value    string `json:"value"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Message string `json:"message"`
		Type    string `json:"type"`
	} `json:"error"`
}

// ExampleRunInput defines model for ExampleRunInput.
type ExampleRunInput struct {
	Body        string `json:"body"`
	ContentType string `json:"contentType"`
}

// ExampleWebhookDispatch defines model for ExampleWebhookDispatch.
type ExampleWebhookDispatch struct {
	FinishedAt string `json:"finishedAt"`
	Status     string `json:"status"`
}

// FlatPricePerMonthActorPricingInfo defines model for FlatPricePerMonthActorPricingInfo.
type FlatPricePerMonthActorPricingInfo struct {
	// ApifyMarginPercentage In [0, 1], fraction of pricePerUnitUsd that goes to Apify
	ApifyMarginPercentage float32 `json:"apifyMarginPercentage"`

	// CreatedAt When this pricing info record has been created
	CreatedAt                   time.Time  `json:"createdAt"`
	NotifiedAboutChangeAt       *time.Time `json:"notifiedAboutChangeAt"`
	NotifiedAboutFutureChangeAt *time.Time `json:"notifiedAboutFutureChangeAt"`

	// PricePerUnitUsd Monthly flat price in USD
	PricePerUnitUsd float32                                       `json:"pricePerUnitUsd"`
	PricingModel    FlatPricePerMonthActorPricingInfoPricingModel `json:"pricingModel"`
	ReasonForChange *string                                       `json:"reasonForChange"`

	// StartedAt Since when is this pricing info record effective for a given Actor
	StartedAt time.Time `json:"startedAt"`

	// TrialMinutes For how long this Actor can be used for free in trial period
	TrialMinutes float32 `json:"trialMinutes"`
}

// FlatPricePerMonthActorPricingInfoPricingModel defines model for FlatPricePerMonthActorPricingInfo.PricingModel.
type FlatPricePerMonthActorPricingInfoPricingModel string

// FreeActorPricingInfo defines model for FreeActorPricingInfo.
type FreeActorPricingInfo struct {
	// ApifyMarginPercentage In [0, 1], fraction of pricePerUnitUsd that goes to Apify
	ApifyMarginPercentage float32 `json:"apifyMarginPercentage"`

	// CreatedAt When this pricing info record has been created
	CreatedAt                   time.Time                        `json:"createdAt"`
	NotifiedAboutChangeAt       *time.Time                       `json:"notifiedAboutChangeAt"`
	NotifiedAboutFutureChangeAt *time.Time                       `json:"notifiedAboutFutureChangeAt"`
	PricingModel                FreeActorPricingInfoPricingModel `json:"pricingModel"`
	ReasonForChange             *string                          `json:"reasonForChange"`

	// StartedAt Since when is this pricing info record effective for a given Actor
	StartedAt time.Time `json:"startedAt"`
}

// FreeActorPricingInfoPricingModel defines model for FreeActorPricingInfo.PricingModel.
type FreeActorPricingInfoPricingModel string

// GetActorResponse defines model for GetActorResponse.
type GetActorResponse struct {
	Data Actor `json:"data"`
}

// GetBuildListResponse defines model for GetBuildListResponse.
type GetBuildListResponse struct {
	Data struct {
		Count  float32      `json:"count"`
		Desc   bool         `json:"desc"`
		Items  []BuildShort `json:"items"`
		Limit  float32      `json:"limit"`
		Offset float32      `json:"offset"`
		Total  float32      `json:"total"`
	} `json:"data"`
}

// GetBuildResponse defines model for GetBuildResponse.
type GetBuildResponse struct {
	Data struct {
		ActId           string                                 `json:"actId"`
		ActorDefinition *GetBuildResponse_Data_ActorDefinition `json:"actorDefinition,omitempty"`
		BuildNumber     string                                 `json:"buildNumber"`
		FinishedAt      *string                                `json:"finishedAt"`
		Id              string                                 `json:"id"`
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		InputSchema *string                        `json:"inputSchema"`
		Meta        BuildsMeta                     `json:"meta"`
		Options     *GetBuildResponse_Data_Options `json:"options,omitempty"`
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		Readme        *string                         `json:"readme"`
		StartedAt     string                          `json:"startedAt"`
		Stats         *GetBuildResponse_Data_Stats    `json:"stats,omitempty"`
		Status        string                          `json:"status"`
		Usage         *GetBuildResponse_Data_Usage    `json:"usage,omitempty"`
		UsageTotalUsd *float32                        `json:"usageTotalUsd"`
		UsageUsd      *GetBuildResponse_Data_UsageUsd `json:"usageUsd,omitempty"`
		UserId        string                          `json:"userId"`
	} `json:"data"`
}

// GetBuildResponseDataActorDefinition1 defines model for .
type GetBuildResponseDataActorDefinition1 = map[string]interface{}

// GetBuildResponse_Data_ActorDefinition defines model for GetBuildResponse.Data.ActorDefinition.
type GetBuildResponse_Data_ActorDefinition struct {
	union json.RawMessage
}

// GetBuildResponseDataOptions0 defines model for .
type GetBuildResponseDataOptions0 = interface{}

// GetBuildResponse_Data_Options defines model for GetBuildResponse.Data.Options.
type GetBuildResponse_Data_Options struct {
	union json.RawMessage
}

// GetBuildResponseDataStats0 defines model for .
type GetBuildResponseDataStats0 = interface{}

// GetBuildResponse_Data_Stats defines model for GetBuildResponse.Data.Stats.
type GetBuildResponse_Data_Stats struct {
	union json.RawMessage
}

// GetBuildResponseDataUsage0 defines model for .
type GetBuildResponseDataUsage0 = interface{}

// GetBuildResponse_Data_Usage defines model for GetBuildResponse.Data.Usage.
type GetBuildResponse_Data_Usage struct {
	union json.RawMessage
}

// GetBuildResponseDataUsageUsd0 defines model for .
type GetBuildResponseDataUsageUsd0 = interface{}

// GetBuildResponse_Data_UsageUsd defines model for GetBuildResponse.Data.UsageUsd.
type GetBuildResponse_Data_UsageUsd struct {
	union json.RawMessage
}

// GetDatasetStatisticsResponse defines model for GetDatasetStatisticsResponse.
type GetDatasetStatisticsResponse struct {
	Data struct {
		// FieldStatistics When you configure the dataset [fields schema](https://docs.apify.com/platform/actors/development/actor-definition/dataset-schema/validation), we measure the statistics such as `min`, `max`, `nullCount` and `emptyCount` for each field. This property provides statistics for each field from dataset fields schema. <br/></br>See dataset field statistics [documentation](https://docs.apify.com/platform/actors/development/actor-definition/dataset-schema/validation#dataset-field-statistics) for more information.
		FieldStatistics *map[string]DatasetFieldStatistics `json:"fieldStatistics"`
	} `json:"data"`
}

// GetEnvVarListResponse defines model for GetEnvVarListResponse.
type GetEnvVarListResponse struct {
	Data struct {
		Items []EnvVar `json:"items"`
		Total float32  `json:"total"`
	} `json:"data"`
}

// GetEnvVarResponse defines model for GetEnvVarResponse.
type GetEnvVarResponse struct {
	Data EnvVar `json:"data"`
}

// GetHeadAndLockResponse defines model for GetHeadAndLockResponse.
type GetHeadAndLockResponse struct {
	Data struct {
		ClientKey          *string `json:"clientKey,omitempty"`
		HadMultipleClients bool    `json:"hadMultipleClients"`
		Items              []struct {
			Id            string  `json:"id"`
			LockExpiresAt string  `json:"lockExpiresAt"`
			Method        string  `json:"method"`
			RetryCount    float32 `json:"retryCount"`
			UniqueKey     string  `json:"uniqueKey"`
			Url           string  `json:"url"`
		} `json:"items"`
		Limit    float32 `json:"limit"`
		LockSecs float32 `json:"lockSecs"`

		// QueueHasLockedRequests Whether the queue contains requests locked by any client (either the one calling the endpoint or a different one).
		QueueHasLockedRequests *bool `json:"queueHasLockedRequests,omitempty"`

		// QueueModifiedAt The modifiedAt is updated whenever the queue is modified. Modifications include adding, updating, or removing requests, as well as locking or unlocking requests in the queue.
		QueueModifiedAt string `json:"queueModifiedAt"`
	} `json:"data"`
}

// GetHeadResponse defines model for GetHeadResponse.
type GetHeadResponse struct {
	Data struct {
		HadMultipleClients bool `json:"hadMultipleClients"`
		Items              []struct {
			Id         string  `json:"id"`
			Method     string  `json:"method"`
			RetryCount float32 `json:"retryCount"`
			UniqueKey  string  `json:"uniqueKey"`
			Url        string  `json:"url"`
		} `json:"items"`
		Limit           float32 `json:"limit"`
		QueueModifiedAt string  `json:"queueModifiedAt"`
	} `json:"data"`
}

// GetLimitsResponse defines model for GetLimitsResponse.
type GetLimitsResponse struct {
	Data AccountLimits `json:"data"`
}

// GetListOfActorsInStoreResponse defines model for GetListOfActorsInStoreResponse.
type GetListOfActorsInStoreResponse struct {
	Data StoreData `json:"data"`
}

// GetListOfActorsResponse defines model for GetListOfActorsResponse.
type GetListOfActorsResponse struct {
	Data struct {
		Count  float32      `json:"count"`
		Desc   bool         `json:"desc"`
		Items  []ActorShort `json:"items"`
		Limit  float32      `json:"limit"`
		Offset float32      `json:"offset"`
		Total  float32      `json:"total"`
	} `json:"data"`
}

// GetListOfDatasetsResponse defines model for GetListOfDatasetsResponse.
type GetListOfDatasetsResponse struct {
	Data struct {
		Count  float32           `json:"count"`
		Desc   bool              `json:"desc"`
		Items  []DatasetListItem `json:"items"`
		Limit  float32           `json:"limit"`
		Offset float32           `json:"offset"`
		Total  float32           `json:"total"`
	} `json:"data"`
}

// GetListOfKeyValueStoresResponse defines model for GetListOfKeyValueStoresResponse.
type GetListOfKeyValueStoresResponse struct {
	Data struct {
		Count  float32         `json:"count"`
		Desc   bool            `json:"desc"`
		Items  []KeyValueStore `json:"items"`
		Limit  float32         `json:"limit"`
		Offset float32         `json:"offset"`
		Total  float32         `json:"total"`
	} `json:"data"`
}

// GetListOfKeysResponse defines model for GetListOfKeysResponse.
type GetListOfKeysResponse struct {
	Data ListOfKeysResponse `json:"data"`
}

// GetListOfRequestQueuesResponse defines model for GetListOfRequestQueuesResponse.
type GetListOfRequestQueuesResponse struct {
	Data struct {
		Count  float32             `json:"count"`
		Desc   bool                `json:"desc"`
		Items  []RequestQueueShort `json:"items"`
		Limit  float32             `json:"limit"`
		Offset float32             `json:"offset"`
		Total  float32             `json:"total"`
	} `json:"data"`
}

// GetListOfSchedulesResponse defines model for GetListOfSchedulesResponse.
type GetListOfSchedulesResponse struct {
	Data GetListOfSchedulesResponseData `json:"data"`
}

// GetListOfSchedulesResponseData defines model for GetListOfSchedulesResponseData.
type GetListOfSchedulesResponseData struct {
	Count  float32                               `json:"count"`
	Desc   bool                                  `json:"desc"`
	Items  []GetListOfSchedulesResponseDataItems `json:"items"`
	Limit  float32                               `json:"limit"`
	Offset float32                               `json:"offset"`
	Total  float32                               `json:"total"`
}

// GetListOfSchedulesResponseDataItems defines model for GetListOfSchedulesResponseDataItems.
type GetListOfSchedulesResponseDataItems struct {
	Actions        []GetListOfSchedulesResponseDataItemsActions `json:"actions"`
	CreatedAt      string                                       `json:"createdAt"`
	CronExpression string                                       `json:"cronExpression"`
	Id             string                                       `json:"id"`
	IsEnabled      bool                                         `json:"isEnabled"`
	IsExclusive    bool                                         `json:"isExclusive"`
	LastRunAt      string                                       `json:"lastRunAt"`
	ModifiedAt     string                                       `json:"modifiedAt"`
	Name           string                                       `json:"name"`
	NextRunAt      string                                       `json:"nextRunAt"`
	Timezone       string                                       `json:"timezone"`
	UserId         string                                       `json:"userId"`
}

// GetListOfSchedulesResponseDataItemsActions defines model for GetListOfSchedulesResponseDataItemsActions.
type GetListOfSchedulesResponseDataItemsActions struct {
	ActorId string `json:"actorId"`
	Id      string `json:"id"`
	Type    string `json:"type"`
}

// GetListOfWebhooksResponse defines model for GetListOfWebhooksResponse.
type GetListOfWebhooksResponse struct {
	Data struct {
		Count  float32         `json:"count"`
		Desc   bool            `json:"desc"`
		Items  *[]WebhookShort `json:"items,omitempty"`
		Limit  float32         `json:"limit"`
		Offset float32         `json:"offset"`
		Total  float32         `json:"total"`
	} `json:"data"`
}

// GetMonthlyUsageResponse defines model for GetMonthlyUsageResponse.
type GetMonthlyUsageResponse struct {
	Data MonthlyUsage `json:"data"`
}

// GetOpenApiResponse defines model for GetOpenApiResponse.
type GetOpenApiResponse struct {
	Components *struct {
		Schemas *struct {
			InputSchema *struct {
				Type *string `json:"type,omitempty"`
			} `json:"inputSchema,omitempty"`
			RunsResponseSchema *struct {
				Properties *struct {
					Data *struct {
						Properties *struct {
							ActId *struct {
								Type *string `json:"type,omitempty"`
							} `json:"actId,omitempty"`
							FinishedAt *struct {
								Example *string `json:"example,omitempty"`
								Format  *string `json:"format,omitempty"`
								Type    *string `json:"type,omitempty"`
							} `json:"finishedAt,omitempty"`
							Id *struct {
								Type *string `json:"type,omitempty"`
							} `json:"id,omitempty"`
							Meta *struct {
								Properties *struct {
									Origin *struct {
										Example *string `json:"example,omitempty"`
										Type    *string `json:"type,omitempty"`
									} `json:"origin,omitempty"`
									UserAgent *struct {
										Type *string `json:"type,omitempty"`
									} `json:"userAgent,omitempty"`
								} `json:"properties,omitempty"`
								Type *string `json:"type,omitempty"`
							} `json:"meta,omitempty"`
							StartedAt *struct {
								Example *string `json:"example,omitempty"`
								Format  *string `json:"format,omitempty"`
								Type    *string `json:"type,omitempty"`
							} `json:"startedAt,omitempty"`
							Status *struct {
								Example *string `json:"example,omitempty"`
								Type    *string `json:"type,omitempty"`
							} `json:"status,omitempty"`
							UserId *struct {
								Type *string `json:"type,omitempty"`
							} `json:"userId,omitempty"`
						} `json:"properties,omitempty"`
						Type *string `json:"type,omitempty"`
					} `json:"data,omitempty"`
				} `json:"properties,omitempty"`
				Type *string `json:"type,omitempty"`
			} `json:"runsResponseSchema,omitempty"`
		} `json:"schemas,omitempty"`
	} `json:"components,omitempty"`
	Info *struct {
		Title    *string `json:"title,omitempty"`
		Version  *string `json:"version,omitempty"`
		XBuildId *string `json:"x-build-id,omitempty"`
	} `json:"info,omitempty"`
	Openapi *string `json:"openapi,omitempty"`
	Paths   *struct {
		actsusernameactorrunSync *struct {
			Post *struct {
				OperationId *string `json:"operationId,omitempty"`
				Parameters  *[]struct {
					Description *string `json:"description,omitempty"`
					In          *string `json:"in,omitempty"`
					Name        *string `json:"name,omitempty"`
					Required    *bool   `json:"required,omitempty"`
					Schema      *struct {
						Type *string `json:"type,omitempty"`
					} `json:"schema,omitempty"`
				} `json:"parameters,omitempty"`
				RequestBody *struct {
					Content *struct {
						Applicationjson *struct {
							Schema *struct {
								Ref *string `json:"$ref,omitempty"`
							} `json:"schema,omitempty"`
						} `json:"application/json,omitempty"`
					} `json:"content,omitempty"`
					Required *bool `json:"required,omitempty"`
				} `json:"requestBody,omitempty"`
				Responses *struct {
					N200 *struct {
						Description *string `json:"description,omitempty"`
					} `json:"200,omitempty"`
				} `json:"responses,omitempty"`
				Summary                *string   `json:"summary,omitempty"`
				Tags                   *[]string `json:"tags,omitempty"`
				XOpenaiIsConsequential *bool     `json:"x-openai-isConsequential,omitempty"`
			} `json:"post,omitempty"`
		} `json:"/acts/<username>~<actor>/run-sync,omitempty"`
		actsusernameactorrunSyncGetDatasetItems *struct {
			Post *struct {
				OperationId *string `json:"operationId,omitempty"`
				Parameters  *[]struct {
					Description *string `json:"description,omitempty"`
					In          *string `json:"in,omitempty"`
					Name        *string `json:"name,omitempty"`
					Required    *bool   `json:"required,omitempty"`
					Schema      *struct {
						Type *string `json:"type,omitempty"`
					} `json:"schema,omitempty"`
				} `json:"parameters,omitempty"`
				RequestBody *struct {
					Content *struct {
						Applicationjson *struct {
							Schema *struct {
								Ref *string `json:"$ref,omitempty"`
							} `json:"schema,omitempty"`
						} `json:"application/json,omitempty"`
					} `json:"content,omitempty"`
					Required *bool `json:"required,omitempty"`
				} `json:"requestBody,omitempty"`
				Responses *struct {
					N200 *struct {
						Description *string `json:"description,omitempty"`
					} `json:"200,omitempty"`
				} `json:"responses,omitempty"`
				Summary                *string   `json:"summary,omitempty"`
				Tags                   *[]string `json:"tags,omitempty"`
				XOpenaiIsConsequential *bool     `json:"x-openai-isConsequential,omitempty"`
			} `json:"post,omitempty"`
		} `json:"/acts/<username>~<actor>/run-sync-get-dataset-items,omitempty"`
		actsusernameactorruns *struct {
			Post *struct {
				OperationId *string `json:"operationId,omitempty"`
				Parameters  *[]struct {
					Description *string `json:"description,omitempty"`
					In          *string `json:"in,omitempty"`
					Name        *string `json:"name,omitempty"`
					Required    *bool   `json:"required,omitempty"`
					Schema      *struct {
						Type *string `json:"type,omitempty"`
					} `json:"schema,omitempty"`
				} `json:"parameters,omitempty"`
				RequestBody *struct {
					Content *struct {
						Applicationjson *struct {
							Schema *struct {
								Ref *string `json:"$ref,omitempty"`
							} `json:"schema,omitempty"`
						} `json:"application/json,omitempty"`
					} `json:"content,omitempty"`
					Required *bool `json:"required,omitempty"`
				} `json:"requestBody,omitempty"`
				Responses *struct {
					N200 *struct {
						Content *struct {
							Applicationjson *struct {
								Schema *struct {
									Ref *string `json:"$ref,omitempty"`
								} `json:"schema,omitempty"`
							} `json:"application/json,omitempty"`
						} `json:"content,omitempty"`
						Description *string `json:"description,omitempty"`
					} `json:"200,omitempty"`
				} `json:"responses,omitempty"`
				Summary                *string   `json:"summary,omitempty"`
				Tags                   *[]string `json:"tags,omitempty"`
				XOpenaiIsConsequential *bool     `json:"x-openai-isConsequential,omitempty"`
			} `json:"post,omitempty"`
		} `json:"/acts/<username>~<actor>/runs,omitempty"`
	} `json:"paths,omitempty"`
	Servers *[]struct {
		Url *string `json:"url,omitempty"`
	} `json:"servers,omitempty"`
}

// GetPrivateUserDataResponse defines model for GetPrivateUserDataResponse.
type GetPrivateUserDataResponse struct {
	Data UserPrivateInfo `json:"data"`
}

// GetPublicUserDataResponse defines model for GetPublicUserDataResponse.
type GetPublicUserDataResponse struct {
	Data UserPublicInfo `json:"data"`
}

// GetRecordResponse defines model for GetRecordResponse.
type GetRecordResponse struct {
	Foo string `json:"foo"`
}

// GetRequestQueueResponse defines model for GetRequestQueueResponse.
type GetRequestQueueResponse struct {
	Data struct {
		AccessedAt          string  `json:"accessedAt"`
		ConsoleUrl          string  `json:"consoleUrl"`
		CreatedAt           string  `json:"createdAt"`
		HadMultipleClients  bool    `json:"hadMultipleClients"`
		HandledRequestCount float32 `json:"handledRequestCount"`
		Id                  string  `json:"id"`

		// ModifiedAt The modifiedAt is updated whenever the queue is modified. Modifications include adding, updating, or removing requests, as well as locking or unlocking requests in the queue.
		ModifiedAt          string  `json:"modifiedAt"`
		Name                *string `json:"name,omitempty"`
		PendingRequestCount float32 `json:"pendingRequestCount"`
		TotalRequestCount   float32 `json:"totalRequestCount"`
		UserId              string  `json:"userId"`
	} `json:"data"`
}

// GetRequestResponse defines model for GetRequestResponse.
type GetRequestResponse struct {
	Data struct {
		ErrorMessages *[]string               `json:"errorMessages"`
		HandledAt     *string                 `json:"handledAt"`
		Headers       *map[string]interface{} `json:"headers"`
		Id            string                  `json:"id"`
		LoadedUrl     *string                 `json:"loadedUrl"`
		Method        string                  `json:"method"`
		NoRetry       *bool                   `json:"noRetry"`
		Payload       *map[string]interface{} `json:"payload"`
		RetryCount    float32                 `json:"retryCount"`
		UniqueKey     string                  `json:"uniqueKey"`
		Url           string                  `json:"url"`
		UserData      *struct {
			Image *string `json:"image"`
			Label *string `json:"label"`
		} `json:"userData,omitempty"`
	} `json:"data"`
}

// GetScheduleLogResponse defines model for GetScheduleLogResponse.
type GetScheduleLogResponse struct {
	Data []ScheduleInvoked `json:"data"`
}

// GetStoreResponse defines model for GetStoreResponse.
type GetStoreResponse struct {
	Data KeyValueStore `json:"data"`
}

// GetUserRunsListResponse defines model for GetUserRunsListResponse.
type GetUserRunsListResponse struct {
	Data struct {
		Count  float32    `json:"count"`
		Desc   bool       `json:"desc"`
		Items  []RunShort `json:"items"`
		Limit  float32    `json:"limit"`
		Offset float32    `json:"offset"`
		Total  float32    `json:"total"`
	} `json:"data"`
}

// GetVersionListResponse defines model for GetVersionListResponse.
type GetVersionListResponse struct {
	Data struct {
		Items []Version `json:"items"`
		Total float32   `json:"total"`
	} `json:"data"`
}

// GetVersionResponse defines model for GetVersionResponse.
type GetVersionResponse struct {
	Data Version `json:"data"`
}

// GetWebhookDispatchResponse defines model for GetWebhookDispatchResponse.
type GetWebhookDispatchResponse struct {
	Data WebhookDispatch `json:"data"`
}

// GetWebhookResponse defines model for GetWebhookResponse.
type GetWebhookResponse struct {
	Data Webhook `json:"data"`
}

// KeyValueStore defines model for KeyValueStore.
type KeyValueStore struct {
	AccessedAt string  `json:"accessedAt"`
	ActId      *string `json:"actId"`
	ActRunId   *string `json:"actRunId"`
	ConsoleUrl string  `json:"consoleUrl"`
	CreatedAt  string  `json:"createdAt"`
	Id         string  `json:"id"`

	// KeysPublicUrl A public link to access keys of the key-value store directly.
	KeysPublicUrl string              `json:"keysPublicUrl"`
	ModifiedAt    string              `json:"modifiedAt"`
	Name          string              `json:"name"`
	Stats         *KeyValueStoreStats `json:"stats,omitempty"`

	// UrlSigningSecretKey A secret key for generating signed public URLs. It is only provided to clients with WRITE permission for the key-value store.
	UrlSigningSecretKey *string `json:"urlSigningSecretKey"`
	UserId              *string `json:"userId"`
	Username            *string `json:"username"`
}

// KeyValueStoreStats defines model for KeyValueStoreStats.
type KeyValueStoreStats struct {
	DeleteCount    float32 `json:"deleteCount"`
	ListCount      float32 `json:"listCount"`
	ReadCount      float32 `json:"readCount"`
	S3StorageBytes float32 `json:"s3StorageBytes"`
	WriteCount     float32 `json:"writeCount"`
}

// Limits defines model for Limits.
type Limits struct {
	DataRetentionDays                    float32 `json:"dataRetentionDays"`
	MaxActorCount                        float32 `json:"maxActorCount"`
	MaxActorMemoryGbytes                 float32 `json:"maxActorMemoryGbytes"`
	MaxActorTaskCount                    float32 `json:"maxActorTaskCount"`
	MaxConcurrentActorJobs               float32 `json:"maxConcurrentActorJobs"`
	MaxMonthlyActorComputeUnits          float32 `json:"maxMonthlyActorComputeUnits"`
	MaxMonthlyExternalDataTransferGbytes float32 `json:"maxMonthlyExternalDataTransferGbytes"`
	MaxMonthlyProxySerps                 float32 `json:"maxMonthlyProxySerps"`
	MaxMonthlyResidentialProxyGbytes     float32 `json:"maxMonthlyResidentialProxyGbytes"`
	MaxMonthlyUsageUsd                   float32 `json:"maxMonthlyUsageUsd"`
	MaxTeamAccountSeatCount              float32 `json:"maxTeamAccountSeatCount"`
}

// ListOfKeysResponse defines model for ListOfKeysResponse.
type ListOfKeysResponse struct {
	Count             float32 `json:"count"`
	ExclusiveStartKey *string `json:"exclusiveStartKey,omitempty"`
	IsTruncated       bool    `json:"isTruncated"`
	Items             []struct {
		Key string `json:"key"`

		// RecordPublicUrl A public link to access this record directly.
		RecordPublicUrl string  `json:"recordPublicUrl"`
		Size            float32 `json:"size"`
	} `json:"items"`
	Limit                 float32 `json:"limit"`
	NextExclusiveStartKey *string `json:"nextExclusiveStartKey,omitempty"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Data struct {
		Count            float32             `json:"count"`
		ExclusiveStartId *string             `json:"exclusiveStartId,omitempty"`
		Items            []RequestQueueItems `json:"items"`
		Limit            float32             `json:"limit"`
	} `json:"data"`
}

// MonthlyServiceUsage defines model for MonthlyServiceUsage.
type MonthlyServiceUsage struct {
	USAGEITEM UsageItem `json:"USAGE_ITEM"`
}

// MonthlyUsage defines model for MonthlyUsage.
type MonthlyUsage struct {
	DailyServiceUsages                       []DailyServiceUsages `json:"dailyServiceUsages"`
	MonthlyServiceUsage                      MonthlyServiceUsage  `json:"monthlyServiceUsage"`
	TotalUsageCreditsUsdAfterVolumeDiscount  float32              `json:"totalUsageCreditsUsdAfterVolumeDiscount"`
	TotalUsageCreditsUsdBeforeVolumeDiscount float32              `json:"totalUsageCreditsUsdBeforeVolumeDiscount"`
	UsageCycle                               UsageCycle           `json:"usageCycle"`
}

// MonthlyUsageCycle defines model for MonthlyUsageCycle.
type MonthlyUsageCycle struct {
	EndAt   string `json:"endAt"`
	StartAt string `json:"startAt"`
}

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	Count  float32 `json:"count"`
	Desc   bool    `json:"desc"`
	Limit  float32 `json:"limit"`
	Offset float32 `json:"offset"`
	Total  float32 `json:"total"`
}

// PayPerEventActorPricingInfo defines model for PayPerEventActorPricingInfo.
type PayPerEventActorPricingInfo struct {
	// ApifyMarginPercentage In [0, 1], fraction of pricePerUnitUsd that goes to Apify
	ApifyMarginPercentage float32 `json:"apifyMarginPercentage"`

	// CreatedAt When this pricing info record has been created
	CreatedAt                   time.Time                               `json:"createdAt"`
	MinimalMaxTotalChargeUsd    *float32                                `json:"minimalMaxTotalChargeUsd"`
	NotifiedAboutChangeAt       *time.Time                              `json:"notifiedAboutChangeAt"`
	NotifiedAboutFutureChangeAt *time.Time                              `json:"notifiedAboutFutureChangeAt"`
	PricingModel                PayPerEventActorPricingInfoPricingModel `json:"pricingModel"`
	PricingPerEvent             struct {
		ActorChargeEvents *map[string]ActorChargeEvent `json:"actorChargeEvents,omitempty"`
	} `json:"pricingPerEvent"`
	ReasonForChange *string `json:"reasonForChange"`

	// StartedAt Since when is this pricing info record effective for a given Actor
	StartedAt time.Time `json:"startedAt"`
}

// PayPerEventActorPricingInfoPricingModel defines model for PayPerEventActorPricingInfo.PricingModel.
type PayPerEventActorPricingInfoPricingModel string

// Plan defines model for Plan.
type Plan struct {
	AvailableAddOns                      []string        `json:"availableAddOns"`
	DataRetentionDays                    float32         `json:"dataRetentionDays"`
	Description                          string          `json:"description"`
	EnabledPlatformFeatures              [][]interface{} `json:"enabledPlatformFeatures"`
	Id                                   string          `json:"id"`
	IsEnabled                            bool            `json:"isEnabled"`
	MaxActorCount                        float32         `json:"maxActorCount"`
	MaxActorMemoryGbytes                 float32         `json:"maxActorMemoryGbytes"`
	MaxActorTaskCount                    float32         `json:"maxActorTaskCount"`
	MaxMonthlyActorComputeUnits          float32         `json:"maxMonthlyActorComputeUnits"`
	MaxMonthlyExternalDataTransferGbytes float32         `json:"maxMonthlyExternalDataTransferGbytes"`
	MaxMonthlyProxySerps                 float32         `json:"maxMonthlyProxySerps"`
	MaxMonthlyResidentialProxyGbytes     float32         `json:"maxMonthlyResidentialProxyGbytes"`
	MaxMonthlyUsageUsd                   float32         `json:"maxMonthlyUsageUsd"`
	MonthlyBasePriceUsd                  float32         `json:"monthlyBasePriceUsd"`
	MonthlyUsageCreditsUsd               float32         `json:"monthlyUsageCreditsUsd"`
	SupportLevel                         string          `json:"supportLevel"`
	TeamAccountSeatCount                 float32         `json:"teamAccountSeatCount"`
	UsageDiscountPercent                 float32         `json:"usageDiscountPercent"`
}

// PostAbortBuildResponse defines model for PostAbortBuildResponse.
type PostAbortBuildResponse struct {
	Data struct {
		ActId           string                                       `json:"actId"`
		ActorDefinition *PostAbortBuildResponse_Data_ActorDefinition `json:"actorDefinition,omitempty"`
		BuildNumber     string                                       `json:"buildNumber"`
		FinishedAt      *string                                      `json:"finishedAt"`
		Id              string                                       `json:"id"`
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		InputSchema *string                              `json:"inputSchema"`
		Meta        BuildsMeta                           `json:"meta"`
		Options     *PostAbortBuildResponse_Data_Options `json:"options,omitempty"`
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		Readme        *string                               `json:"readme"`
		StartedAt     string                                `json:"startedAt"`
		Stats         *PostAbortBuildResponse_Data_Stats    `json:"stats,omitempty"`
		Status        string                                `json:"status"`
		Usage         *PostAbortBuildResponse_Data_Usage    `json:"usage,omitempty"`
		UsageTotalUsd *float32                              `json:"usageTotalUsd"`
		UsageUsd      *PostAbortBuildResponse_Data_UsageUsd `json:"usageUsd,omitempty"`
		UserId        string                                `json:"userId"`
	} `json:"data"`
}

// PostAbortBuildResponseDataActorDefinition1 defines model for .
type PostAbortBuildResponseDataActorDefinition1 = map[string]interface{}

// PostAbortBuildResponse_Data_ActorDefinition defines model for PostAbortBuildResponse.Data.ActorDefinition.
type PostAbortBuildResponse_Data_ActorDefinition struct {
	union json.RawMessage
}

// PostAbortBuildResponseDataOptions0 defines model for .
type PostAbortBuildResponseDataOptions0 = interface{}

// PostAbortBuildResponse_Data_Options defines model for PostAbortBuildResponse.Data.Options.
type PostAbortBuildResponse_Data_Options struct {
	union json.RawMessage
}

// PostAbortBuildResponseDataStats0 defines model for .
type PostAbortBuildResponseDataStats0 = interface{}

// PostAbortBuildResponse_Data_Stats defines model for PostAbortBuildResponse.Data.Stats.
type PostAbortBuildResponse_Data_Stats struct {
	union json.RawMessage
}

// PostAbortBuildResponseDataUsage0 defines model for .
type PostAbortBuildResponseDataUsage0 = interface{}

// PostAbortBuildResponse_Data_Usage defines model for PostAbortBuildResponse.Data.Usage.
type PostAbortBuildResponse_Data_Usage struct {
	union json.RawMessage
}

// PostAbortBuildResponseDataUsageUsd0 defines model for .
type PostAbortBuildResponseDataUsageUsd0 = interface{}

// PostAbortBuildResponse_Data_UsageUsd defines model for PostAbortBuildResponse.Data.UsageUsd.
type PostAbortBuildResponse_Data_UsageUsd struct {
	union json.RawMessage
}

// PricePerDatasetItemActorPricingInfo defines model for PricePerDatasetItemActorPricingInfo.
type PricePerDatasetItemActorPricingInfo struct {
	// ApifyMarginPercentage In [0, 1], fraction of pricePerUnitUsd that goes to Apify
	ApifyMarginPercentage float32 `json:"apifyMarginPercentage"`

	// CreatedAt When this pricing info record has been created
	CreatedAt                   time.Time                                       `json:"createdAt"`
	NotifiedAboutChangeAt       *time.Time                                      `json:"notifiedAboutChangeAt"`
	NotifiedAboutFutureChangeAt *time.Time                                      `json:"notifiedAboutFutureChangeAt"`
	PricePerUnitUsd             float32                                         `json:"pricePerUnitUsd"`
	PricingModel                PricePerDatasetItemActorPricingInfoPricingModel `json:"pricingModel"`
	ReasonForChange             *string                                         `json:"reasonForChange"`

	// StartedAt Since when is this pricing info record effective for a given Actor
	StartedAt time.Time `json:"startedAt"`

	// UnitName Name of the unit that is being charged
	UnitName string `json:"unitName"`
}

// PricePerDatasetItemActorPricingInfoPricingModel defines model for PricePerDatasetItemActorPricingInfo.PricingModel.
type PricePerDatasetItemActorPricingInfoPricingModel string

// PriceTiers defines model for PriceTiers.
type PriceTiers struct {
	DiscountPercent float32 `json:"discountPercent"`
	PriceUsd        float32 `json:"priceUsd"`
	QuantityAbove   float32 `json:"quantityAbove"`
	TierQuantity    float32 `json:"tierQuantity"`
	UnitPriceUsd    float32 `json:"unitPriceUsd"`
}

// ProcessedRequest defines model for ProcessedRequest.
type ProcessedRequest struct {
	RequestId         string `json:"requestId"`
	UniqueKey         string `json:"uniqueKey"`
	WasAlreadyHandled bool   `json:"wasAlreadyHandled"`
	WasAlreadyPresent bool   `json:"wasAlreadyPresent"`
}

// Profile defines model for Profile.
type Profile struct {
	Bio             *string `json:"bio,omitempty"`
	GithubUsername  *string `json:"githubUsername,omitempty"`
	Name            *string `json:"name,omitempty"`
	PictureUrl      *string `json:"pictureUrl,omitempty"`
	TwitterUsername *string `json:"twitterUsername,omitempty"`
	WebsiteUrl      *string `json:"websiteUrl,omitempty"`
}

// ProlongRequestLockResponse defines model for ProlongRequestLockResponse.
type ProlongRequestLockResponse struct {
	Data *struct {
		// LockExpiresAt Date when lock expires.
		LockExpiresAt string `json:"lockExpiresAt"`
	} `json:"data,omitempty"`
}

// PutItemResponseError defines model for PutItemResponseError.
type PutItemResponseError struct {
	Error struct {
		Error *struct {
			Data struct {
				// InvalidItems A list of invalid items in the received array of items.
				InvalidItems []struct {
					// ItemPosition The position of the invalid item in the array.
					ItemPosition *float32 `json:"itemPosition,omitempty"`

					// ValidationErrors A complete list of AJV validation error objects for the invalid item.
					ValidationErrors *[]struct {
						// InstancePath The path to the instance being validated.
						InstancePath *string `json:"instancePath,omitempty"`

						// Keyword The validation keyword that caused the error.
						Keyword *string `json:"keyword,omitempty"`

						// Message A message describing the validation error.
						Message *string `json:"message,omitempty"`

						// Params Additional parameters specific to the validation error.
						Params *map[string]interface{} `json:"params,omitempty"`

						// SchemaPath The path to the schema that failed the validation.
						SchemaPath *string `json:"schemaPath,omitempty"`
					} `json:"validationErrors,omitempty"`
				} `json:"invalidItems"`
			} `json:"data"`

			// Message A human-readable message describing the error.
			Message string `json:"message"`

			// Type The type of the error.
			Type string `json:"type"`
		} `json:"error,omitempty"`
	} `json:"error"`
}

// PutItemsRequest defines model for PutItemsRequest.
type PutItemsRequest struct {
	Foo string `json:"foo"`
}

// PutRecordRequest defines model for PutRecordRequest.
type PutRecordRequest struct {
	Foo *string `json:"foo,omitempty"`
}

// RequestOperationInfo defines model for RequestOperationInfo.
type RequestOperationInfo struct {
	RequestId         string `json:"requestId"`
	WasAlreadyHandled bool   `json:"wasAlreadyHandled"`
	WasAlreadyPresent bool   `json:"wasAlreadyPresent"`
}

// RequestQueue defines model for RequestQueue.
type RequestQueue struct {
	AccessedAt          string  `json:"accessedAt"`
	ConsoleUrl          string  `json:"consoleUrl"`
	CreatedAt           string  `json:"createdAt"`
	HadMultipleClients  bool    `json:"hadMultipleClients"`
	HandledRequestCount float32 `json:"handledRequestCount"`
	Id                  string  `json:"id"`

	// ModifiedAt The modifiedAt is updated whenever the queue is modified. Modifications include adding, updating, or removing requests, as well as locking or unlocking requests in the queue.
	ModifiedAt          string  `json:"modifiedAt"`
	Name                *string `json:"name,omitempty"`
	PendingRequestCount float32 `json:"pendingRequestCount"`
	TotalRequestCount   float32 `json:"totalRequestCount"`
	UserId              string  `json:"userId"`
}

// RequestQueueItems defines model for RequestQueueItems.
type RequestQueueItems struct {
	ErrorMessages *[]string               `json:"errorMessages"`
	HandledAt     *string                 `json:"handledAt"`
	Headers       *map[string]interface{} `json:"headers"`
	Id            string                  `json:"id"`
	LoadedUrl     *string                 `json:"loadedUrl"`
	Method        string                  `json:"method"`
	NoRetry       *bool                   `json:"noRetry"`
	Payload       *map[string]interface{} `json:"payload"`
	RetryCount    float32                 `json:"retryCount"`
	UniqueKey     string                  `json:"uniqueKey"`
	Url           string                  `json:"url"`
	UserData      *struct {
		Image *string `json:"image"`
		Label *string `json:"label"`
	} `json:"userData,omitempty"`
}

// RequestQueueShort defines model for RequestQueueShort.
type RequestQueueShort struct {
	AccessedAt          string  `json:"accessedAt"`
	ActId               *string `json:"actId"`
	ActRunId            *string `json:"actRunId"`
	CreatedAt           string  `json:"createdAt"`
	ExpireAt            string  `json:"expireAt"`
	HadMultipleClients  bool    `json:"hadMultipleClients"`
	HandledRequestCount float32 `json:"handledRequestCount"`
	Id                  string  `json:"id"`
	ModifiedAt          string  `json:"modifiedAt"`
	Name                string  `json:"name"`
	PendingRequestCount float32 `json:"pendingRequestCount"`
	TotalRequestCount   float32 `json:"totalRequestCount"`
	UserId              string  `json:"userId"`
	Username            string  `json:"username"`
}

// RequestWithoutId defines model for RequestWithoutId.
type RequestWithoutId struct {
	Method    string `json:"method"`
	UniqueKey string `json:"uniqueKey"`
	Url       string `json:"url"`
}

// Run defines model for Run.
type Run struct {
	ActId                   string                       `json:"actId"`
	ActorTaskId             *string                      `json:"actorTaskId"`
	BuildId                 string                       `json:"buildId"`
	BuildNumber             string                       `json:"buildNumber"`
	ChargedEventCounts      *map[string]ActorChargeEvent `json:"chargedEventCounts,omitempty"`
	ContainerUrl            string                       `json:"containerUrl"`
	DefaultDatasetId        string                       `json:"defaultDatasetId"`
	DefaultKeyValueStoreId  string                       `json:"defaultKeyValueStoreId"`
	DefaultRequestQueueId   string                       `json:"defaultRequestQueueId"`
	ExitCode                *float32                     `json:"exitCode"`
	FinishedAt              string                       `json:"finishedAt"`
	GitBranchName           *string                      `json:"gitBranchName"`
	Id                      string                       `json:"id"`
	IsContainerServerReady  *bool                        `json:"isContainerServerReady"`
	IsStatusMessageTerminal *bool                        `json:"isStatusMessageTerminal"`
	Meta                    RunMeta                      `json:"meta"`
	Options                 RunOptions                   `json:"options"`
	PricingInfo             *ActorRunPricingInfo         `json:"pricingInfo,omitempty"`
	StartedAt               string                       `json:"startedAt"`
	Stats                   RunStats                     `json:"stats"`
	Status                  string                       `json:"status"`
	StatusMessage           *string                      `json:"statusMessage"`
	Usage                   *Run_Usage                   `json:"usage,omitempty"`
	UsageTotalUsd           *float32                     `json:"usageTotalUsd"`
	UsageUsd                *Run_UsageUsd                `json:"usageUsd,omitempty"`
	UserId                  string                       `json:"userId"`
}

// RunUsage0 defines model for .
type RunUsage0 = interface{}

// Run_Usage defines model for Run.Usage.
type Run_Usage struct {
	union json.RawMessage
}

// RunUsageUsd0 defines model for .
type RunUsageUsd0 = interface{}

// Run_UsageUsd defines model for Run.UsageUsd.
type Run_UsageUsd struct {
	union json.RawMessage
}

// RunMeta defines model for RunMeta.
type RunMeta struct {
	Origin RunMetaOrigin `json:"origin"`
}

// RunMetaOrigin defines model for RunMeta.Origin.
type RunMetaOrigin string

// RunOptions defines model for RunOptions.
type RunOptions struct {
	Build        string  `json:"build"`
	DiskMbytes   float32 `json:"diskMbytes"`
	MemoryMbytes float32 `json:"memoryMbytes"`
	TimeoutSecs  float32 `json:"timeoutSecs"`
}

// RunResponse defines model for RunResponse.
type RunResponse struct {
	Data struct {
		ActId                   string                       `json:"actId"`
		ActorTaskId             *string                      `json:"actorTaskId"`
		BuildId                 string                       `json:"buildId"`
		BuildNumber             string                       `json:"buildNumber"`
		ChargedEventCounts      *map[string]ActorChargeEvent `json:"chargedEventCounts,omitempty"`
		ContainerUrl            string                       `json:"containerUrl"`
		DefaultDatasetId        string                       `json:"defaultDatasetId"`
		DefaultKeyValueStoreId  string                       `json:"defaultKeyValueStoreId"`
		DefaultRequestQueueId   string                       `json:"defaultRequestQueueId"`
		ExitCode                *float32                     `json:"exitCode"`
		FinishedAt              string                       `json:"finishedAt"`
		GitBranchName           *string                      `json:"gitBranchName"`
		Id                      string                       `json:"id"`
		IsContainerServerReady  *bool                        `json:"isContainerServerReady"`
		IsStatusMessageTerminal *bool                        `json:"isStatusMessageTerminal"`
		Meta                    RunMeta                      `json:"meta"`
		Options                 RunOptions                   `json:"options"`
		PricingInfo             *ActorRunPricingInfo         `json:"pricingInfo,omitempty"`
		StartedAt               string                       `json:"startedAt"`
		Stats                   RunStats                     `json:"stats"`
		Status                  string                       `json:"status"`
		StatusMessage           *string                      `json:"statusMessage"`
		Usage                   *RunResponse_Data_Usage      `json:"usage,omitempty"`
		UsageTotalUsd           *float32                     `json:"usageTotalUsd"`
		UsageUsd                *RunResponse_Data_UsageUsd   `json:"usageUsd,omitempty"`
		UserId                  string                       `json:"userId"`
	} `json:"data"`
}

// RunResponseDataUsage0 defines model for .
type RunResponseDataUsage0 = interface{}

// RunResponse_Data_Usage defines model for RunResponse.Data.Usage.
type RunResponse_Data_Usage struct {
	union json.RawMessage
}

// RunResponseDataUsageUsd0 defines model for .
type RunResponseDataUsageUsd0 = interface{}

// RunResponse_Data_UsageUsd defines model for RunResponse.Data.UsageUsd.
type RunResponse_Data_UsageUsd struct {
	union json.RawMessage
}

// RunShort defines model for RunShort.
type RunShort struct {
	ActId                  string  `json:"actId"`
	ActorTaskId            *string `json:"actorTaskId"`
	BuildId                string  `json:"buildId"`
	BuildNumber            string  `json:"buildNumber"`
	DefaultDatasetId       string  `json:"defaultDatasetId"`
	DefaultKeyValueStoreId string  `json:"defaultKeyValueStoreId"`
	DefaultRequestQueueId  string  `json:"defaultRequestQueueId"`
	FinishedAt             string  `json:"finishedAt"`
	Id                     string  `json:"id"`
	Meta                   struct {
		Origin RunShortMetaOrigin `json:"origin"`
	} `json:"meta"`
	StartedAt     string  `json:"startedAt"`
	Status        string  `json:"status"`
	UsageTotalUsd float32 `json:"usageTotalUsd"`
}

// RunShortMetaOrigin defines model for RunShort.Meta.Origin.
type RunShortMetaOrigin string

// RunStats defines model for RunStats.
type RunStats struct {
	ComputeUnits    float32  `json:"computeUnits"`
	CpuAvgUsage     *float32 `json:"cpuAvgUsage,omitempty"`
	CpuCurrentUsage *float32 `json:"cpuCurrentUsage,omitempty"`
	CpuMaxUsage     *float32 `json:"cpuMaxUsage,omitempty"`
	DurationMillis  *float32 `json:"durationMillis,omitempty"`
	InputBodyLen    *float32 `json:"inputBodyLen,omitempty"`
	MemAvgBytes     *float32 `json:"memAvgBytes,omitempty"`
	MemCurrentBytes *float32 `json:"memCurrentBytes,omitempty"`
	MemMaxBytes     *float32 `json:"memMaxBytes,omitempty"`
	Metamorph       *float32 `json:"metamorph,omitempty"`
	MigrationCount  *float32 `json:"migrationCount,omitempty"`
	NetRxBytes      *float32 `json:"netRxBytes,omitempty"`
	NetTxBytes      *float32 `json:"netTxBytes,omitempty"`
	RestartCount    float32  `json:"restartCount"`
	ResurrectCount  float32  `json:"resurrectCount"`
	RunTimeSecs     *float32 `json:"runTimeSecs,omitempty"`
}

// RunUsage defines model for RunUsage.
type RunUsage struct {
	ACTORCOMPUTEUNITS              *float32 `json:"ACTOR_COMPUTE_UNITS"`
	DATASETREADS                   *float32 `json:"DATASET_READS"`
	DATASETWRITES                  *float32 `json:"DATASET_WRITES"`
	DATATRANSFEREXTERNALGBYTES     *float32 `json:"DATA_TRANSFER_EXTERNAL_GBYTES?"`
	DATATRANSFERINTERNALGBYTES     *float32 `json:"DATA_TRANSFER_INTERNAL_GBYTES"`
	KEYVALUESTORELISTS             *float32 `json:"KEY_VALUE_STORE_LISTS"`
	KEYVALUESTOREREADS             *float32 `json:"KEY_VALUE_STORE_READS"`
	KEYVALUESTOREWRITES            *float32 `json:"KEY_VALUE_STORE_WRITES"`
	PROXYRESIDENTIALTRANSFERGBYTES *float32 `json:"PROXY_RESIDENTIAL_TRANSFER_GBYTES"`
	PROXYSERPS                     *float32 `json:"PROXY_SERPS"`
	REQUESTQUEUEREADS              *float32 `json:"REQUEST_QUEUE_READS"`
	REQUESTQUEUEWRITES             *float32 `json:"REQUEST_QUEUE_WRITES"`
}

// ScheduleActionsRunInput defines model for ScheduleActionsRunInput.
type ScheduleActionsRunInput struct {
	Body        *string `json:"body"`
	ContentType *string `json:"contentType"`
}

// ScheduleActionsRunOptions defines model for ScheduleActionsRunOptions.
type ScheduleActionsRunOptions struct {
	Build        *string  `json:"build"`
	MemoryMbytes *float32 `json:"memoryMbytes"`
	TimeoutSecs  *float32 `json:"timeoutSecs"`
}

// ScheduleCreate defines model for ScheduleCreate.
type ScheduleCreate struct {
	Actions        *[]ScheduleCreateActions `json:"actions"`
	CronExpression *string                  `json:"cronExpression"`
	Description    *string                  `json:"description"`
	IsEnabled      *bool                    `json:"isEnabled"`
	IsExclusive    *bool                    `json:"isExclusive"`
	Name           *string                  `json:"name"`
	Timezone       *string                  `json:"timezone"`
}

// ScheduleCreateActions defines model for ScheduleCreateActions.
type ScheduleCreateActions struct {
	ActorId    string                     `json:"actorId"`
	RunInput   *ScheduleActionsRunInput   `json:"runInput"`
	RunOptions *ScheduleActionsRunOptions `json:"runOptions"`
	Type       string                     `json:"type"`
}

// ScheduleInvoked defines model for ScheduleInvoked.
type ScheduleInvoked struct {
	CreatedAt string `json:"createdAt"`
	Level     string `json:"level"`
	Message   string `json:"message"`
}

// ScheduleResponse defines model for ScheduleResponse.
type ScheduleResponse struct {
	Data ScheduleResponseData `json:"data"`
}

// ScheduleResponseData defines model for ScheduleResponseData.
type ScheduleResponseData struct {
	Actions        []ScheduleResponseDataActions `json:"actions"`
	CreatedAt      string                        `json:"createdAt"`
	CronExpression string                        `json:"cronExpression"`
	Description    *string                       `json:"description"`
	Id             string                        `json:"id"`
	IsEnabled      bool                          `json:"isEnabled"`
	IsExclusive    bool                          `json:"isExclusive"`
	LastRunAt      *string                       `json:"lastRunAt"`
	ModifiedAt     string                        `json:"modifiedAt"`
	Name           string                        `json:"name"`
	NextRunAt      *string                       `json:"nextRunAt"`
	Timezone       string                        `json:"timezone"`
	UserId         string                        `json:"userId"`
}

// ScheduleResponseDataActions defines model for ScheduleResponseDataActions.
type ScheduleResponseDataActions struct {
	ActorId    string                     `json:"actorId"`
	Id         string                     `json:"id"`
	RunInput   *ScheduleActionsRunInput   `json:"runInput"`
	RunOptions *ScheduleActionsRunOptions `json:"runOptions"`
	Type       string                     `json:"type"`
}

// ServiceUsage defines model for ServiceUsage.
type ServiceUsage struct {
	SERVICEUSAGEITEM UsageItem `json:"SERVICE_USAGE_ITEM"`
}

// StoreData defines model for StoreData.
type StoreData struct {
	Count  float32          `json:"count"`
	Desc   bool             `json:"desc"`
	Items  []StoreListActor `json:"items"`
	Limit  float32          `json:"limit"`
	Offset float32          `json:"offset"`
	Total  float32          `json:"total"`
}

// StoreListActor defines model for StoreListActor.
type StoreListActor struct {
	Categories         *[]string          `json:"categories,omitempty"`
	CurrentPricingInfo CurrentPricingInfo `json:"currentPricingInfo"`
	Description        string             `json:"description"`
	Id                 string             `json:"id"`
	Name               string             `json:"name"`
	Notice             *string            `json:"notice,omitempty"`
	PictureUrl         *string            `json:"pictureUrl"`
	Stats              ActorStats         `json:"stats"`
	Title              string             `json:"title"`
	Url                *string            `json:"url"`
	UserFullName       string             `json:"userFullName"`
	UserPictureUrl     *string            `json:"userPictureUrl"`
	Username           string             `json:"username"`
}

// TaggedBuilds defines model for TaggedBuilds.
type TaggedBuilds struct {
	Latest *TaggedBuilds_Latest `json:"latest,omitempty"`
}

// TaggedBuildsLatest0 defines model for .
type TaggedBuildsLatest0 = interface{}

// TaggedBuildsLatest1 defines model for .
type TaggedBuildsLatest1 struct {
	BuildId     *string `json:"buildId"`
	BuildNumber *string `json:"buildNumber"`
	FinishedAt  *string `json:"finishedAt"`
}

// TaggedBuilds_Latest defines model for TaggedBuilds.Latest.
type TaggedBuilds_Latest struct {
	union json.RawMessage
}

// Task defines model for Task.
type Task struct {
	ActId      string        `json:"actId"`
	CreatedAt  string        `json:"createdAt"`
	Id         string        `json:"id"`
	Input      *Task_Input   `json:"input,omitempty"`
	ModifiedAt string        `json:"modifiedAt"`
	Name       string        `json:"name"`
	Options    *Task_Options `json:"options,omitempty"`
	RemovedAt  *string       `json:"removedAt"`
	Stats      *Task_Stats   `json:"stats,omitempty"`
	UserId     string        `json:"userId"`
	Username   *string       `json:"username"`
}

// TaskInput0 defines model for .
type TaskInput0 = interface{}

// Task_Input defines model for Task.Input.
type Task_Input struct {
	union json.RawMessage
}

// TaskOptions0 defines model for .
type TaskOptions0 = interface{}

// Task_Options defines model for Task.Options.
type Task_Options struct {
	union json.RawMessage
}

// TaskStats0 defines model for .
type TaskStats0 = interface{}

// Task_Stats defines model for Task.Stats.
type Task_Stats struct {
	union json.RawMessage
}

// TaskInput defines model for TaskInput.
type TaskInput struct {
	Hello *string `json:"hello"`
}

// TaskOptions defines model for TaskOptions.
type TaskOptions struct {
	Build        *string  `json:"build"`
	MemoryMbytes *float32 `json:"memoryMbytes"`
	TimeoutSecs  *float32 `json:"timeoutSecs"`
}

// TaskShort defines model for TaskShort.
type TaskShort struct {
	ActId       string           `json:"actId"`
	ActName     string           `json:"actName"`
	ActUsername string           `json:"actUsername"`
	CreatedAt   string           `json:"createdAt"`
	Id          string           `json:"id"`
	ModifiedAt  string           `json:"modifiedAt"`
	Name        string           `json:"name"`
	Stats       *TaskShort_Stats `json:"stats,omitempty"`
	UserId      string           `json:"userId"`
	Username    *string          `json:"username"`
}

// TaskShortStats0 defines model for .
type TaskShortStats0 = interface{}

// TaskShort_Stats defines model for TaskShort.Stats.
type TaskShort_Stats struct {
	union json.RawMessage
}

// TaskStats defines model for TaskStats.
type TaskStats struct {
	TotalRuns float32 `json:"totalRuns"`
}

// TestWebhookResponse defines model for TestWebhookResponse.
type TestWebhookResponse struct {
	Data WebhookDispatch `json:"data"`
}

// UnprocessedRequest defines model for UnprocessedRequest.
type UnprocessedRequest struct {
	Method    string `json:"method"`
	UniqueKey string `json:"uniqueKey"`
	Url       string `json:"url"`
}

// UpdateActorRequest defines model for UpdateActorRequest.
type UpdateActorRequest struct {
	Categories        *[]string                             `json:"categories"`
	DefaultRunOptions *UpdateActorRequest_DefaultRunOptions `json:"defaultRunOptions,omitempty"`
	Description       *string                               `json:"description"`
	IsPublic          bool                                  `json:"isPublic"`
	Name              string                                `json:"name"`
	PricingInfos      *[]ActorRunPricingInfo                `json:"pricingInfos,omitempty"`
	RestartOnError    *bool                                 `json:"restartOnError"`
	SeoDescription    *string                               `json:"seoDescription"`
	SeoTitle          *string                               `json:"seoTitle"`

	// TaggedBuilds Object containing the Actor's tagged builds, where the key is the tag name (e.g., _latest_) and the value is an object containing the build ID.
	// The object you provide will completely overwrite all existing tagged builds for the Actor.
	//
	// - To create or reassign a tag: Include it in the object with the desired `buildId`.
	// - To remove a specific tag: Submit the object without that tag's key.
	// - To remove all tags: Provide an empty object: `{}`.
	// - If this field is omitted or `null`, the existing tags will not be changed.
	TaggedBuilds *map[string]struct {
		BuildId string `json:"buildId"`
	} `json:"taggedBuilds"`
	Title    *string                       `json:"title"`
	Versions []CreateOrUpdateEnvVarRequest `json:"versions"`
}

// UpdateActorRequestDefaultRunOptions0 defines model for .
type UpdateActorRequestDefaultRunOptions0 = interface{}

// UpdateActorRequest_DefaultRunOptions defines model for UpdateActorRequest.DefaultRunOptions.
type UpdateActorRequest_DefaultRunOptions struct {
	union json.RawMessage
}

// UpdateActorResponse defines model for UpdateActorResponse.
type UpdateActorResponse struct {
	Data Actor `json:"data"`
}

// UpdateDatasetRequest defines model for UpdateDatasetRequest.
type UpdateDatasetRequest struct {
	Name string `json:"name"`
}

// UpdateLimitsRequest defines model for UpdateLimitsRequest.
type UpdateLimitsRequest struct {
	// DataRetentionDays Apify securely stores your ten most recent Actor runs indefinitely, ensuring they are always accessible.
	// Unnamed storages and other Actor runs are automatically deleted after the retention period.
	// If you're subscribed, you can change it to keep data for longer or to limit your usage. [Lear more](https://docs.apify.com/platform/storage/usage#data-retention)
	DataRetentionDays *float32 `json:"dataRetentionDays,omitempty"`

	// MaxMonthlyUsageUsd If your platform usage in the billing period exceeds the prepaid usage, you will be charged extra.
	// Setting this property you can update your hard limit on monthly platform usage to prevent accidental overage or to limit the extra charges
	MaxMonthlyUsageUsd *float32 `json:"maxMonthlyUsageUsd,omitempty"`
}

// UpdateRequestQueueRequest defines model for UpdateRequestQueueRequest.
type UpdateRequestQueueRequest struct {
	Name string `json:"name"`
}

// UpdateRequestQueueResponse defines model for UpdateRequestQueueResponse.
type UpdateRequestQueueResponse struct {
	Data struct {
		AccessedAt          string  `json:"accessedAt"`
		ConsoleUrl          string  `json:"consoleUrl"`
		CreatedAt           string  `json:"createdAt"`
		HadMultipleClients  bool    `json:"hadMultipleClients"`
		HandledRequestCount float32 `json:"handledRequestCount"`
		Id                  string  `json:"id"`

		// ModifiedAt The modifiedAt is updated whenever the queue is modified. Modifications include adding, updating, or removing requests, as well as locking or unlocking requests in the queue.
		ModifiedAt          string  `json:"modifiedAt"`
		Name                *string `json:"name,omitempty"`
		PendingRequestCount float32 `json:"pendingRequestCount"`
		TotalRequestCount   float32 `json:"totalRequestCount"`
		UserId              string  `json:"userId"`
	} `json:"data"`
}

// UpdateRequestResponse defines model for UpdateRequestResponse.
type UpdateRequestResponse struct {
	Data struct {
		RequestId         string `json:"requestId"`
		WasAlreadyHandled bool   `json:"wasAlreadyHandled"`
		WasAlreadyPresent bool   `json:"wasAlreadyPresent"`
	} `json:"data"`
}

// UpdateRunRequest defines model for UpdateRunRequest.
type UpdateRunRequest struct {
	IsStatusMessageTerminal *bool  `json:"isStatusMessageTerminal,omitempty"`
	RunId                   string `json:"runId"`
	StatusMessage           string `json:"statusMessage"`
}

// UpdateStoreRequest defines model for UpdateStoreRequest.
type UpdateStoreRequest struct {
	Name string `json:"name"`
}

// UpdateStoreResponse defines model for UpdateStoreResponse.
type UpdateStoreResponse struct {
	Data KeyValueStore `json:"data"`
}

// UpdateTaskRequest defines model for UpdateTaskRequest.
type UpdateTaskRequest struct {
	ActId      string                     `json:"actId"`
	CreatedAt  string                     `json:"createdAt"`
	Id         string                     `json:"id"`
	Input      *UpdateTaskRequest_Input   `json:"input,omitempty"`
	ModifiedAt string                     `json:"modifiedAt"`
	Name       string                     `json:"name"`
	Options    *UpdateTaskRequest_Options `json:"options,omitempty"`
	RemovedAt  *string                    `json:"removedAt"`
	Stats      *UpdateTaskRequest_Stats   `json:"stats,omitempty"`
	UserId     string                     `json:"userId"`
	Username   *string                    `json:"username"`
}

// UpdateTaskRequestInput0 defines model for .
type UpdateTaskRequestInput0 = interface{}

// UpdateTaskRequest_Input defines model for UpdateTaskRequest.Input.
type UpdateTaskRequest_Input struct {
	union json.RawMessage
}

// UpdateTaskRequestOptions0 defines model for .
type UpdateTaskRequestOptions0 = interface{}

// UpdateTaskRequest_Options defines model for UpdateTaskRequest.Options.
type UpdateTaskRequest_Options struct {
	union json.RawMessage
}

// UpdateTaskRequestStats0 defines model for .
type UpdateTaskRequestStats0 = interface{}

// UpdateTaskRequest_Stats defines model for UpdateTaskRequest.Stats.
type UpdateTaskRequest_Stats struct {
	union json.RawMessage
}

// UpdateWebhookResponse defines model for UpdateWebhookResponse.
type UpdateWebhookResponse struct {
	Data Webhook `json:"data"`
}

// UsageCycle defines model for UsageCycle.
type UsageCycle struct {
	EndAt   string `json:"endAt"`
	StartAt string `json:"startAt"`
}

// UsageItem defines model for UsageItem.
type UsageItem struct {
	AmountAfterVolumeDiscountUsd float32      `json:"amountAfterVolumeDiscountUsd"`
	BaseAmountUsd                float32      `json:"baseAmountUsd"`
	BaseUnitPriceUsd             float32      `json:"baseUnitPriceUsd"`
	PriceTiers                   []PriceTiers `json:"priceTiers"`
	Quantity                     float32      `json:"quantity"`
}

// UserData defines model for UserData.
type UserData struct {
	Image *string `json:"image"`
	Label *string `json:"label"`
}

// UserPrivateInfo defines model for UserPrivateInfo.
type UserPrivateInfo struct {
	CreatedAt                 string                    `json:"createdAt"`
	EffectivePlatformFeatures EffectivePlatformFeatures `json:"effectivePlatformFeatures"`
	Email                     string                    `json:"email"`
	Id                        string                    `json:"id"`
	IsPaying                  bool                      `json:"isPaying"`
	Plan                      Plan                      `json:"plan"`
	Profile                   Profile                   `json:"profile"`
	Username                  string                    `json:"username"`
}

// UserPublicInfo defines model for UserPublicInfo.
type UserPublicInfo struct {
	Profile  Profile `json:"profile"`
	Username string  `json:"username"`
}

// Version defines model for Version.
type Version struct {
	ApplyEnvVarsToBuild *bool               `json:"applyEnvVarsToBuild"`
	BuildTag            string              `json:"buildTag"`
	EnvVars             *[]EnvVar           `json:"envVars"`
	SourceFiles         *VersionSourceFiles `json:"sourceFiles,omitempty"`
	SourceType          Version_SourceType  `json:"sourceType"`
	VersionNumber       string              `json:"versionNumber"`
}

// VersionSourceType0 defines model for .
type VersionSourceType0 = interface{}

// Version_SourceType defines model for Version.SourceType.
type Version_SourceType struct {
	union json.RawMessage
}

// VersionSourceFiles defines model for VersionSourceFiles.
type VersionSourceFiles = []VersionSourceFiles_Item

// VersionSourceFiles0 defines model for .
type VersionSourceFiles0 struct {
	Content string                    `json:"content"`
	Format  VersionSourceFiles0Format `json:"format"`
	Name    string                    `json:"name"`
}

// VersionSourceFiles0Format defines model for VersionSourceFiles.0.Format.
type VersionSourceFiles0Format string

// VersionSourceFiles1 defines model for .
type VersionSourceFiles1 struct {
	Folder VersionSourceFiles1Folder `json:"folder"`
	Name   string                    `json:"name"`
}

// VersionSourceFiles1Folder defines model for VersionSourceFiles.1.Folder.
type VersionSourceFiles1Folder bool

// VersionSourceFiles_Item defines model for VersionSourceFiles.Item.
type VersionSourceFiles_Item struct {
	union json.RawMessage
}

// VersionSourceType defines model for VersionSourceType.
type VersionSourceType string

// Webhook defines model for Webhook.
type Webhook struct {
	Condition                WebhookCondition        `json:"condition"`
	CreatedAt                string                  `json:"createdAt"`
	Description              *string                 `json:"description"`
	DoNotRetry               *bool                   `json:"doNotRetry"`
	EventTypes               []string                `json:"eventTypes"`
	HeadersTemplate          *string                 `json:"headersTemplate"`
	Id                       string                  `json:"id"`
	IgnoreSslErrors          bool                    `json:"ignoreSslErrors"`
	IsAdHoc                  *bool                   `json:"isAdHoc"`
	LastDispatch             *ExampleWebhookDispatch `json:"lastDispatch"`
	ModifiedAt               string                  `json:"modifiedAt"`
	PayloadTemplate          *string                 `json:"payloadTemplate"`
	RequestUrl               string                  `json:"requestUrl"`
	ShouldInterpolateStrings *bool                   `json:"shouldInterpolateStrings"`
	Stats                    *WebhookStats           `json:"stats"`
	UserId                   string                  `json:"userId"`
}

// WebhookCondition defines model for WebhookCondition.
type WebhookCondition struct {
	ActorId     *string `json:"actorId"`
	ActorRunId  *string `json:"actorRunId"`
	ActorTaskId *string `json:"actorTaskId"`
}

// WebhookCreate defines model for WebhookCreate.
type WebhookCreate struct {
	Condition                WebhookCondition `json:"condition"`
	Description              *string          `json:"description"`
	DoNotRetry               *bool            `json:"doNotRetry"`
	EventTypes               []string         `json:"eventTypes"`
	HeadersTemplate          *string          `json:"headersTemplate"`
	IdempotencyKey           *string          `json:"idempotencyKey"`
	IgnoreSslErrors          *bool            `json:"ignoreSslErrors"`
	IsAdHoc                  *bool            `json:"isAdHoc"`
	PayloadTemplate          *string          `json:"payloadTemplate"`
	RequestUrl               string           `json:"requestUrl"`
	ShouldInterpolateStrings *bool            `json:"shouldInterpolateStrings"`
}

// WebhookDispatch defines model for WebhookDispatch.
type WebhookDispatch struct {
	Calls *struct {
		ErrorMessage   *string  `json:"errorMessage"`
		FinishedAt     *string  `json:"finishedAt"`
		ResponseBody   *string  `json:"responseBody"`
		ResponseStatus *float32 `json:"responseStatus"`
		StartedAt      *string  `json:"startedAt"`
	} `json:"calls,omitempty"`
	CreatedAt string `json:"createdAt"`
	EventData struct {
		ActorId    string `json:"actorId"`
		ActorRunId string `json:"actorRunId"`
	} `json:"eventData"`
	EventType string `json:"eventType"`
	Id        string `json:"id"`
	Status    string `json:"status"`
	UserId    string `json:"userId"`
	WebhookId string `json:"webhookId"`
}

// WebhookDispatchList defines model for WebhookDispatchList.
type WebhookDispatchList struct {
	Data *struct {
		Count  float32           `json:"count"`
		Desc   bool              `json:"desc"`
		Items  []WebhookDispatch `json:"items"`
		Limit  float32           `json:"limit"`
		Offset float32           `json:"offset"`
		Total  float32           `json:"total"`
	} `json:"data,omitempty"`
}

// WebhookShort defines model for WebhookShort.
type WebhookShort struct {
	Condition                WebhookCondition        `json:"condition"`
	CreatedAt                string                  `json:"createdAt"`
	DoNotRetry               bool                    `json:"doNotRetry"`
	EventTypes               []string                `json:"eventTypes"`
	Id                       string                  `json:"id"`
	IgnoreSslErrors          bool                    `json:"ignoreSslErrors"`
	IsAdHoc                  *bool                   `json:"isAdHoc"`
	LastDispatch             *ExampleWebhookDispatch `json:"lastDispatch"`
	ModifiedAt               string                  `json:"modifiedAt"`
	RequestUrl               string                  `json:"requestUrl"`
	ShouldInterpolateStrings *bool                   `json:"shouldInterpolateStrings"`
	Stats                    *WebhookStats           `json:"stats"`
	UserId                   string                  `json:"userId"`
}

// WebhookStats defines model for WebhookStats.
type WebhookStats struct {
	TotalDispatches float32 `json:"totalDispatches"`
}

// WebhookUpdate defines model for WebhookUpdate.
type WebhookUpdate struct {
	Condition                *WebhookCondition `json:"condition"`
	Description              *string           `json:"description"`
	DoNotRetry               *bool             `json:"doNotRetry"`
	EventTypes               *[]string         `json:"eventTypes"`
	HeadersTemplate          *string           `json:"headersTemplate"`
	IgnoreSslErrors          *bool             `json:"ignoreSslErrors"`
	IsAdHoc                  *bool             `json:"isAdHoc"`
	PayloadTemplate          *string           `json:"payloadTemplate"`
	RequestUrl               *string           `json:"requestUrl"`
	ShouldInterpolateStrings *bool             `json:"shouldInterpolateStrings"`
}

// ActorBuildsGetParams defines parameters for ActorBuildsGet.
type ActorBuildsGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the
	// maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// ActorBuildGetParams defines parameters for ActorBuildGet.
type ActorBuildGetParams struct {
	// WaitForFinish The maximum number of seconds the server waits for the build to finish.
	// By default it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	//
	// If the build finishes in time then the returned build object will have a
	// terminal status (e.g. `SUCCEEDED`), otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActorBuildLogGetParams defines parameters for ActorBuildLogGet.
type ActorBuildLogGetParams struct {
	// Stream If `true` or `1` then the logs will be streamed as long as the run or
	// build is running.
	Stream bool `form:"stream" json:"stream"`

	// Download If `true` or `1` then the web browser will download the log file rather
	// than open it in a tab.
	Download bool `form:"download" json:"download"`
}

// ActorRunsGetParams defines parameters for ActorRunsGet.
type ActorRunsGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The
	// default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value (as well
	// as the maximum) is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Status Single status or comma-separated list of statuses, see ([available
	// statuses](https://docs.apify.com/platform/actors/running/runs-and-builds#lifecycle)). Used to filter runs by the specified statuses only.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ActorRunGetParams defines parameters for ActorRunGet.
type ActorRunGetParams struct {
	// WaitForFinish The maximum number of seconds the server waits for the run to finish. By
	// default it is `0`, the maximum value is `60`. <!--
	// MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the run finishes in time then the returned run object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActorRunPutJSONBody defines parameters for ActorRunPut.
type ActorRunPutJSONBody struct {
	IsStatusMessageTerminal *bool  `json:"isStatusMessageTerminal,omitempty"`
	RunId                   string `json:"runId"`
	StatusMessage           string `json:"statusMessage"`
}

// ActorRunAbortPostParams defines parameters for ActorRunAbortPost.
type ActorRunAbortPostParams struct {
	// Gracefully If true passed, the Actor run will abort gracefully.
	// It will send `aborting` and `persistState` event into run and force-stop the run after 30 seconds.
	// It is helpful in cases where you plan to resurrect the run later.
	Gracefully *bool `form:"gracefully,omitempty" json:"gracefully,omitempty"`
}

// PostChargeRunParams defines parameters for PostChargeRun.
type PostChargeRunParams struct {
	// IdempotencyKey Always pass a unique idempotency key (any unique string) for each charge to avoid double charging in case of retries or network errors.
	IdempotencyKey *string `json:"idempotency-key,omitempty"`
}

// ActorRunMetamorphPostParams defines parameters for ActorRunMetamorphPost.
type ActorRunMetamorphPostParams struct {
	// TargetActorId ID of a target Actor that the run should be transformed into.
	TargetActorId string `form:"targetActorId" json:"targetActorId"`

	// Build Optional build of the target Actor.
	//
	// It can be either a build tag or build number. By default, the run uses
	// the build specified in the default run configuration for the target
	// Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`
}

// PostResurrectRunParams defines parameters for PostResurrectRun.
type PostResurrectRunParams struct {
	// Build Specifies the Actor build to run. It can be either a build tag or build number. By default, the run uses the build specified in the run that is being resurrected (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Timeout Optional timeout for the run, in seconds. By default, the run uses a timeout specified in the run that is being resurrected.
	Timeout *float32 `form:"timeout,omitempty" json:"timeout,omitempty"`
	Memory  *float32 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems Optional number of items that the run should return. Used for pay-per-result Actors. The value can only be increased beyond the value specified when the Actor run was started.
	MaxItems *float32 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Optional maximum cost of the run, in USD. Used for pay-per-event Actors. The value can only be increased beyond the value specified when the Actor run was started.
	MaxTotalChargeUsd *float32 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`
}

// ActorTasksGetParams defines parameters for ActorTasksGet.
type ActorTasksGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// ActorTasksPostJSONBody defines parameters for ActorTasksPost.
type ActorTasksPostJSONBody struct {
	ActId   string                          `json:"actId"`
	Input   *ActorTasksPostJSONBody_Input   `json:"input,omitempty"`
	Name    string                          `json:"name"`
	Options *ActorTasksPostJSONBody_Options `json:"options,omitempty"`
}

// ActorTasksPostJSONBodyInput0 defines parameters for ActorTasksPost.
type ActorTasksPostJSONBodyInput0 = interface{}

// ActorTasksPostJSONBody_Input defines parameters for ActorTasksPost.
type ActorTasksPostJSONBody_Input struct {
	union json.RawMessage
}

// ActorTasksPostJSONBodyOptions0 defines parameters for ActorTasksPost.
type ActorTasksPostJSONBodyOptions0 = interface{}

// ActorTasksPostJSONBody_Options defines parameters for ActorTasksPost.
type ActorTasksPostJSONBody_Options struct {
	union json.RawMessage
}

// ActorTaskInputPutJSONBody defines parameters for ActorTaskInputPut.
type ActorTaskInputPutJSONBody = map[string]interface{}

// ActorTaskRunSyncGetParams defines parameters for ActorTaskRunSyncGet.
type ActorTaskRunSyncGetParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the task settings.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the task settings.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the task run should return. This is
	// useful for pay-per-result tasks, as it allows you to limit the number of
	// results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the task
	// settings (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// OutputRecordKey Key of the record from run's default key-value store to be returned
	// in the response. By default, it is `OUTPUT`.
	OutputRecordKey *string `form:"outputRecordKey,omitempty" json:"outputRecordKey,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActorTaskRunSyncPostJSONBody defines parameters for ActorTaskRunSyncPost.
type ActorTaskRunSyncPostJSONBody = map[string]interface{}

// ActorTaskRunSyncPostParams defines parameters for ActorTaskRunSyncPost.
type ActorTaskRunSyncPostParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the task settings.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the task settings.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the task run should return. This is
	// useful for pay-per-result tasks, as it allows you to limit the number of
	// results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the task run. This parameter is
	// useful for pay-per-event tasks, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the task
	// settings (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// OutputRecordKey Key of the record from run's default key-value store to be returned
	// in the response. By default, it is `OUTPUT`.
	OutputRecordKey *string `form:"outputRecordKey,omitempty" json:"outputRecordKey,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	//
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	//
	// [Webhooks
	// documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActorTaskRunSyncGetDatasetItemsGetParams defines parameters for ActorTaskRunSyncGetDatasetItemsGet.
type ActorTaskRunSyncGetDatasetItemsGetParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the task settings.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the task settings.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the task run should return. This is
	// useful for pay-per-result tasks, as it allows you to limit the number of
	// results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the task
	// settings (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`

	// Format Format of the results, possible values are: `json`, `jsonl`, `csv`,
	// `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Clean If `true` or `1` then the API endpoint returns only non-empty items and
	// skips hidden fields
	//
	// (i.e. fields starting with the # character).
	//
	// The `clean` parameter is just a shortcut for `skipHidden=true` and
	// `skipEmpty=true` parameters.
	//
	// Note that since some objects might be skipped from the output, that the
	// result might contain less items than the `limit` value.
	Clean *bool `form:"clean,omitempty" json:"clean,omitempty"`

	// Offset Number of items that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return. By default there is no limit.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields A comma-separated list of fields which should be picked from the items,
	//
	// only these fields will remain in the resulting record objects.
	//
	// Note that the fields in the outputted items are sorted the same way as
	// they are specified in the `fields` query parameter.
	//
	// You can use this feature to effectively fix the output format.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Omit A comma-separated list of fields which should be omitted from the items.
	Omit *string `form:"omit,omitempty" json:"omit,omitempty"`

	// Unwind A comma-separated list of fields which should be unwound, in order which
	// they should be processed. Each field should be either an array or an object.
	//
	// If the field is an array then every element of
	//
	// the array will become a separate record and merged with parent object.
	//
	// If the unwound field is an object then it is merged with the parent
	// object
	//
	// If the unwound field is missing or its value is neither an array nor an
	// object and therefore cannot be merged with a parent object then the item
	// gets preserved as it is.
	//
	// Note that the unwound items ignore the `desc` parameter.
	Unwind *string `form:"unwind,omitempty" json:"unwind,omitempty"`

	// Flatten A comma-separated list of fields which should transform nested objects
	// into flat structures.
	//
	// For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}`
	// is turned into `{"foo.bar": "hello"}`.
	//
	// The original object with properties is replaced with the flattened
	// object.
	Flatten *string `form:"flatten,omitempty" json:"flatten,omitempty"`

	// Desc By default, results are returned in the same order as they were stored.
	// To reverse the order, set this parameter to `true` or `1`.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Attachment If `true` or `1` then the response will define the `Content-Disposition:
	// attachment` header, forcing a web browser to download the file rather
	// than to display it. By default this header is not present.
	Attachment *bool `form:"attachment,omitempty" json:"attachment,omitempty"`

	// Delimiter A delimiter character for CSV files, only used if `format=csv`. You
	// might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
	// for semicolon). The default delimiter is a simple comma (`,`).
	Delimiter *string `form:"delimiter,omitempty" json:"delimiter,omitempty"`

	// Bom All text responses are encoded in UTF-8 encoding. By default, the
	// `format=csv` files are prefixed with
	//
	// the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html`
	// and `rss` files are not.
	//
	// If you want to override this default behavior, specify `bom=1` query
	// parameter to include the BOM or `bom=0` to skip it.
	Bom *bool `form:"bom,omitempty" json:"bom,omitempty"`

	// XmlRoot Overrides default root element name of `xml` output. By default the root
	// element is `items`.
	XmlRoot *string `form:"xmlRoot,omitempty" json:"xmlRoot,omitempty"`

	// XmlRow Overrides default element name that wraps each page or page function
	// result object in `xml` output. By default the element name is `item`.
	XmlRow *string `form:"xmlRow,omitempty" json:"xmlRow,omitempty"`

	// SkipHeaderRow If `true` or `1` then header row in the `csv` format is skipped.
	SkipHeaderRow *bool `form:"skipHeaderRow,omitempty" json:"skipHeaderRow,omitempty"`

	// SkipHidden If `true` or `1` then hidden fields are skipped from the output,
	// i.e. fields starting with the `#` character.
	SkipHidden *bool `form:"skipHidden,omitempty" json:"skipHidden,omitempty"`

	// SkipEmpty If `true` or `1` then empty items are skipped from the output.
	//
	// Note that if used, the results might contain less items than the limit
	// value.
	SkipEmpty *bool `form:"skipEmpty,omitempty" json:"skipEmpty,omitempty"`

	// Simplified If `true` or `1` then, the endpoint applies the
	// `fields=url,pageFunctionResult,errorInfo`
	// and `unwind=pageFunctionResult` query parameters. This feature is used
	// to emulate simplified results provided by the
	// legacy Apify Crawler product and it's not recommended to use it in new
	// integrations.
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`

	// SkipFailedPages If `true` or `1` then, the all the items with errorInfo property will be
	// skipped from the output.
	// This feature is here to emulate functionality of API version 1 used for
	// the legacy Apify Crawler product and it's not recommended to use it in
	// new integrations.
	SkipFailedPages *bool `form:"skipFailedPages,omitempty" json:"skipFailedPages,omitempty"`
}

// ActorTaskRunSyncGetDatasetItemsPostJSONBody defines parameters for ActorTaskRunSyncGetDatasetItemsPost.
type ActorTaskRunSyncGetDatasetItemsPostJSONBody = map[string]interface{}

// ActorTaskRunSyncGetDatasetItemsPostParams defines parameters for ActorTaskRunSyncGetDatasetItemsPost.
type ActorTaskRunSyncGetDatasetItemsPostParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the task settings.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the task settings.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the task run should return. This is
	// useful for pay-per-result tasks, as it allows you to limit the number of
	// results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the task run. This is
	// useful for pay-per-event tasks, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the task
	// settings (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks
	// documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`

	// Format Format of the results, possible values are: `json`, `jsonl`, `csv`,
	// `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Clean If `true` or `1` then the API endpoint returns only non-empty items and
	// skips hidden fields
	// (i.e. fields starting with the # character).
	// The `clean` parameter is just a shortcut for `skipHidden=true` and
	// `skipEmpty=true` parameters.
	// Note that since some objects might be skipped from the output, that the
	// result might contain less items than the `limit` value.
	Clean *bool `form:"clean,omitempty" json:"clean,omitempty"`

	// Offset Number of items that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return. By default there is no limit.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields A comma-separated list of fields which should be picked from the items,
	// only these fields will remain in the resulting record objects.
	// Note that the fields in the outputted items are sorted the same way as
	// they are specified in the `fields` query parameter.
	// You can use this feature to effectively fix the output format.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Omit A comma-separated list of fields which should be omitted from the items.
	Omit *string `form:"omit,omitempty" json:"omit,omitempty"`

	// Unwind A comma-separated list of fields which should be unwound, in order which
	// they should be processed. Each field should be either an array or an object.
	// If the field is an array then every element of
	// the array will become a separate record and merged with parent object.
	// If the unwound field is an object then it is merged with the parent
	// object
	// If the unwound field is missing or its value is neither an array nor an
	// object and therefore cannot be merged with a parent object then the item
	// gets preserved as it is.
	// Note that the unwound items ignore the `desc` parameter.
	Unwind *string `form:"unwind,omitempty" json:"unwind,omitempty"`

	// Flatten A comma-separated list of fields which should transform nested objects
	// into flat structures.
	// For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}`
	// is turned into `{"foo.bar": "hello"}`.
	// The original object with properties is replaced with the flattened
	// object.
	Flatten *string `form:"flatten,omitempty" json:"flatten,omitempty"`

	// Desc By default, results are returned in the same order as they were stored.
	// To reverse the order, set this parameter to `true` or `1`.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Attachment If `true` or `1` then the response will define the `Content-Disposition:
	// attachment` header, forcing a web browser to download the file rather
	// than to display it. By default this header is not present.
	Attachment *bool `form:"attachment,omitempty" json:"attachment,omitempty"`

	// Delimiter A delimiter character for CSV files, only used if `format=csv`. You
	// might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
	// for semicolon). The default delimiter is a simple comma (`,`).
	Delimiter *string `form:"delimiter,omitempty" json:"delimiter,omitempty"`

	// Bom All text responses are encoded in UTF-8 encoding. By default, the
	// `format=csv` files are prefixed with
	// the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html`
	// and `rss` files are not.
	// If you want to override this default behavior, specify `bom=1` query
	// parameter to include the BOM or `bom=0` to skip it.
	Bom *bool `form:"bom,omitempty" json:"bom,omitempty"`

	// XmlRoot Overrides default root element name of `xml` output. By default the root
	// element is `items`.
	XmlRoot *string `form:"xmlRoot,omitempty" json:"xmlRoot,omitempty"`

	// XmlRow Overrides default element name that wraps each page or page function
	// result object in `xml` output. By default the element name is `item`.
	XmlRow *string `form:"xmlRow,omitempty" json:"xmlRow,omitempty"`

	// SkipHeaderRow If `true` or `1` then header row in the `csv` format is skipped.
	SkipHeaderRow *bool `form:"skipHeaderRow,omitempty" json:"skipHeaderRow,omitempty"`

	// SkipHidden If `true` or `1` then hidden fields are skipped from the output,
	// i.e. fields starting with the `#` character.
	SkipHidden *bool `form:"skipHidden,omitempty" json:"skipHidden,omitempty"`

	// SkipEmpty If `true` or `1` then empty items are skipped from the output.
	//
	// Note that if used, the results might contain less items than the limit
	// value.
	SkipEmpty *bool `form:"skipEmpty,omitempty" json:"skipEmpty,omitempty"`

	// Simplified If `true` or `1` then, the endpoint applies the
	// `fields=url,pageFunctionResult,errorInfo`
	//
	// and `unwind=pageFunctionResult` query parameters. This feature is used
	// to emulate simplified results provided by the
	//
	// legacy Apify Crawler product and it's not recommended to use it in new
	// integrations.
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`

	// SkipFailedPages If `true` or `1` then, the all the items with errorInfo property will be
	// skipped from the output.
	//
	// This feature is here to emulate functionality of API version 1 used for
	// the legacy Apify Crawler product and it's not recommended to use it in
	// new integrations.
	SkipFailedPages *bool `form:"skipFailedPages,omitempty" json:"skipFailedPages,omitempty"`
}

// ActorTaskRunsGetParams defines parameters for ActorTaskRunsGet.
type ActorTaskRunsGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Status Single status or comma-separated list of statuses, see ([available
	// statuses](https://docs.apify.com/platform/actors/running/runs-and-builds#lifecycle)). Used to filter runs by the specified statuses only.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ActorTaskRunsPostJSONBody defines parameters for ActorTaskRunsPost.
type ActorTaskRunsPostJSONBody = map[string]interface{}

// ActorTaskRunsPostParams defines parameters for ActorTaskRunsPost.
type ActorTaskRunsPostParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the task settings.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the task settings.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the task
	// settings (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// WaitForFinish The maximum number of seconds the server waits for the run to finish. By
	// default, it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the run finishes in time then the returned run object will have a
	// terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks.
	//
	// **Note**: if you already have a webhook set up for the Actor or task,
	// you do not have to add it again here.
	//
	// For more information, see [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActorTaskRunsLastGetParams defines parameters for ActorTaskRunsLastGet.
type ActorTaskRunsLastGetParams struct {
	// Status Filter for the run status.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ActorTaskWebhooksGetParams defines parameters for ActorTaskWebhooksGet.
type ActorTaskWebhooksGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The
	// default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as
	// the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// ActsGetParams defines parameters for ActsGet.
type ActsGetParams struct {
	// My If `true` or `1` then the returned list only contains Actors owned by the user. The default value is `false`.
	My *bool `form:"my,omitempty" json:"my,omitempty"`

	// Offset Number of records that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the
	// maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// SortBy Field to sort the records by. The default is `createdAt`. You can also use `stats.lastRunStartedAt` to sort
	// by the most recently ran Actors.
	SortBy *ActsGetParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`
}

// ActsGetParamsSortBy defines parameters for ActsGet.
type ActsGetParamsSortBy string

// ActBuildsGetParams defines parameters for ActBuildsGet.
type ActBuildsGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// ActBuildsPostParams defines parameters for ActBuildsPost.
type ActBuildsPostParams struct {
	// Version Actor version number to be built.
	Version string `form:"version" json:"version"`

	// UseCache If `true` or `1`, the system will use a cache to speed up the build
	// process. By default, cache is not used.
	UseCache *bool `form:"useCache,omitempty" json:"useCache,omitempty"`

	// BetaPackages If `true` or `1` then the Actor is built with beta versions of Apify NPM
	// packages. By default, the build uses `latest` packages.
	BetaPackages *bool `form:"betaPackages,omitempty" json:"betaPackages,omitempty"`

	// Tag Tag to be applied to the build on success. By default, the tag is taken
	// from Actor version's `buildTag` property.
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// WaitForFinish The maximum number of seconds the server waits for the build to finish.
	// By default it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the build finishes in time then the returned build object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActBuildDefaultGetParams defines parameters for ActBuildDefaultGet.
type ActBuildDefaultGetParams struct {
	// WaitForFinish The maximum number of seconds the server waits for the build to finish.
	// If the build finishes within this time, the returned build object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	//
	// By default it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActBuildGetParams defines parameters for ActBuildGet.
type ActBuildGetParams struct {
	// WaitForFinish The maximum number of seconds the server waits for the build to finish.
	// By default it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the build finishes in time then the returned build object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActRunSyncGetParams defines parameters for ActRunSyncGet.
type ActRunSyncGetParams struct {
	// OutputRecordKey Key of the record from run's default key-value store to be returned
	// in the response. By default, it is `OUTPUT`.
	OutputRecordKey *string `form:"outputRecordKey,omitempty" json:"outputRecordKey,omitempty"`

	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the default run configuration for the Actor.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the default run configuration for the Actor.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the default run
	// configuration for the Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActRunSyncPostJSONBody defines parameters for ActRunSyncPost.
type ActRunSyncPostJSONBody = map[string]interface{}

// ActRunSyncPostParams defines parameters for ActRunSyncPost.
type ActRunSyncPostParams struct {
	// OutputRecordKey Key of the record from run's default key-value store to be returned
	// in the response. By default, it is `OUTPUT`.
	OutputRecordKey *string `form:"outputRecordKey,omitempty" json:"outputRecordKey,omitempty"`

	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the default run configuration for the Actor.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the default run configuration for the Actor.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the default run
	// configuration for the Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActRunSyncGetDatasetItemsGetParams defines parameters for ActRunSyncGetDatasetItemsGet.
type ActRunSyncGetDatasetItemsGetParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the default run configuration for the Actor.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the default run configuration for the Actor.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the default run
	// configuration for the Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`

	// Format Format of the results, possible values are: `json`, `jsonl`, `csv`,
	// `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Clean If `true` or `1` then the API endpoint returns only non-empty items and
	// skips hidden fields (i.e. fields starting with the # character).
	// The `clean` parameter is just a shortcut for `skipHidden=true` and `skipEmpty=true` parameters.
	// Note that since some objects might be skipped from the output, that the
	// result might contain less items than the `limit` value.
	Clean *bool `form:"clean,omitempty" json:"clean,omitempty"`

	// Offset Number of items that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return. By default there is no limit.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields A comma-separated list of fields which should be picked from the items,
	// only these fields will remain in the resulting record objects.
	// Note that the fields in the outputted items are sorted the same way as
	// they are specified in the `fields` query parameter.
	// You can use this feature to effectively fix the output format.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Omit A comma-separated list of fields which should be omitted from the items.
	Omit *string `form:"omit,omitempty" json:"omit,omitempty"`

	// Unwind A comma-separated list of fields which should be unwound, in order which
	// they should be processed. Each field should be either an array or an object.
	// If the field is an array then every element of
	// the array will become a separate record and merged with parent object.
	// If the unwound field is an object then it is merged with the parent object
	// If the unwound field is missing or its value is neither an array nor an
	// object and therefore cannot be merged with a parent object then the item
	// gets preserved as it is.
	// Note that the unwound items ignore the `desc` parameter.
	Unwind *string `form:"unwind,omitempty" json:"unwind,omitempty"`

	// Flatten A comma-separated list of fields which should transform nested objects into flat structures.
	// For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}` is turned into `{"foo.bar": "hello"}`.
	// The original object with properties is replaced with the flattened object.
	Flatten *string `form:"flatten,omitempty" json:"flatten,omitempty"`

	// Desc By default, results are returned in the same order as they were stored.
	// To reverse the order, set this parameter to `true` or `1`.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Attachment If `true` or `1` then the response will define the `Content-Disposition:
	// attachment` header, forcing a web browser to download the file rather
	// than to display it. By default this header is not present.
	Attachment *bool `form:"attachment,omitempty" json:"attachment,omitempty"`

	// Delimiter A delimiter character for CSV files, only used if `format=csv`. You
	// might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
	// for semicolon). The default delimiter is a simple comma (`,`).
	Delimiter *string `form:"delimiter,omitempty" json:"delimiter,omitempty"`

	// Bom All text responses are encoded in UTF-8 encoding. By default, the `format=csv` files are prefixed with
	// the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html` and `rss` files are not.
	// If you want to override this default behavior, specify `bom=1` query
	// parameter to include the BOM or `bom=0` to skip it.
	Bom *bool `form:"bom,omitempty" json:"bom,omitempty"`

	// XmlRoot Overrides default root element name of `xml` output. By default the root
	// element is `items`.
	XmlRoot *string `form:"xmlRoot,omitempty" json:"xmlRoot,omitempty"`

	// XmlRow Overrides default element name that wraps each page or page function
	// result object in `xml` output. By default the element name is `item`.
	XmlRow *string `form:"xmlRow,omitempty" json:"xmlRow,omitempty"`

	// SkipHeaderRow If `true` or `1` then header row in the `csv` format is skipped.
	SkipHeaderRow *bool `form:"skipHeaderRow,omitempty" json:"skipHeaderRow,omitempty"`

	// SkipHidden If `true` or `1` then hidden fields are skipped from the output,
	// i.e. fields starting with the `#` character.
	SkipHidden *bool `form:"skipHidden,omitempty" json:"skipHidden,omitempty"`

	// SkipEmpty If `true` or `1` then empty items are skipped from the output.
	//
	// Note that if used, the results might contain less items than the limit
	// value.
	SkipEmpty *bool `form:"skipEmpty,omitempty" json:"skipEmpty,omitempty"`

	// Simplified If `true` or `1` then, the endpoint applies the `fields=url,pageFunctionResult,errorInfo`
	// and `unwind=pageFunctionResult` query parameters. This feature is used
	// to emulate simplified results provided by the
	// legacy Apify Crawler product and it's not recommended to use it in new integrations.
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`

	// SkipFailedPages If `true` or `1` then, the all the items with errorInfo property will be
	// skipped from the output.
	// This feature is here to emulate functionality of API version 1 used for
	// the legacy Apify Crawler product and it's not recommended to use it in
	// new integrations.
	SkipFailedPages *bool `form:"skipFailedPages,omitempty" json:"skipFailedPages,omitempty"`
}

// ActRunSyncGetDatasetItemsPostJSONBody defines parameters for ActRunSyncGetDatasetItemsPost.
type ActRunSyncGetDatasetItemsPostJSONBody = map[string]interface{}

// ActRunSyncGetDatasetItemsPostParams defines parameters for ActRunSyncGetDatasetItemsPost.
type ActRunSyncGetDatasetItemsPostParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the default run configuration for the Actor.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the default run configuration for the Actor.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the default run
	// configuration for the Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification
	// e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`

	// Format Format of the results, possible values are: `json`, `jsonl`, `csv`,
	// `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Clean If `true` or `1` then the API endpoint returns only non-empty items and
	// skips hidden fields (i.e. fields starting with the # character).
	// The `clean` parameter is just a shortcut for `skipHidden=true` and
	// `skipEmpty=true` parameters.
	// Note that since some objects might be skipped from the output, that the
	// result might contain less items than the `limit` value.
	Clean *bool `form:"clean,omitempty" json:"clean,omitempty"`

	// Offset Number of items that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return. By default there is no limit.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields A comma-separated list of fields which should be picked from the items,
	// only these fields will remain in the resulting record objects.
	// Note that the fields in the outputted items are sorted the same way as
	// they are specified in the `fields` query parameter.
	// You can use this feature to effectively fix the output format.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Omit A comma-separated list of fields which should be omitted from the items.
	Omit *string `form:"omit,omitempty" json:"omit,omitempty"`

	// Unwind A comma-separated list of fields which should be unwound, in order which
	// they should be processed. Each field should be either an array or an object.
	// If the field is an array then every element of
	// the array will become a separate record and merged with parent object.
	// If the unwound field is an object then it is merged with the parent object.
	// If the unwound field is missing or its value is neither an array nor an
	// object and therefore cannot be merged with a parent object then the item
	// gets preserved as it is.
	// Note that the unwound items ignore the `desc` parameter.
	Unwind *string `form:"unwind,omitempty" json:"unwind,omitempty"`

	// Flatten A comma-separated list of fields which should transform nested objects
	// into flat structures.
	// For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}`
	// is turned into `{"foo.bar": "hello"}`.
	// The original object with properties is replaced with the flattened
	// object.
	Flatten *string `form:"flatten,omitempty" json:"flatten,omitempty"`

	// Desc By default, results are returned in the same order as they were stored.
	// To reverse the order, set this parameter to `true` or `1`.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Attachment If `true` or `1` then the response will define the `Content-Disposition:
	// attachment` header, forcing a web browser to download the file rather
	// than to display it. By default this header is not present.
	Attachment *bool `form:"attachment,omitempty" json:"attachment,omitempty"`

	// Delimiter A delimiter character for CSV files, only used if `format=csv`. You
	// might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
	// for semicolon). The default delimiter is a simple comma (`,`).
	Delimiter *string `form:"delimiter,omitempty" json:"delimiter,omitempty"`

	// Bom All text responses are encoded in UTF-8 encoding. By default, the
	// `format=csv` files are prefixed with
	// the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html`
	// and `rss` files are not.
	// If you want to override this default behavior, specify `bom=1` query
	// parameter to include the BOM or `bom=0` to skip it.
	Bom *bool `form:"bom,omitempty" json:"bom,omitempty"`

	// XmlRoot Overrides default root element name of `xml` output. By default the root
	// element is `items`.
	XmlRoot *string `form:"xmlRoot,omitempty" json:"xmlRoot,omitempty"`

	// XmlRow Overrides default element name that wraps each page or page function
	// result object in `xml` output. By default the element name is `item`.
	XmlRow *string `form:"xmlRow,omitempty" json:"xmlRow,omitempty"`

	// SkipHeaderRow If `true` or `1` then header row in the `csv` format is skipped.
	SkipHeaderRow *bool `form:"skipHeaderRow,omitempty" json:"skipHeaderRow,omitempty"`

	// SkipHidden If `true` or `1` then hidden fields are skipped from the output,
	// i.e. fields starting with the `#` character.
	SkipHidden *bool `form:"skipHidden,omitempty" json:"skipHidden,omitempty"`

	// SkipEmpty If `true` or `1` then empty items are skipped from the output.
	//
	// Note that if used, the results might contain less items than the limit
	// value.
	SkipEmpty *bool `form:"skipEmpty,omitempty" json:"skipEmpty,omitempty"`

	// Simplified If `true` or `1` then, the endpoint applies the
	// `fields=url,pageFunctionResult,errorInfo`
	// and `unwind=pageFunctionResult` query parameters. This feature is used
	// to emulate simplified results provided by the
	// legacy Apify Crawler product and it's not recommended to use it in new
	// integrations.
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`

	// SkipFailedPages If `true` or `1` then, the all the items with errorInfo property will be
	// skipped from the output.
	// This feature is here to emulate functionality of API version 1 used for
	// the legacy Apify Crawler product and it's not recommended to use it in
	// new integrations.
	SkipFailedPages *bool `form:"skipFailedPages,omitempty" json:"skipFailedPages,omitempty"`
}

// ActRunsGetParams defines parameters for ActRunsGet.
type ActRunsGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The
	// default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as
	// the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Status Single status or comma-separated list of statuses, see ([available
	// statuses](https://docs.apify.com/platform/actors/running/runs-and-builds#lifecycle)). Used to filter runs by the specified statuses only.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ActRunsPostJSONBody defines parameters for ActRunsPost.
type ActRunsPostJSONBody = map[string]interface{}

// ActRunsPostParams defines parameters for ActRunsPost.
type ActRunsPostParams struct {
	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the default run configuration for the Actor.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the default run configuration for the Actor.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`

	// MaxItems The maximum number of items that the Actor run should return. This is
	// useful for pay-per-result Actors, as it allows you to limit the number
	// of results that will be charged to your subscription. You can access the
	// maximum number of items in your Actor by using the
	// `ACTOR_MAX_PAID_DATASET_ITEMS` environment variable.
	MaxItems *float64 `form:"maxItems,omitempty" json:"maxItems,omitempty"`

	// MaxTotalChargeUsd Specifies the maximum cost of the Actor run. This parameter is
	// useful for pay-per-event Actors, as it allows you to limit the amount
	// charged to your subscription. You can access the
	// maximum cost in your Actor by using the
	// `ACTOR_MAX_TOTAL_CHARGE_USD` environment variable.
	MaxTotalChargeUsd *float64 `form:"maxTotalChargeUsd,omitempty" json:"maxTotalChargeUsd,omitempty"`

	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the default run
	// configuration for the Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// WaitForFinish The maximum number of seconds the server waits for the run to finish. By
	// default, it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the run finishes in time then the returned run object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`

	// Webhooks Specifies optional webhooks associated with the Actor run, which can be
	// used to receive a notification e.g. when the Actor finished or failed. The value is a Base64-encoded
	// JSON array of objects defining the webhooks. For more information, see
	// [Webhooks documentation](https://docs.apify.com/platform/integrations/webhooks).
	Webhooks *string `form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

// ActRunsLastGetParams defines parameters for ActRunsLastGet.
type ActRunsLastGetParams struct {
	// Status Filter for the run status.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ActRunGetParams defines parameters for ActRunGet.
type ActRunGetParams struct {
	// WaitForFinish The maximum number of seconds the server waits for the run to finish. By
	// default it is `0`, the maximum value is `60`. <!-- MAX_ACTOR_JOB_ASYNC_WAIT_SECS -->
	// If the run finishes in time then the returned run object will have a terminal status (e.g. `SUCCEEDED`),
	// otherwise it will have a transitional status (e.g. `RUNNING`).
	WaitForFinish *float64 `form:"waitForFinish,omitempty" json:"waitForFinish,omitempty"`
}

// ActRunAbortPostParams defines parameters for ActRunAbortPost.
type ActRunAbortPostParams struct {
	// Gracefully If true passed, the Actor run will abort gracefully.
	// It will send `aborting` and `persistState` event into run and force-stop the run after 30 seconds.
	// It is helpful in cases where you plan to resurrect the run later.
	Gracefully *bool `form:"gracefully,omitempty" json:"gracefully,omitempty"`
}

// ActRunMetamorphPostParams defines parameters for ActRunMetamorphPost.
type ActRunMetamorphPostParams struct {
	// TargetActorId ID of a target Actor that the run should be transformed into.
	TargetActorId string `form:"targetActorId" json:"targetActorId"`

	// Build Optional build of the target Actor.
	//
	// It can be either a build tag or build number. By default, the run uses
	// the build specified in the default run configuration for the target
	// Actor (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`
}

// ActRunResurrectPostParams defines parameters for ActRunResurrectPost.
type ActRunResurrectPostParams struct {
	// Build Specifies the Actor build to run. It can be either a build tag or build
	// number. By default, the run uses the build specified in the run that is
	// being resurrected (typically `latest`).
	Build *string `form:"build,omitempty" json:"build,omitempty"`

	// Timeout Optional timeout for the run, in seconds. By default, the run uses a
	// timeout specified in the run that is being resurrected.
	Timeout *float64 `form:"timeout,omitempty" json:"timeout,omitempty"`

	// Memory Memory limit for the run, in megabytes. The amount of memory can be set
	// to a power of 2 with a minimum of 128. By default, the run uses a memory
	// limit specified in the run that is being resurrected.
	Memory *float64 `form:"memory,omitempty" json:"memory,omitempty"`
}

// ActWebhooksGetParams defines parameters for ActWebhooksGet.
type ActWebhooksGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The
	// default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as
	// the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// DatasetsGetParams defines parameters for DatasetsGet.
type DatasetsGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Unnamed If `true` or `1` then all the datasets are returned. By default only named datasets are returned.
	Unnamed *bool `form:"unnamed,omitempty" json:"unnamed,omitempty"`
}

// DatasetsPostParams defines parameters for DatasetsPost.
type DatasetsPostParams struct {
	// Name Custom unique name to easily identify the dataset in the future.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// DatasetGetParams defines parameters for DatasetGet.
type DatasetGetParams struct {
	// Token API authentication token. It is required only when using the `username~dataset-name` format for `datasetId`.
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// DatasetItemsGetParams defines parameters for DatasetItemsGet.
type DatasetItemsGetParams struct {
	// Format Format of the results, possible values are: `json`, `jsonl`, `csv`, `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Clean If `true` or `1` then the API endpoint returns only non-empty items and skips hidden fields (i.e. fields starting with the # character).
	// The `clean` parameter is just a shortcut for `skipHidden=true` and `skipEmpty=true` parameters.
	// Note that since some objects might be skipped from the output, that the result might contain less items than the `limit` value.
	Clean *bool `form:"clean,omitempty" json:"clean,omitempty"`

	// Offset Number of items that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return. By default there is no limit.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields A comma-separated list of fields which should be picked from the items, only these fields will remain in the resulting record objects.
	// Note that the fields in the outputted items are sorted the same way as they are specified in the `fields` query parameter.
	// You can use this feature to effectively fix the output format.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Omit A comma-separated list of fields which should be omitted from the items.
	Omit *string `form:"omit,omitempty" json:"omit,omitempty"`

	// Unwind A comma-separated list of fields which should be unwound, in order which they should be processed. Each field should be either an array or an object.
	// If the field is an array then every element of the array will become a separate record and merged with parent object.
	// If the unwound field is an object then it is merged with the parent object.
	// If the unwound field is missing or its value is neither an array nor an object and therefore cannot be merged with a parent object then the item gets preserved as it is.
	// Note that the unwound items ignore the `desc` parameter.
	Unwind *string `form:"unwind,omitempty" json:"unwind,omitempty"`

	// Flatten A comma-separated list of fields which should transform nested objects into flat structures.
	//
	// For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}` is turned into `{"foo.bar": "hello"}`.
	//
	// The original object with properties is replaced with the flattened object.
	Flatten *string `form:"flatten,omitempty" json:"flatten,omitempty"`

	// Desc By default, results are returned in the same order as they were stored.
	// To reverse the order, set this parameter to `true` or `1`.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Attachment If `true` or `1` then the response will define the `Content-Disposition:
	// attachment` header, forcing a web browser to download the file rather
	// than to display it. By default this header is not present.
	Attachment *bool `form:"attachment,omitempty" json:"attachment,omitempty"`

	// Delimiter A delimiter character for CSV files, only used if `format=csv`. You
	// might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
	// for semicolon). The default delimiter is a simple comma (`,`).
	Delimiter *string `form:"delimiter,omitempty" json:"delimiter,omitempty"`

	// Bom All text responses are encoded in UTF-8 encoding. By default, the
	// `format=csv` files are prefixed with the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html` and `rss` files are not.
	//
	// If you want to override this default behavior, specify `bom=1` query parameter to include the BOM or `bom=0` to skip it.
	Bom *bool `form:"bom,omitempty" json:"bom,omitempty"`

	// XmlRoot Overrides default root element name of `xml` output. By default the root element is `items`.
	XmlRoot *string `form:"xmlRoot,omitempty" json:"xmlRoot,omitempty"`

	// XmlRow Overrides default element name that wraps each page or page function result object in `xml` output. By default the element name is `item`.
	XmlRow *string `form:"xmlRow,omitempty" json:"xmlRow,omitempty"`

	// SkipHeaderRow If `true` or `1` then header row in the `csv` format is skipped.
	SkipHeaderRow *bool `form:"skipHeaderRow,omitempty" json:"skipHeaderRow,omitempty"`

	// SkipHidden If `true` or `1` then hidden fields are skipped from the output, i.e. fields starting with the `#` character.
	SkipHidden *bool `form:"skipHidden,omitempty" json:"skipHidden,omitempty"`

	// SkipEmpty If `true` or `1` then empty items are skipped from the output.
	//
	// Note that if used, the results might contain less items than the limit value.
	SkipEmpty *bool `form:"skipEmpty,omitempty" json:"skipEmpty,omitempty"`

	// Simplified If `true` or `1` then, the endpoint applies the `fields=url,pageFunctionResult,errorInfo`
	// and `unwind=pageFunctionResult` query parameters. This feature is used to emulate simplified results provided by the
	// legacy Apify Crawler product and it's not recommended to use it in new integrations.
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`

	// View Defines the view configuration for dataset items based on the schema definition.
	// This parameter determines how the data will be filtered and presented.
	// For complete specification details, see the [dataset schema documentation](/platform/actors/development/actor-definition/dataset-schema).
	View *string `form:"view,omitempty" json:"view,omitempty"`

	// SkipFailedPages If `true` or `1` then, the all the items with errorInfo property will be skipped from the output.
	//
	// This feature is here to emulate functionality of API version 1 used for the legacy Apify Crawler product and it's not recommended to use it in new integrations.
	SkipFailedPages *bool `form:"skipFailedPages,omitempty" json:"skipFailedPages,omitempty"`
}

// DatasetItemsPostJSONBody defines parameters for DatasetItemsPost.
type DatasetItemsPostJSONBody = []PutItemsRequest

// KeyValueStoresGetParams defines parameters for KeyValueStoresGet.
type KeyValueStoresGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the
	// maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Unnamed If `true` or `1` then all the stores are returned. By default, only
	// named key-value stores are returned.
	Unnamed *bool `form:"unnamed,omitempty" json:"unnamed,omitempty"`
}

// KeyValueStoresPostParams defines parameters for KeyValueStoresPost.
type KeyValueStoresPostParams struct {
	// Name Custom unique name to easily identify the store in the future.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// KeyValueStoreKeysGetParams defines parameters for KeyValueStoreKeysGet.
type KeyValueStoreKeysGetParams struct {
	// ExclusiveStartKey All keys up to this one (including) are skipped from the result.
	ExclusiveStartKey *string `form:"exclusiveStartKey,omitempty" json:"exclusiveStartKey,omitempty"`

	// Limit Number of keys to be returned. Maximum value is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Collection Limit the results to keys that belong to a specific collection from the key-value store schema. The key-value store need to have a schema defined for this parameter to work.
	Collection *string `form:"collection,omitempty" json:"collection,omitempty"`

	// Prefix Limit the results to keys that start with a specific prefix.
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty"`
}

// KeyValueStoreRecordPutParams defines parameters for KeyValueStoreRecordPut.
type KeyValueStoreRecordPutParams struct {
	ContentEncoding KeyValueStoreRecordPutParamsContentEncoding `json:"Content-Encoding"`
}

// KeyValueStoreRecordPutParamsContentEncoding defines parameters for KeyValueStoreRecordPut.
type KeyValueStoreRecordPutParamsContentEncoding string

// LogGetParams defines parameters for LogGet.
type LogGetParams struct {
	// Stream If `true` or `1` then the logs will be streamed as long as the run or
	// build is running.
	Stream bool `form:"stream" json:"stream"`

	// Download If `true` or `1` then the web browser will download the log file rather
	// than open it in a tab.
	Download bool `form:"download" json:"download"`

	// Raw If `true` or `1`, the logs will be kept verbatim. By default, the API removes
	// ANSI escape codes from the logs, keeping only printable characters.
	Raw *bool `form:"raw,omitempty" json:"raw,omitempty"`
}

// RequestQueuesGetParams defines parameters for RequestQueuesGet.
type RequestQueuesGetParams struct {
	// Offset Number of array elements that should be skipped at the start. The
	// default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of array elements to return. The default value as well as
	// the maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `startedAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`

	// Unnamed If `true` or `1` then all the queues are returned. By default only named
	// queues are returned.
	Unnamed *bool `form:"unnamed,omitempty" json:"unnamed,omitempty"`
}

// RequestQueuesPostParams defines parameters for RequestQueuesPost.
type RequestQueuesPostParams struct {
	// Name Custom unique name to easily identify the queue in the future.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// RequestQueuePutJSONBody defines parameters for RequestQueuePut.
type RequestQueuePutJSONBody struct {
	Name string `json:"name"`
}

// RequestQueueHeadGetParams defines parameters for RequestQueueHeadGet.
type RequestQueueHeadGetParams struct {
	// Limit How many items from queue should be returned.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to
	// determine whether the queue was accessed by multiple clients. If
	// `clientKey` is not provided,
	// the system considers this API call to come from a new client. For
	// details, see the `hadMultipleClients` field returned by the [Get
	// head](#/reference/request-queues/queue-head) operation.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`
}

// RequestQueueHeadLockPostParams defines parameters for RequestQueueHeadLockPost.
type RequestQueueHeadLockPostParams struct {
	// LockSecs How long the requests will be locked for (in seconds).
	LockSecs float64 `form:"lockSecs" json:"lockSecs"`

	// Limit How many items from the queue should be returned.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`
}

// RequestQueueRequestsGetParams defines parameters for RequestQueueRequestsGet.
type RequestQueueRequestsGetParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to
	// determine whether the queue was accessed by multiple clients. If
	// `clientKey` is not provided,
	// the system considers this API call to come from a new client. For
	// details, see the `hadMultipleClients` field returned by the [Get
	// head](#/reference/request-queues/queue-head) operation.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`

	// ExclusiveStartId All requests up to this one (including) are skipped from the result.
	ExclusiveStartId *string `form:"exclusiveStartId,omitempty" json:"exclusiveStartId,omitempty"`

	// Limit Number of keys to be returned. Maximum value is `10000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// RequestQueueRequestsPostJSONBody defines parameters for RequestQueueRequestsPost.
type RequestQueueRequestsPostJSONBody struct {
	Method    string `json:"method"`
	UniqueKey string `json:"uniqueKey"`
	Url       string `json:"url"`
}

// RequestQueueRequestsPostParams defines parameters for RequestQueueRequestsPost.
type RequestQueueRequestsPostParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to
	// determine whether the queue was accessed by multiple clients. If
	// `clientKey` is not provided,
	// the system considers this API call to come from a new client. For
	// details, see the `hadMultipleClients` field returned by the [Get
	// head](#/reference/request-queues/queue-head) operation.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`

	// Forefront Determines if request should be added to the head of the queue or to the
	// end. Default value is `false` (end of queue).
	Forefront *string `form:"forefront,omitempty" json:"forefront,omitempty"`
}

// RequestQueueRequestsBatchDeleteParams defines parameters for RequestQueueRequestsBatchDelete.
type RequestQueueRequestsBatchDeleteParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long
	ClientKey   *string                                          `form:"clientKey,omitempty" json:"clientKey,omitempty"`
	ContentType RequestQueueRequestsBatchDeleteParamsContentType `json:"Content-Type"`
}

// RequestQueueRequestsBatchDeleteParamsContentType defines parameters for RequestQueueRequestsBatchDelete.
type RequestQueueRequestsBatchDeleteParamsContentType string

// RequestQueueRequestsBatchPostJSONBody defines parameters for RequestQueueRequestsBatchPost.
type RequestQueueRequestsBatchPostJSONBody = []RequestWithoutId

// RequestQueueRequestsBatchPostParams defines parameters for RequestQueueRequestsBatchPost.
type RequestQueueRequestsBatchPostParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`

	// Forefront Determines if request should be added to the head of the queue or to the
	// end. Default value is `false` (end of queue).
	Forefront *string `form:"forefront,omitempty" json:"forefront,omitempty"`
}

// RequestQueueRequestsUnlockPostParams defines parameters for RequestQueueRequestsUnlockPost.
type RequestQueueRequestsUnlockPostParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`
}

// RequestQueueRequestDeleteParams defines parameters for RequestQueueRequestDelete.
type RequestQueueRequestDeleteParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to
	// determine whether the queue was accessed by multiple clients. If
	// `clientKey` is not provided,
	// the system considers this API call to come from a new client. For
	// details, see the `hadMultipleClients` field returned by the [Get
	// head](#/reference/request-queues/queue-head) operation.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`
}

// RequestQueueRequestPutJSONBody defines parameters for RequestQueueRequestPut.
type RequestQueueRequestPutJSONBody struct {
	ErrorMessages *[]string               `json:"errorMessages"`
	HandledAt     *string                 `json:"handledAt"`
	Headers       *map[string]interface{} `json:"headers"`
	Id            string                  `json:"id"`
	LoadedUrl     *string                 `json:"loadedUrl"`
	Method        string                  `json:"method"`
	NoRetry       *bool                   `json:"noRetry"`
	Payload       *map[string]interface{} `json:"payload"`
	RetryCount    float32                 `json:"retryCount"`
	UniqueKey     string                  `json:"uniqueKey"`
	Url           string                  `json:"url"`
	UserData      *struct {
		Image *string `json:"image"`
		Label *string `json:"label"`
	} `json:"userData,omitempty"`
}

// RequestQueueRequestPutParams defines parameters for RequestQueueRequestPut.
type RequestQueueRequestPutParams struct {
	// Forefront Determines if request should be added to the head of the queue or to the
	// end. Default value is `false` (end of queue).
	Forefront *string `form:"forefront,omitempty" json:"forefront,omitempty"`

	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to
	// determine whether the queue was accessed by multiple clients. If
	// `clientKey` is not provided,
	// the system considers this API call to come from a new client. For
	// details, see the `hadMultipleClients` field returned by the [Get
	// head](#/reference/request-queues/queue-head) operation.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`
}

// RequestQueueRequestLockDeleteParams defines parameters for RequestQueueRequestLockDelete.
type RequestQueueRequestLockDeleteParams struct {
	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to for locking
	// and unlocking requests. You can delete or prolong lock only for requests that were locked by by same
	// client key or from the same Actor run.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`

	// Forefront Determines if request should be added to the head of the queue or to the
	// end after lock was removed.
	Forefront   *string                                        `form:"forefront,omitempty" json:"forefront,omitempty"`
	ContentType RequestQueueRequestLockDeleteParamsContentType `json:"Content-Type"`
}

// RequestQueueRequestLockDeleteParamsContentType defines parameters for RequestQueueRequestLockDelete.
type RequestQueueRequestLockDeleteParamsContentType string

// RequestQueueRequestLockPutParams defines parameters for RequestQueueRequestLockPut.
type RequestQueueRequestLockPutParams struct {
	// LockSecs For how long second request will be locked.
	LockSecs float64 `form:"lockSecs" json:"lockSecs"`

	// ClientKey A unique identifier of the client accessing the request queue. It must
	// be a string between 1 and 32 characters long. This identifier is used to for locking
	// and unlocking requests. You can delete or prolong lock only for requests that were locked by by same
	// client key or from the same Actor run.
	ClientKey *string `form:"clientKey,omitempty" json:"clientKey,omitempty"`

	// Forefront Determines if request should be added to the head of the queue or to the
	// end after lock expires.
	Forefront *string `form:"forefront,omitempty" json:"forefront,omitempty"`
}

// SchedulesGetParams defines parameters for SchedulesGet.
type SchedulesGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value, as well as the maximum, is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1`, the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// StoreGetParams defines parameters for StoreGet.
type StoreGetParams struct {
	// Limit Maximum number of elements to return. The default and maximum value is
	// `1,000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of elements that should be skipped at the start. The default
	// value is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search String to search by. The search runs on the following fields: `title`,
	// `name`, `description`, `username`, `readme`.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// SortBy Specifies the field by which to sort the results. The supported values
	// are `relevance` (default), `popularity`, `newest` and `lastUpdate`.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Category Filters the results by the specified category.
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Username Filters the results by the specified username.
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// PricingModel Only return Actors with the specified pricing model.
	PricingModel *StoreGetParamsPricingModel `form:"pricingModel,omitempty" json:"pricingModel,omitempty"`
}

// StoreGetParamsPricingModel defines parameters for StoreGet.
type StoreGetParamsPricingModel string

// UsersMeUsageMonthlyGetParams defines parameters for UsersMeUsageMonthlyGet.
type UsersMeUsageMonthlyGetParams struct {
	// Date Date in the YYYY-MM-DD format.
	Date *string `form:"date,omitempty" json:"date,omitempty"`
}

// WebhookDispatchesGetParams defines parameters for WebhookDispatchesGet.
type WebhookDispatchesGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the
	// maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// WebhooksGetParams defines parameters for WebhooksGet.
type WebhooksGetParams struct {
	// Offset Number of records that should be skipped at the start. The default value
	// is `0`.
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return. The default value as well as the
	// maximum is `1000`.
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Desc If `true` or `1` then the objects are sorted by the `createdAt` field in
	// descending order. By default, they are sorted in ascending order.
	Desc *bool `form:"desc,omitempty" json:"desc,omitempty"`
}

// WebhooksPostParams defines parameters for WebhooksPost.
type WebhooksPostParams struct {
	Limit  *string `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`
	Desc   *string `form:"desc,omitempty" json:"desc,omitempty"`
}

// ActorRunPutJSONRequestBody defines body for ActorRunPut for application/json ContentType.
type ActorRunPutJSONRequestBody ActorRunPutJSONBody

// PostChargeRunJSONRequestBody defines body for PostChargeRun for application/json ContentType.
type PostChargeRunJSONRequestBody = ChargeRunRequest

// ActorTasksPostJSONRequestBody defines body for ActorTasksPost for application/json ContentType.
type ActorTasksPostJSONRequestBody ActorTasksPostJSONBody

// ActorTaskPutJSONRequestBody defines body for ActorTaskPut for application/json ContentType.
type ActorTaskPutJSONRequestBody = UpdateTaskRequest

// ActorTaskInputPutJSONRequestBody defines body for ActorTaskInputPut for application/json ContentType.
type ActorTaskInputPutJSONRequestBody = ActorTaskInputPutJSONBody

// ActorTaskRunSyncPostJSONRequestBody defines body for ActorTaskRunSyncPost for application/json ContentType.
type ActorTaskRunSyncPostJSONRequestBody = ActorTaskRunSyncPostJSONBody

// ActorTaskRunSyncGetDatasetItemsPostJSONRequestBody defines body for ActorTaskRunSyncGetDatasetItemsPost for application/json ContentType.
type ActorTaskRunSyncGetDatasetItemsPostJSONRequestBody = ActorTaskRunSyncGetDatasetItemsPostJSONBody

// ActorTaskRunsPostJSONRequestBody defines body for ActorTaskRunsPost for application/json ContentType.
type ActorTaskRunsPostJSONRequestBody = ActorTaskRunsPostJSONBody

// ActsPostJSONRequestBody defines body for ActsPost for application/json ContentType.
type ActsPostJSONRequestBody = CreateActorRequest

// ActPutJSONRequestBody defines body for ActPut for application/json ContentType.
type ActPutJSONRequestBody = UpdateActorRequest

// ActRunSyncPostJSONRequestBody defines body for ActRunSyncPost for application/json ContentType.
type ActRunSyncPostJSONRequestBody = ActRunSyncPostJSONBody

// ActRunSyncGetDatasetItemsPostJSONRequestBody defines body for ActRunSyncGetDatasetItemsPost for application/json ContentType.
type ActRunSyncGetDatasetItemsPostJSONRequestBody = ActRunSyncGetDatasetItemsPostJSONBody

// ActRunsPostJSONRequestBody defines body for ActRunsPost for application/json ContentType.
type ActRunsPostJSONRequestBody = ActRunsPostJSONBody

// ActVersionsPostJSONRequestBody defines body for ActVersionsPost for application/json ContentType.
type ActVersionsPostJSONRequestBody = CreateOrUpdateVersionRequest

// ActVersionPutJSONRequestBody defines body for ActVersionPut for application/json ContentType.
type ActVersionPutJSONRequestBody = CreateOrUpdateVersionRequest

// ActVersionEnvVarsPostJSONRequestBody defines body for ActVersionEnvVarsPost for application/json ContentType.
type ActVersionEnvVarsPostJSONRequestBody = CreateOrUpdateEnvVarRequest

// ActVersionEnvVarPutJSONRequestBody defines body for ActVersionEnvVarPut for application/json ContentType.
type ActVersionEnvVarPutJSONRequestBody = CreateOrUpdateEnvVarRequest

// DatasetPutJSONRequestBody defines body for DatasetPut for application/json ContentType.
type DatasetPutJSONRequestBody = UpdateDatasetRequest

// DatasetItemsPostJSONRequestBody defines body for DatasetItemsPost for application/json ContentType.
type DatasetItemsPostJSONRequestBody = DatasetItemsPostJSONBody

// KeyValueStorePutJSONRequestBody defines body for KeyValueStorePut for application/json ContentType.
type KeyValueStorePutJSONRequestBody = UpdateStoreRequest

// KeyValueStoreRecordPutJSONRequestBody defines body for KeyValueStoreRecordPut for application/json ContentType.
type KeyValueStoreRecordPutJSONRequestBody = PutRecordRequest

// RequestQueuePutJSONRequestBody defines body for RequestQueuePut for application/json ContentType.
type RequestQueuePutJSONRequestBody RequestQueuePutJSONBody

// RequestQueueRequestsPostJSONRequestBody defines body for RequestQueueRequestsPost for application/json ContentType.
type RequestQueueRequestsPostJSONRequestBody RequestQueueRequestsPostJSONBody

// RequestQueueRequestsBatchPostJSONRequestBody defines body for RequestQueueRequestsBatchPost for application/json ContentType.
type RequestQueueRequestsBatchPostJSONRequestBody = RequestQueueRequestsBatchPostJSONBody

// RequestQueueRequestPutJSONRequestBody defines body for RequestQueueRequestPut for application/json ContentType.
type RequestQueueRequestPutJSONRequestBody RequestQueueRequestPutJSONBody

// SchedulesPostJSONRequestBody defines body for SchedulesPost for application/json ContentType.
type SchedulesPostJSONRequestBody = ScheduleCreate

// SchedulePutJSONRequestBody defines body for SchedulePut for application/json ContentType.
type SchedulePutJSONRequestBody = ScheduleCreate

// UsersMeLimitsPutJSONRequestBody defines body for UsersMeLimitsPut for application/json ContentType.
type UsersMeLimitsPutJSONRequestBody = UpdateLimitsRequest

// WebhooksPostJSONRequestBody defines body for WebhooksPost for application/json ContentType.
type WebhooksPostJSONRequestBody = WebhookCreate

// WebhookPutJSONRequestBody defines body for WebhookPut for application/json ContentType.
type WebhookPutJSONRequestBody = WebhookUpdate

// AsActorExampleRunInput0 returns the union data inside the Actor_ExampleRunInput as a ActorExampleRunInput0
func (t Actor_ExampleRunInput) AsActorExampleRunInput0() (ActorExampleRunInput0, error) {
	var body ActorExampleRunInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorExampleRunInput0 overwrites any union data inside the Actor_ExampleRunInput as the provided ActorExampleRunInput0
func (t *Actor_ExampleRunInput) FromActorExampleRunInput0(v ActorExampleRunInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorExampleRunInput0 performs a merge with any union data inside the Actor_ExampleRunInput, using the provided ActorExampleRunInput0
func (t *Actor_ExampleRunInput) MergeActorExampleRunInput0(v ActorExampleRunInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExampleRunInput returns the union data inside the Actor_ExampleRunInput as a ExampleRunInput
func (t Actor_ExampleRunInput) AsExampleRunInput() (ExampleRunInput, error) {
	var body ExampleRunInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExampleRunInput overwrites any union data inside the Actor_ExampleRunInput as the provided ExampleRunInput
func (t *Actor_ExampleRunInput) FromExampleRunInput(v ExampleRunInput) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExampleRunInput performs a merge with any union data inside the Actor_ExampleRunInput, using the provided ExampleRunInput
func (t *Actor_ExampleRunInput) MergeExampleRunInput(v ExampleRunInput) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_ExampleRunInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_ExampleRunInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActorTaggedBuilds0 returns the union data inside the Actor_TaggedBuilds as a ActorTaggedBuilds0
func (t Actor_TaggedBuilds) AsActorTaggedBuilds0() (ActorTaggedBuilds0, error) {
	var body ActorTaggedBuilds0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorTaggedBuilds0 overwrites any union data inside the Actor_TaggedBuilds as the provided ActorTaggedBuilds0
func (t *Actor_TaggedBuilds) FromActorTaggedBuilds0(v ActorTaggedBuilds0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorTaggedBuilds0 performs a merge with any union data inside the Actor_TaggedBuilds, using the provided ActorTaggedBuilds0
func (t *Actor_TaggedBuilds) MergeActorTaggedBuilds0(v ActorTaggedBuilds0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaggedBuilds returns the union data inside the Actor_TaggedBuilds as a TaggedBuilds
func (t Actor_TaggedBuilds) AsTaggedBuilds() (TaggedBuilds, error) {
	var body TaggedBuilds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaggedBuilds overwrites any union data inside the Actor_TaggedBuilds as the provided TaggedBuilds
func (t *Actor_TaggedBuilds) FromTaggedBuilds(v TaggedBuilds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaggedBuilds performs a merge with any union data inside the Actor_TaggedBuilds, using the provided TaggedBuilds
func (t *Actor_TaggedBuilds) MergeTaggedBuilds(v TaggedBuilds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_TaggedBuilds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_TaggedBuilds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPayPerEventActorPricingInfo returns the union data inside the ActorRunPricingInfo as a PayPerEventActorPricingInfo
func (t ActorRunPricingInfo) AsPayPerEventActorPricingInfo() (PayPerEventActorPricingInfo, error) {
	var body PayPerEventActorPricingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPayPerEventActorPricingInfo overwrites any union data inside the ActorRunPricingInfo as the provided PayPerEventActorPricingInfo
func (t *ActorRunPricingInfo) FromPayPerEventActorPricingInfo(v PayPerEventActorPricingInfo) error {
	v.PricingModel = "PAY_PER_EVENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePayPerEventActorPricingInfo performs a merge with any union data inside the ActorRunPricingInfo, using the provided PayPerEventActorPricingInfo
func (t *ActorRunPricingInfo) MergePayPerEventActorPricingInfo(v PayPerEventActorPricingInfo) error {
	v.PricingModel = "PAY_PER_EVENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPricePerDatasetItemActorPricingInfo returns the union data inside the ActorRunPricingInfo as a PricePerDatasetItemActorPricingInfo
func (t ActorRunPricingInfo) AsPricePerDatasetItemActorPricingInfo() (PricePerDatasetItemActorPricingInfo, error) {
	var body PricePerDatasetItemActorPricingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricePerDatasetItemActorPricingInfo overwrites any union data inside the ActorRunPricingInfo as the provided PricePerDatasetItemActorPricingInfo
func (t *ActorRunPricingInfo) FromPricePerDatasetItemActorPricingInfo(v PricePerDatasetItemActorPricingInfo) error {
	v.PricingModel = "PRICE_PER_DATASET_ITEM"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricePerDatasetItemActorPricingInfo performs a merge with any union data inside the ActorRunPricingInfo, using the provided PricePerDatasetItemActorPricingInfo
func (t *ActorRunPricingInfo) MergePricePerDatasetItemActorPricingInfo(v PricePerDatasetItemActorPricingInfo) error {
	v.PricingModel = "PRICE_PER_DATASET_ITEM"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlatPricePerMonthActorPricingInfo returns the union data inside the ActorRunPricingInfo as a FlatPricePerMonthActorPricingInfo
func (t ActorRunPricingInfo) AsFlatPricePerMonthActorPricingInfo() (FlatPricePerMonthActorPricingInfo, error) {
	var body FlatPricePerMonthActorPricingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlatPricePerMonthActorPricingInfo overwrites any union data inside the ActorRunPricingInfo as the provided FlatPricePerMonthActorPricingInfo
func (t *ActorRunPricingInfo) FromFlatPricePerMonthActorPricingInfo(v FlatPricePerMonthActorPricingInfo) error {
	v.PricingModel = "FLAT_PRICE_PER_MONTH"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlatPricePerMonthActorPricingInfo performs a merge with any union data inside the ActorRunPricingInfo, using the provided FlatPricePerMonthActorPricingInfo
func (t *ActorRunPricingInfo) MergeFlatPricePerMonthActorPricingInfo(v FlatPricePerMonthActorPricingInfo) error {
	v.PricingModel = "FLAT_PRICE_PER_MONTH"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFreeActorPricingInfo returns the union data inside the ActorRunPricingInfo as a FreeActorPricingInfo
func (t ActorRunPricingInfo) AsFreeActorPricingInfo() (FreeActorPricingInfo, error) {
	var body FreeActorPricingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFreeActorPricingInfo overwrites any union data inside the ActorRunPricingInfo as the provided FreeActorPricingInfo
func (t *ActorRunPricingInfo) FromFreeActorPricingInfo(v FreeActorPricingInfo) error {
	v.PricingModel = "FREE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFreeActorPricingInfo performs a merge with any union data inside the ActorRunPricingInfo, using the provided FreeActorPricingInfo
func (t *ActorRunPricingInfo) MergeFreeActorPricingInfo(v FreeActorPricingInfo) error {
	v.PricingModel = "FREE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActorRunPricingInfo) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"pricingModel"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ActorRunPricingInfo) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FLAT_PRICE_PER_MONTH":
		return t.AsFlatPricePerMonthActorPricingInfo()
	case "FREE":
		return t.AsFreeActorPricingInfo()
	case "PAY_PER_EVENT":
		return t.AsPayPerEventActorPricingInfo()
	case "PRICE_PER_DATASET_ITEM":
		return t.AsPricePerDatasetItemActorPricingInfo()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ActorRunPricingInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActorRunPricingInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActorDefinition returns the union data inside the Build_ActorDefinition as a ActorDefinition
func (t Build_ActorDefinition) AsActorDefinition() (ActorDefinition, error) {
	var body ActorDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorDefinition overwrites any union data inside the Build_ActorDefinition as the provided ActorDefinition
func (t *Build_ActorDefinition) FromActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorDefinition performs a merge with any union data inside the Build_ActorDefinition, using the provided ActorDefinition
func (t *Build_ActorDefinition) MergeActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildActorDefinition1 returns the union data inside the Build_ActorDefinition as a BuildActorDefinition1
func (t Build_ActorDefinition) AsBuildActorDefinition1() (BuildActorDefinition1, error) {
	var body BuildActorDefinition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildActorDefinition1 overwrites any union data inside the Build_ActorDefinition as the provided BuildActorDefinition1
func (t *Build_ActorDefinition) FromBuildActorDefinition1(v BuildActorDefinition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildActorDefinition1 performs a merge with any union data inside the Build_ActorDefinition, using the provided BuildActorDefinition1
func (t *Build_ActorDefinition) MergeBuildActorDefinition1(v BuildActorDefinition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Build_ActorDefinition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Build_ActorDefinition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBuildOptions0 returns the union data inside the Build_Options as a BuildOptions0
func (t Build_Options) AsBuildOptions0() (BuildOptions0, error) {
	var body BuildOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildOptions0 overwrites any union data inside the Build_Options as the provided BuildOptions0
func (t *Build_Options) FromBuildOptions0(v BuildOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildOptions0 performs a merge with any union data inside the Build_Options, using the provided BuildOptions0
func (t *Build_Options) MergeBuildOptions0(v BuildOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildOptions returns the union data inside the Build_Options as a BuildOptions
func (t Build_Options) AsBuildOptions() (BuildOptions, error) {
	var body BuildOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildOptions overwrites any union data inside the Build_Options as the provided BuildOptions
func (t *Build_Options) FromBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildOptions performs a merge with any union data inside the Build_Options, using the provided BuildOptions
func (t *Build_Options) MergeBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Build_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Build_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBuildStats0 returns the union data inside the Build_Stats as a BuildStats0
func (t Build_Stats) AsBuildStats0() (BuildStats0, error) {
	var body BuildStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildStats0 overwrites any union data inside the Build_Stats as the provided BuildStats0
func (t *Build_Stats) FromBuildStats0(v BuildStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildStats0 performs a merge with any union data inside the Build_Stats, using the provided BuildStats0
func (t *Build_Stats) MergeBuildStats0(v BuildStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildStats returns the union data inside the Build_Stats as a BuildStats
func (t Build_Stats) AsBuildStats() (BuildStats, error) {
	var body BuildStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildStats overwrites any union data inside the Build_Stats as the provided BuildStats
func (t *Build_Stats) FromBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildStats performs a merge with any union data inside the Build_Stats, using the provided BuildStats
func (t *Build_Stats) MergeBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Build_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Build_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBuildUsage0 returns the union data inside the Build_Usage as a BuildUsage0
func (t Build_Usage) AsBuildUsage0() (BuildUsage0, error) {
	var body BuildUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage0 overwrites any union data inside the Build_Usage as the provided BuildUsage0
func (t *Build_Usage) FromBuildUsage0(v BuildUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage0 performs a merge with any union data inside the Build_Usage, using the provided BuildUsage0
func (t *Build_Usage) MergeBuildUsage0(v BuildUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the Build_Usage as a BuildUsage
func (t Build_Usage) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the Build_Usage as the provided BuildUsage
func (t *Build_Usage) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the Build_Usage, using the provided BuildUsage
func (t *Build_Usage) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Build_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Build_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBuildUsageUsd0 returns the union data inside the Build_UsageUsd as a BuildUsageUsd0
func (t Build_UsageUsd) AsBuildUsageUsd0() (BuildUsageUsd0, error) {
	var body BuildUsageUsd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsageUsd0 overwrites any union data inside the Build_UsageUsd as the provided BuildUsageUsd0
func (t *Build_UsageUsd) FromBuildUsageUsd0(v BuildUsageUsd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsageUsd0 performs a merge with any union data inside the Build_UsageUsd, using the provided BuildUsageUsd0
func (t *Build_UsageUsd) MergeBuildUsageUsd0(v BuildUsageUsd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the Build_UsageUsd as a BuildUsage
func (t Build_UsageUsd) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the Build_UsageUsd as the provided BuildUsage
func (t *Build_UsageUsd) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the Build_UsageUsd, using the provided BuildUsage
func (t *Build_UsageUsd) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Build_UsageUsd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Build_UsageUsd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateActorRequestDefaultRunOptions0 returns the union data inside the CreateActorRequest_DefaultRunOptions as a CreateActorRequestDefaultRunOptions0
func (t CreateActorRequest_DefaultRunOptions) AsCreateActorRequestDefaultRunOptions0() (CreateActorRequestDefaultRunOptions0, error) {
	var body CreateActorRequestDefaultRunOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateActorRequestDefaultRunOptions0 overwrites any union data inside the CreateActorRequest_DefaultRunOptions as the provided CreateActorRequestDefaultRunOptions0
func (t *CreateActorRequest_DefaultRunOptions) FromCreateActorRequestDefaultRunOptions0(v CreateActorRequestDefaultRunOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateActorRequestDefaultRunOptions0 performs a merge with any union data inside the CreateActorRequest_DefaultRunOptions, using the provided CreateActorRequestDefaultRunOptions0
func (t *CreateActorRequest_DefaultRunOptions) MergeCreateActorRequestDefaultRunOptions0(v CreateActorRequestDefaultRunOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDefaultRunOptions returns the union data inside the CreateActorRequest_DefaultRunOptions as a DefaultRunOptions
func (t CreateActorRequest_DefaultRunOptions) AsDefaultRunOptions() (DefaultRunOptions, error) {
	var body DefaultRunOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDefaultRunOptions overwrites any union data inside the CreateActorRequest_DefaultRunOptions as the provided DefaultRunOptions
func (t *CreateActorRequest_DefaultRunOptions) FromDefaultRunOptions(v DefaultRunOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDefaultRunOptions performs a merge with any union data inside the CreateActorRequest_DefaultRunOptions, using the provided DefaultRunOptions
func (t *CreateActorRequest_DefaultRunOptions) MergeDefaultRunOptions(v DefaultRunOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateActorRequest_DefaultRunOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateActorRequest_DefaultRunOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateOrUpdateVersionRequestSourceType0 returns the union data inside the CreateOrUpdateVersionRequest_SourceType as a CreateOrUpdateVersionRequestSourceType0
func (t CreateOrUpdateVersionRequest_SourceType) AsCreateOrUpdateVersionRequestSourceType0() (CreateOrUpdateVersionRequestSourceType0, error) {
	var body CreateOrUpdateVersionRequestSourceType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateOrUpdateVersionRequestSourceType0 overwrites any union data inside the CreateOrUpdateVersionRequest_SourceType as the provided CreateOrUpdateVersionRequestSourceType0
func (t *CreateOrUpdateVersionRequest_SourceType) FromCreateOrUpdateVersionRequestSourceType0(v CreateOrUpdateVersionRequestSourceType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateOrUpdateVersionRequestSourceType0 performs a merge with any union data inside the CreateOrUpdateVersionRequest_SourceType, using the provided CreateOrUpdateVersionRequestSourceType0
func (t *CreateOrUpdateVersionRequest_SourceType) MergeCreateOrUpdateVersionRequestSourceType0(v CreateOrUpdateVersionRequestSourceType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVersionSourceType returns the union data inside the CreateOrUpdateVersionRequest_SourceType as a VersionSourceType
func (t CreateOrUpdateVersionRequest_SourceType) AsVersionSourceType() (VersionSourceType, error) {
	var body VersionSourceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVersionSourceType overwrites any union data inside the CreateOrUpdateVersionRequest_SourceType as the provided VersionSourceType
func (t *CreateOrUpdateVersionRequest_SourceType) FromVersionSourceType(v VersionSourceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVersionSourceType performs a merge with any union data inside the CreateOrUpdateVersionRequest_SourceType, using the provided VersionSourceType
func (t *CreateOrUpdateVersionRequest_SourceType) MergeVersionSourceType(v VersionSourceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateOrUpdateVersionRequest_SourceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateOrUpdateVersionRequest_SourceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTaskRequestInput0 returns the union data inside the CreateTaskRequest_Input as a CreateTaskRequestInput0
func (t CreateTaskRequest_Input) AsCreateTaskRequestInput0() (CreateTaskRequestInput0, error) {
	var body CreateTaskRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTaskRequestInput0 overwrites any union data inside the CreateTaskRequest_Input as the provided CreateTaskRequestInput0
func (t *CreateTaskRequest_Input) FromCreateTaskRequestInput0(v CreateTaskRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTaskRequestInput0 performs a merge with any union data inside the CreateTaskRequest_Input, using the provided CreateTaskRequestInput0
func (t *CreateTaskRequest_Input) MergeCreateTaskRequestInput0(v CreateTaskRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskInput returns the union data inside the CreateTaskRequest_Input as a TaskInput
func (t CreateTaskRequest_Input) AsTaskInput() (TaskInput, error) {
	var body TaskInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskInput overwrites any union data inside the CreateTaskRequest_Input as the provided TaskInput
func (t *CreateTaskRequest_Input) FromTaskInput(v TaskInput) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskInput performs a merge with any union data inside the CreateTaskRequest_Input, using the provided TaskInput
func (t *CreateTaskRequest_Input) MergeTaskInput(v TaskInput) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTaskRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTaskRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTaskRequestOptions0 returns the union data inside the CreateTaskRequest_Options as a CreateTaskRequestOptions0
func (t CreateTaskRequest_Options) AsCreateTaskRequestOptions0() (CreateTaskRequestOptions0, error) {
	var body CreateTaskRequestOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTaskRequestOptions0 overwrites any union data inside the CreateTaskRequest_Options as the provided CreateTaskRequestOptions0
func (t *CreateTaskRequest_Options) FromCreateTaskRequestOptions0(v CreateTaskRequestOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTaskRequestOptions0 performs a merge with any union data inside the CreateTaskRequest_Options, using the provided CreateTaskRequestOptions0
func (t *CreateTaskRequest_Options) MergeCreateTaskRequestOptions0(v CreateTaskRequestOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskOptions returns the union data inside the CreateTaskRequest_Options as a TaskOptions
func (t CreateTaskRequest_Options) AsTaskOptions() (TaskOptions, error) {
	var body TaskOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskOptions overwrites any union data inside the CreateTaskRequest_Options as the provided TaskOptions
func (t *CreateTaskRequest_Options) FromTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskOptions performs a merge with any union data inside the CreateTaskRequest_Options, using the provided TaskOptions
func (t *CreateTaskRequest_Options) MergeTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTaskRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTaskRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActorDefinition returns the union data inside the GetBuildResponse_Data_ActorDefinition as a ActorDefinition
func (t GetBuildResponse_Data_ActorDefinition) AsActorDefinition() (ActorDefinition, error) {
	var body ActorDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorDefinition overwrites any union data inside the GetBuildResponse_Data_ActorDefinition as the provided ActorDefinition
func (t *GetBuildResponse_Data_ActorDefinition) FromActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorDefinition performs a merge with any union data inside the GetBuildResponse_Data_ActorDefinition, using the provided ActorDefinition
func (t *GetBuildResponse_Data_ActorDefinition) MergeActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetBuildResponseDataActorDefinition1 returns the union data inside the GetBuildResponse_Data_ActorDefinition as a GetBuildResponseDataActorDefinition1
func (t GetBuildResponse_Data_ActorDefinition) AsGetBuildResponseDataActorDefinition1() (GetBuildResponseDataActorDefinition1, error) {
	var body GetBuildResponseDataActorDefinition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetBuildResponseDataActorDefinition1 overwrites any union data inside the GetBuildResponse_Data_ActorDefinition as the provided GetBuildResponseDataActorDefinition1
func (t *GetBuildResponse_Data_ActorDefinition) FromGetBuildResponseDataActorDefinition1(v GetBuildResponseDataActorDefinition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetBuildResponseDataActorDefinition1 performs a merge with any union data inside the GetBuildResponse_Data_ActorDefinition, using the provided GetBuildResponseDataActorDefinition1
func (t *GetBuildResponse_Data_ActorDefinition) MergeGetBuildResponseDataActorDefinition1(v GetBuildResponseDataActorDefinition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBuildResponse_Data_ActorDefinition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBuildResponse_Data_ActorDefinition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetBuildResponseDataOptions0 returns the union data inside the GetBuildResponse_Data_Options as a GetBuildResponseDataOptions0
func (t GetBuildResponse_Data_Options) AsGetBuildResponseDataOptions0() (GetBuildResponseDataOptions0, error) {
	var body GetBuildResponseDataOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetBuildResponseDataOptions0 overwrites any union data inside the GetBuildResponse_Data_Options as the provided GetBuildResponseDataOptions0
func (t *GetBuildResponse_Data_Options) FromGetBuildResponseDataOptions0(v GetBuildResponseDataOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetBuildResponseDataOptions0 performs a merge with any union data inside the GetBuildResponse_Data_Options, using the provided GetBuildResponseDataOptions0
func (t *GetBuildResponse_Data_Options) MergeGetBuildResponseDataOptions0(v GetBuildResponseDataOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildOptions returns the union data inside the GetBuildResponse_Data_Options as a BuildOptions
func (t GetBuildResponse_Data_Options) AsBuildOptions() (BuildOptions, error) {
	var body BuildOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildOptions overwrites any union data inside the GetBuildResponse_Data_Options as the provided BuildOptions
func (t *GetBuildResponse_Data_Options) FromBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildOptions performs a merge with any union data inside the GetBuildResponse_Data_Options, using the provided BuildOptions
func (t *GetBuildResponse_Data_Options) MergeBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBuildResponse_Data_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBuildResponse_Data_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetBuildResponseDataStats0 returns the union data inside the GetBuildResponse_Data_Stats as a GetBuildResponseDataStats0
func (t GetBuildResponse_Data_Stats) AsGetBuildResponseDataStats0() (GetBuildResponseDataStats0, error) {
	var body GetBuildResponseDataStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetBuildResponseDataStats0 overwrites any union data inside the GetBuildResponse_Data_Stats as the provided GetBuildResponseDataStats0
func (t *GetBuildResponse_Data_Stats) FromGetBuildResponseDataStats0(v GetBuildResponseDataStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetBuildResponseDataStats0 performs a merge with any union data inside the GetBuildResponse_Data_Stats, using the provided GetBuildResponseDataStats0
func (t *GetBuildResponse_Data_Stats) MergeGetBuildResponseDataStats0(v GetBuildResponseDataStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildStats returns the union data inside the GetBuildResponse_Data_Stats as a BuildStats
func (t GetBuildResponse_Data_Stats) AsBuildStats() (BuildStats, error) {
	var body BuildStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildStats overwrites any union data inside the GetBuildResponse_Data_Stats as the provided BuildStats
func (t *GetBuildResponse_Data_Stats) FromBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildStats performs a merge with any union data inside the GetBuildResponse_Data_Stats, using the provided BuildStats
func (t *GetBuildResponse_Data_Stats) MergeBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBuildResponse_Data_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBuildResponse_Data_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetBuildResponseDataUsage0 returns the union data inside the GetBuildResponse_Data_Usage as a GetBuildResponseDataUsage0
func (t GetBuildResponse_Data_Usage) AsGetBuildResponseDataUsage0() (GetBuildResponseDataUsage0, error) {
	var body GetBuildResponseDataUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetBuildResponseDataUsage0 overwrites any union data inside the GetBuildResponse_Data_Usage as the provided GetBuildResponseDataUsage0
func (t *GetBuildResponse_Data_Usage) FromGetBuildResponseDataUsage0(v GetBuildResponseDataUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetBuildResponseDataUsage0 performs a merge with any union data inside the GetBuildResponse_Data_Usage, using the provided GetBuildResponseDataUsage0
func (t *GetBuildResponse_Data_Usage) MergeGetBuildResponseDataUsage0(v GetBuildResponseDataUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the GetBuildResponse_Data_Usage as a BuildUsage
func (t GetBuildResponse_Data_Usage) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the GetBuildResponse_Data_Usage as the provided BuildUsage
func (t *GetBuildResponse_Data_Usage) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the GetBuildResponse_Data_Usage, using the provided BuildUsage
func (t *GetBuildResponse_Data_Usage) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBuildResponse_Data_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBuildResponse_Data_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetBuildResponseDataUsageUsd0 returns the union data inside the GetBuildResponse_Data_UsageUsd as a GetBuildResponseDataUsageUsd0
func (t GetBuildResponse_Data_UsageUsd) AsGetBuildResponseDataUsageUsd0() (GetBuildResponseDataUsageUsd0, error) {
	var body GetBuildResponseDataUsageUsd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetBuildResponseDataUsageUsd0 overwrites any union data inside the GetBuildResponse_Data_UsageUsd as the provided GetBuildResponseDataUsageUsd0
func (t *GetBuildResponse_Data_UsageUsd) FromGetBuildResponseDataUsageUsd0(v GetBuildResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetBuildResponseDataUsageUsd0 performs a merge with any union data inside the GetBuildResponse_Data_UsageUsd, using the provided GetBuildResponseDataUsageUsd0
func (t *GetBuildResponse_Data_UsageUsd) MergeGetBuildResponseDataUsageUsd0(v GetBuildResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the GetBuildResponse_Data_UsageUsd as a BuildUsage
func (t GetBuildResponse_Data_UsageUsd) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the GetBuildResponse_Data_UsageUsd as the provided BuildUsage
func (t *GetBuildResponse_Data_UsageUsd) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the GetBuildResponse_Data_UsageUsd, using the provided BuildUsage
func (t *GetBuildResponse_Data_UsageUsd) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBuildResponse_Data_UsageUsd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBuildResponse_Data_UsageUsd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActorDefinition returns the union data inside the PostAbortBuildResponse_Data_ActorDefinition as a ActorDefinition
func (t PostAbortBuildResponse_Data_ActorDefinition) AsActorDefinition() (ActorDefinition, error) {
	var body ActorDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorDefinition overwrites any union data inside the PostAbortBuildResponse_Data_ActorDefinition as the provided ActorDefinition
func (t *PostAbortBuildResponse_Data_ActorDefinition) FromActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorDefinition performs a merge with any union data inside the PostAbortBuildResponse_Data_ActorDefinition, using the provided ActorDefinition
func (t *PostAbortBuildResponse_Data_ActorDefinition) MergeActorDefinition(v ActorDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostAbortBuildResponseDataActorDefinition1 returns the union data inside the PostAbortBuildResponse_Data_ActorDefinition as a PostAbortBuildResponseDataActorDefinition1
func (t PostAbortBuildResponse_Data_ActorDefinition) AsPostAbortBuildResponseDataActorDefinition1() (PostAbortBuildResponseDataActorDefinition1, error) {
	var body PostAbortBuildResponseDataActorDefinition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostAbortBuildResponseDataActorDefinition1 overwrites any union data inside the PostAbortBuildResponse_Data_ActorDefinition as the provided PostAbortBuildResponseDataActorDefinition1
func (t *PostAbortBuildResponse_Data_ActorDefinition) FromPostAbortBuildResponseDataActorDefinition1(v PostAbortBuildResponseDataActorDefinition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostAbortBuildResponseDataActorDefinition1 performs a merge with any union data inside the PostAbortBuildResponse_Data_ActorDefinition, using the provided PostAbortBuildResponseDataActorDefinition1
func (t *PostAbortBuildResponse_Data_ActorDefinition) MergePostAbortBuildResponseDataActorDefinition1(v PostAbortBuildResponseDataActorDefinition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostAbortBuildResponse_Data_ActorDefinition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostAbortBuildResponse_Data_ActorDefinition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostAbortBuildResponseDataOptions0 returns the union data inside the PostAbortBuildResponse_Data_Options as a PostAbortBuildResponseDataOptions0
func (t PostAbortBuildResponse_Data_Options) AsPostAbortBuildResponseDataOptions0() (PostAbortBuildResponseDataOptions0, error) {
	var body PostAbortBuildResponseDataOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostAbortBuildResponseDataOptions0 overwrites any union data inside the PostAbortBuildResponse_Data_Options as the provided PostAbortBuildResponseDataOptions0
func (t *PostAbortBuildResponse_Data_Options) FromPostAbortBuildResponseDataOptions0(v PostAbortBuildResponseDataOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostAbortBuildResponseDataOptions0 performs a merge with any union data inside the PostAbortBuildResponse_Data_Options, using the provided PostAbortBuildResponseDataOptions0
func (t *PostAbortBuildResponse_Data_Options) MergePostAbortBuildResponseDataOptions0(v PostAbortBuildResponseDataOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildOptions returns the union data inside the PostAbortBuildResponse_Data_Options as a BuildOptions
func (t PostAbortBuildResponse_Data_Options) AsBuildOptions() (BuildOptions, error) {
	var body BuildOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildOptions overwrites any union data inside the PostAbortBuildResponse_Data_Options as the provided BuildOptions
func (t *PostAbortBuildResponse_Data_Options) FromBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildOptions performs a merge with any union data inside the PostAbortBuildResponse_Data_Options, using the provided BuildOptions
func (t *PostAbortBuildResponse_Data_Options) MergeBuildOptions(v BuildOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostAbortBuildResponse_Data_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostAbortBuildResponse_Data_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostAbortBuildResponseDataStats0 returns the union data inside the PostAbortBuildResponse_Data_Stats as a PostAbortBuildResponseDataStats0
func (t PostAbortBuildResponse_Data_Stats) AsPostAbortBuildResponseDataStats0() (PostAbortBuildResponseDataStats0, error) {
	var body PostAbortBuildResponseDataStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostAbortBuildResponseDataStats0 overwrites any union data inside the PostAbortBuildResponse_Data_Stats as the provided PostAbortBuildResponseDataStats0
func (t *PostAbortBuildResponse_Data_Stats) FromPostAbortBuildResponseDataStats0(v PostAbortBuildResponseDataStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostAbortBuildResponseDataStats0 performs a merge with any union data inside the PostAbortBuildResponse_Data_Stats, using the provided PostAbortBuildResponseDataStats0
func (t *PostAbortBuildResponse_Data_Stats) MergePostAbortBuildResponseDataStats0(v PostAbortBuildResponseDataStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildStats returns the union data inside the PostAbortBuildResponse_Data_Stats as a BuildStats
func (t PostAbortBuildResponse_Data_Stats) AsBuildStats() (BuildStats, error) {
	var body BuildStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildStats overwrites any union data inside the PostAbortBuildResponse_Data_Stats as the provided BuildStats
func (t *PostAbortBuildResponse_Data_Stats) FromBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildStats performs a merge with any union data inside the PostAbortBuildResponse_Data_Stats, using the provided BuildStats
func (t *PostAbortBuildResponse_Data_Stats) MergeBuildStats(v BuildStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostAbortBuildResponse_Data_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostAbortBuildResponse_Data_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostAbortBuildResponseDataUsage0 returns the union data inside the PostAbortBuildResponse_Data_Usage as a PostAbortBuildResponseDataUsage0
func (t PostAbortBuildResponse_Data_Usage) AsPostAbortBuildResponseDataUsage0() (PostAbortBuildResponseDataUsage0, error) {
	var body PostAbortBuildResponseDataUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostAbortBuildResponseDataUsage0 overwrites any union data inside the PostAbortBuildResponse_Data_Usage as the provided PostAbortBuildResponseDataUsage0
func (t *PostAbortBuildResponse_Data_Usage) FromPostAbortBuildResponseDataUsage0(v PostAbortBuildResponseDataUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostAbortBuildResponseDataUsage0 performs a merge with any union data inside the PostAbortBuildResponse_Data_Usage, using the provided PostAbortBuildResponseDataUsage0
func (t *PostAbortBuildResponse_Data_Usage) MergePostAbortBuildResponseDataUsage0(v PostAbortBuildResponseDataUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the PostAbortBuildResponse_Data_Usage as a BuildUsage
func (t PostAbortBuildResponse_Data_Usage) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the PostAbortBuildResponse_Data_Usage as the provided BuildUsage
func (t *PostAbortBuildResponse_Data_Usage) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the PostAbortBuildResponse_Data_Usage, using the provided BuildUsage
func (t *PostAbortBuildResponse_Data_Usage) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostAbortBuildResponse_Data_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostAbortBuildResponse_Data_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostAbortBuildResponseDataUsageUsd0 returns the union data inside the PostAbortBuildResponse_Data_UsageUsd as a PostAbortBuildResponseDataUsageUsd0
func (t PostAbortBuildResponse_Data_UsageUsd) AsPostAbortBuildResponseDataUsageUsd0() (PostAbortBuildResponseDataUsageUsd0, error) {
	var body PostAbortBuildResponseDataUsageUsd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostAbortBuildResponseDataUsageUsd0 overwrites any union data inside the PostAbortBuildResponse_Data_UsageUsd as the provided PostAbortBuildResponseDataUsageUsd0
func (t *PostAbortBuildResponse_Data_UsageUsd) FromPostAbortBuildResponseDataUsageUsd0(v PostAbortBuildResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostAbortBuildResponseDataUsageUsd0 performs a merge with any union data inside the PostAbortBuildResponse_Data_UsageUsd, using the provided PostAbortBuildResponseDataUsageUsd0
func (t *PostAbortBuildResponse_Data_UsageUsd) MergePostAbortBuildResponseDataUsageUsd0(v PostAbortBuildResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildUsage returns the union data inside the PostAbortBuildResponse_Data_UsageUsd as a BuildUsage
func (t PostAbortBuildResponse_Data_UsageUsd) AsBuildUsage() (BuildUsage, error) {
	var body BuildUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildUsage overwrites any union data inside the PostAbortBuildResponse_Data_UsageUsd as the provided BuildUsage
func (t *PostAbortBuildResponse_Data_UsageUsd) FromBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildUsage performs a merge with any union data inside the PostAbortBuildResponse_Data_UsageUsd, using the provided BuildUsage
func (t *PostAbortBuildResponse_Data_UsageUsd) MergeBuildUsage(v BuildUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostAbortBuildResponse_Data_UsageUsd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostAbortBuildResponse_Data_UsageUsd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunUsage0 returns the union data inside the Run_Usage as a RunUsage0
func (t Run_Usage) AsRunUsage0() (RunUsage0, error) {
	var body RunUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsage0 overwrites any union data inside the Run_Usage as the provided RunUsage0
func (t *Run_Usage) FromRunUsage0(v RunUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsage0 performs a merge with any union data inside the Run_Usage, using the provided RunUsage0
func (t *Run_Usage) MergeRunUsage0(v RunUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunUsage returns the union data inside the Run_Usage as a RunUsage
func (t Run_Usage) AsRunUsage() (RunUsage, error) {
	var body RunUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsage overwrites any union data inside the Run_Usage as the provided RunUsage
func (t *Run_Usage) FromRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsage performs a merge with any union data inside the Run_Usage, using the provided RunUsage
func (t *Run_Usage) MergeRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Run_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Run_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunUsageUsd0 returns the union data inside the Run_UsageUsd as a RunUsageUsd0
func (t Run_UsageUsd) AsRunUsageUsd0() (RunUsageUsd0, error) {
	var body RunUsageUsd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsageUsd0 overwrites any union data inside the Run_UsageUsd as the provided RunUsageUsd0
func (t *Run_UsageUsd) FromRunUsageUsd0(v RunUsageUsd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsageUsd0 performs a merge with any union data inside the Run_UsageUsd, using the provided RunUsageUsd0
func (t *Run_UsageUsd) MergeRunUsageUsd0(v RunUsageUsd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunUsage returns the union data inside the Run_UsageUsd as a RunUsage
func (t Run_UsageUsd) AsRunUsage() (RunUsage, error) {
	var body RunUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsage overwrites any union data inside the Run_UsageUsd as the provided RunUsage
func (t *Run_UsageUsd) FromRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsage performs a merge with any union data inside the Run_UsageUsd, using the provided RunUsage
func (t *Run_UsageUsd) MergeRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Run_UsageUsd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Run_UsageUsd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunResponseDataUsage0 returns the union data inside the RunResponse_Data_Usage as a RunResponseDataUsage0
func (t RunResponse_Data_Usage) AsRunResponseDataUsage0() (RunResponseDataUsage0, error) {
	var body RunResponseDataUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunResponseDataUsage0 overwrites any union data inside the RunResponse_Data_Usage as the provided RunResponseDataUsage0
func (t *RunResponse_Data_Usage) FromRunResponseDataUsage0(v RunResponseDataUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunResponseDataUsage0 performs a merge with any union data inside the RunResponse_Data_Usage, using the provided RunResponseDataUsage0
func (t *RunResponse_Data_Usage) MergeRunResponseDataUsage0(v RunResponseDataUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunUsage returns the union data inside the RunResponse_Data_Usage as a RunUsage
func (t RunResponse_Data_Usage) AsRunUsage() (RunUsage, error) {
	var body RunUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsage overwrites any union data inside the RunResponse_Data_Usage as the provided RunUsage
func (t *RunResponse_Data_Usage) FromRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsage performs a merge with any union data inside the RunResponse_Data_Usage, using the provided RunUsage
func (t *RunResponse_Data_Usage) MergeRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunResponse_Data_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunResponse_Data_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunResponseDataUsageUsd0 returns the union data inside the RunResponse_Data_UsageUsd as a RunResponseDataUsageUsd0
func (t RunResponse_Data_UsageUsd) AsRunResponseDataUsageUsd0() (RunResponseDataUsageUsd0, error) {
	var body RunResponseDataUsageUsd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunResponseDataUsageUsd0 overwrites any union data inside the RunResponse_Data_UsageUsd as the provided RunResponseDataUsageUsd0
func (t *RunResponse_Data_UsageUsd) FromRunResponseDataUsageUsd0(v RunResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunResponseDataUsageUsd0 performs a merge with any union data inside the RunResponse_Data_UsageUsd, using the provided RunResponseDataUsageUsd0
func (t *RunResponse_Data_UsageUsd) MergeRunResponseDataUsageUsd0(v RunResponseDataUsageUsd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunUsage returns the union data inside the RunResponse_Data_UsageUsd as a RunUsage
func (t RunResponse_Data_UsageUsd) AsRunUsage() (RunUsage, error) {
	var body RunUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunUsage overwrites any union data inside the RunResponse_Data_UsageUsd as the provided RunUsage
func (t *RunResponse_Data_UsageUsd) FromRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunUsage performs a merge with any union data inside the RunResponse_Data_UsageUsd, using the provided RunUsage
func (t *RunResponse_Data_UsageUsd) MergeRunUsage(v RunUsage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunResponse_Data_UsageUsd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunResponse_Data_UsageUsd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaggedBuildsLatest0 returns the union data inside the TaggedBuilds_Latest as a TaggedBuildsLatest0
func (t TaggedBuilds_Latest) AsTaggedBuildsLatest0() (TaggedBuildsLatest0, error) {
	var body TaggedBuildsLatest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaggedBuildsLatest0 overwrites any union data inside the TaggedBuilds_Latest as the provided TaggedBuildsLatest0
func (t *TaggedBuilds_Latest) FromTaggedBuildsLatest0(v TaggedBuildsLatest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaggedBuildsLatest0 performs a merge with any union data inside the TaggedBuilds_Latest, using the provided TaggedBuildsLatest0
func (t *TaggedBuilds_Latest) MergeTaggedBuildsLatest0(v TaggedBuildsLatest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaggedBuildsLatest1 returns the union data inside the TaggedBuilds_Latest as a TaggedBuildsLatest1
func (t TaggedBuilds_Latest) AsTaggedBuildsLatest1() (TaggedBuildsLatest1, error) {
	var body TaggedBuildsLatest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaggedBuildsLatest1 overwrites any union data inside the TaggedBuilds_Latest as the provided TaggedBuildsLatest1
func (t *TaggedBuilds_Latest) FromTaggedBuildsLatest1(v TaggedBuildsLatest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaggedBuildsLatest1 performs a merge with any union data inside the TaggedBuilds_Latest, using the provided TaggedBuildsLatest1
func (t *TaggedBuilds_Latest) MergeTaggedBuildsLatest1(v TaggedBuildsLatest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaggedBuilds_Latest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaggedBuilds_Latest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskInput0 returns the union data inside the Task_Input as a TaskInput0
func (t Task_Input) AsTaskInput0() (TaskInput0, error) {
	var body TaskInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskInput0 overwrites any union data inside the Task_Input as the provided TaskInput0
func (t *Task_Input) FromTaskInput0(v TaskInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskInput0 performs a merge with any union data inside the Task_Input, using the provided TaskInput0
func (t *Task_Input) MergeTaskInput0(v TaskInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskInput returns the union data inside the Task_Input as a TaskInput
func (t Task_Input) AsTaskInput() (TaskInput, error) {
	var body TaskInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskInput overwrites any union data inside the Task_Input as the provided TaskInput
func (t *Task_Input) FromTaskInput(v TaskInput) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskInput performs a merge with any union data inside the Task_Input, using the provided TaskInput
func (t *Task_Input) MergeTaskInput(v TaskInput) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Task_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Task_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskOptions0 returns the union data inside the Task_Options as a TaskOptions0
func (t Task_Options) AsTaskOptions0() (TaskOptions0, error) {
	var body TaskOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskOptions0 overwrites any union data inside the Task_Options as the provided TaskOptions0
func (t *Task_Options) FromTaskOptions0(v TaskOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskOptions0 performs a merge with any union data inside the Task_Options, using the provided TaskOptions0
func (t *Task_Options) MergeTaskOptions0(v TaskOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskOptions returns the union data inside the Task_Options as a TaskOptions
func (t Task_Options) AsTaskOptions() (TaskOptions, error) {
	var body TaskOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskOptions overwrites any union data inside the Task_Options as the provided TaskOptions
func (t *Task_Options) FromTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskOptions performs a merge with any union data inside the Task_Options, using the provided TaskOptions
func (t *Task_Options) MergeTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Task_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Task_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskStats0 returns the union data inside the Task_Stats as a TaskStats0
func (t Task_Stats) AsTaskStats0() (TaskStats0, error) {
	var body TaskStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskStats0 overwrites any union data inside the Task_Stats as the provided TaskStats0
func (t *Task_Stats) FromTaskStats0(v TaskStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskStats0 performs a merge with any union data inside the Task_Stats, using the provided TaskStats0
func (t *Task_Stats) MergeTaskStats0(v TaskStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskStats returns the union data inside the Task_Stats as a TaskStats
func (t Task_Stats) AsTaskStats() (TaskStats, error) {
	var body TaskStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskStats overwrites any union data inside the Task_Stats as the provided TaskStats
func (t *Task_Stats) FromTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskStats performs a merge with any union data inside the Task_Stats, using the provided TaskStats
func (t *Task_Stats) MergeTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Task_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Task_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskShortStats0 returns the union data inside the TaskShort_Stats as a TaskShortStats0
func (t TaskShort_Stats) AsTaskShortStats0() (TaskShortStats0, error) {
	var body TaskShortStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskShortStats0 overwrites any union data inside the TaskShort_Stats as the provided TaskShortStats0
func (t *TaskShort_Stats) FromTaskShortStats0(v TaskShortStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskShortStats0 performs a merge with any union data inside the TaskShort_Stats, using the provided TaskShortStats0
func (t *TaskShort_Stats) MergeTaskShortStats0(v TaskShortStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskStats returns the union data inside the TaskShort_Stats as a TaskStats
func (t TaskShort_Stats) AsTaskStats() (TaskStats, error) {
	var body TaskStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskStats overwrites any union data inside the TaskShort_Stats as the provided TaskStats
func (t *TaskShort_Stats) FromTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskStats performs a merge with any union data inside the TaskShort_Stats, using the provided TaskStats
func (t *TaskShort_Stats) MergeTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaskShort_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaskShort_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateActorRequestDefaultRunOptions0 returns the union data inside the UpdateActorRequest_DefaultRunOptions as a UpdateActorRequestDefaultRunOptions0
func (t UpdateActorRequest_DefaultRunOptions) AsUpdateActorRequestDefaultRunOptions0() (UpdateActorRequestDefaultRunOptions0, error) {
	var body UpdateActorRequestDefaultRunOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateActorRequestDefaultRunOptions0 overwrites any union data inside the UpdateActorRequest_DefaultRunOptions as the provided UpdateActorRequestDefaultRunOptions0
func (t *UpdateActorRequest_DefaultRunOptions) FromUpdateActorRequestDefaultRunOptions0(v UpdateActorRequestDefaultRunOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateActorRequestDefaultRunOptions0 performs a merge with any union data inside the UpdateActorRequest_DefaultRunOptions, using the provided UpdateActorRequestDefaultRunOptions0
func (t *UpdateActorRequest_DefaultRunOptions) MergeUpdateActorRequestDefaultRunOptions0(v UpdateActorRequestDefaultRunOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDefaultRunOptions returns the union data inside the UpdateActorRequest_DefaultRunOptions as a DefaultRunOptions
func (t UpdateActorRequest_DefaultRunOptions) AsDefaultRunOptions() (DefaultRunOptions, error) {
	var body DefaultRunOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDefaultRunOptions overwrites any union data inside the UpdateActorRequest_DefaultRunOptions as the provided DefaultRunOptions
func (t *UpdateActorRequest_DefaultRunOptions) FromDefaultRunOptions(v DefaultRunOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDefaultRunOptions performs a merge with any union data inside the UpdateActorRequest_DefaultRunOptions, using the provided DefaultRunOptions
func (t *UpdateActorRequest_DefaultRunOptions) MergeDefaultRunOptions(v DefaultRunOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateActorRequest_DefaultRunOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateActorRequest_DefaultRunOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateTaskRequestInput0 returns the union data inside the UpdateTaskRequest_Input as a UpdateTaskRequestInput0
func (t UpdateTaskRequest_Input) AsUpdateTaskRequestInput0() (UpdateTaskRequestInput0, error) {
	var body UpdateTaskRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTaskRequestInput0 overwrites any union data inside the UpdateTaskRequest_Input as the provided UpdateTaskRequestInput0
func (t *UpdateTaskRequest_Input) FromUpdateTaskRequestInput0(v UpdateTaskRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTaskRequestInput0 performs a merge with any union data inside the UpdateTaskRequest_Input, using the provided UpdateTaskRequestInput0
func (t *UpdateTaskRequest_Input) MergeUpdateTaskRequestInput0(v UpdateTaskRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTask returns the union data inside the UpdateTaskRequest_Input as a Task
func (t UpdateTaskRequest_Input) AsTask() (Task, error) {
	var body Task
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTask overwrites any union data inside the UpdateTaskRequest_Input as the provided Task
func (t *UpdateTaskRequest_Input) FromTask(v Task) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTask performs a merge with any union data inside the UpdateTaskRequest_Input, using the provided Task
func (t *UpdateTaskRequest_Input) MergeTask(v Task) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateTaskRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateTaskRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateTaskRequestOptions0 returns the union data inside the UpdateTaskRequest_Options as a UpdateTaskRequestOptions0
func (t UpdateTaskRequest_Options) AsUpdateTaskRequestOptions0() (UpdateTaskRequestOptions0, error) {
	var body UpdateTaskRequestOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTaskRequestOptions0 overwrites any union data inside the UpdateTaskRequest_Options as the provided UpdateTaskRequestOptions0
func (t *UpdateTaskRequest_Options) FromUpdateTaskRequestOptions0(v UpdateTaskRequestOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTaskRequestOptions0 performs a merge with any union data inside the UpdateTaskRequest_Options, using the provided UpdateTaskRequestOptions0
func (t *UpdateTaskRequest_Options) MergeUpdateTaskRequestOptions0(v UpdateTaskRequestOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskOptions returns the union data inside the UpdateTaskRequest_Options as a TaskOptions
func (t UpdateTaskRequest_Options) AsTaskOptions() (TaskOptions, error) {
	var body TaskOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskOptions overwrites any union data inside the UpdateTaskRequest_Options as the provided TaskOptions
func (t *UpdateTaskRequest_Options) FromTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskOptions performs a merge with any union data inside the UpdateTaskRequest_Options, using the provided TaskOptions
func (t *UpdateTaskRequest_Options) MergeTaskOptions(v TaskOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateTaskRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateTaskRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateTaskRequestStats0 returns the union data inside the UpdateTaskRequest_Stats as a UpdateTaskRequestStats0
func (t UpdateTaskRequest_Stats) AsUpdateTaskRequestStats0() (UpdateTaskRequestStats0, error) {
	var body UpdateTaskRequestStats0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateTaskRequestStats0 overwrites any union data inside the UpdateTaskRequest_Stats as the provided UpdateTaskRequestStats0
func (t *UpdateTaskRequest_Stats) FromUpdateTaskRequestStats0(v UpdateTaskRequestStats0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateTaskRequestStats0 performs a merge with any union data inside the UpdateTaskRequest_Stats, using the provided UpdateTaskRequestStats0
func (t *UpdateTaskRequest_Stats) MergeUpdateTaskRequestStats0(v UpdateTaskRequestStats0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskStats returns the union data inside the UpdateTaskRequest_Stats as a TaskStats
func (t UpdateTaskRequest_Stats) AsTaskStats() (TaskStats, error) {
	var body TaskStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskStats overwrites any union data inside the UpdateTaskRequest_Stats as the provided TaskStats
func (t *UpdateTaskRequest_Stats) FromTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskStats performs a merge with any union data inside the UpdateTaskRequest_Stats, using the provided TaskStats
func (t *UpdateTaskRequest_Stats) MergeTaskStats(v TaskStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateTaskRequest_Stats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateTaskRequest_Stats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVersionSourceType0 returns the union data inside the Version_SourceType as a VersionSourceType0
func (t Version_SourceType) AsVersionSourceType0() (VersionSourceType0, error) {
	var body VersionSourceType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVersionSourceType0 overwrites any union data inside the Version_SourceType as the provided VersionSourceType0
func (t *Version_SourceType) FromVersionSourceType0(v VersionSourceType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVersionSourceType0 performs a merge with any union data inside the Version_SourceType, using the provided VersionSourceType0
func (t *Version_SourceType) MergeVersionSourceType0(v VersionSourceType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVersionSourceType returns the union data inside the Version_SourceType as a VersionSourceType
func (t Version_SourceType) AsVersionSourceType() (VersionSourceType, error) {
	var body VersionSourceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVersionSourceType overwrites any union data inside the Version_SourceType as the provided VersionSourceType
func (t *Version_SourceType) FromVersionSourceType(v VersionSourceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVersionSourceType performs a merge with any union data inside the Version_SourceType, using the provided VersionSourceType
func (t *Version_SourceType) MergeVersionSourceType(v VersionSourceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Version_SourceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Version_SourceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVersionSourceFiles0 returns the union data inside the VersionSourceFiles_Item as a VersionSourceFiles0
func (t VersionSourceFiles_Item) AsVersionSourceFiles0() (VersionSourceFiles0, error) {
	var body VersionSourceFiles0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVersionSourceFiles0 overwrites any union data inside the VersionSourceFiles_Item as the provided VersionSourceFiles0
func (t *VersionSourceFiles_Item) FromVersionSourceFiles0(v VersionSourceFiles0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVersionSourceFiles0 performs a merge with any union data inside the VersionSourceFiles_Item, using the provided VersionSourceFiles0
func (t *VersionSourceFiles_Item) MergeVersionSourceFiles0(v VersionSourceFiles0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVersionSourceFiles1 returns the union data inside the VersionSourceFiles_Item as a VersionSourceFiles1
func (t VersionSourceFiles_Item) AsVersionSourceFiles1() (VersionSourceFiles1, error) {
	var body VersionSourceFiles1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVersionSourceFiles1 overwrites any union data inside the VersionSourceFiles_Item as the provided VersionSourceFiles1
func (t *VersionSourceFiles_Item) FromVersionSourceFiles1(v VersionSourceFiles1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVersionSourceFiles1 performs a merge with any union data inside the VersionSourceFiles_Item, using the provided VersionSourceFiles1
func (t *VersionSourceFiles_Item) MergeVersionSourceFiles1(v VersionSourceFiles1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VersionSourceFiles_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VersionSourceFiles_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
