// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: dataset.sql

package model

import (
	"context"
)

const CountDatasetDegrees = `-- name: CountDatasetDegrees :one
SELECT COUNT(*) FROM dataset_degrees
`

func (q *Queries) CountDatasetDegrees(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetDegrees)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountDatasetIndustries = `-- name: CountDatasetIndustries :one
SELECT COUNT(*) FROM dataset_industries
`

func (q *Queries) CountDatasetIndustries(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetIndustries)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountDatasetLocations = `-- name: CountDatasetLocations :one
SELECT COUNT(*) FROM dataset_locations
`

func (q *Queries) CountDatasetLocations(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetLocations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountDatasetSkills = `-- name: CountDatasetSkills :one
SELECT COUNT(*) FROM dataset_skills
`

func (q *Queries) CountDatasetSkills(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetSkills)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountDatasetSpecialties = `-- name: CountDatasetSpecialties :one
SELECT COUNT(*) FROM dataset_specialties
`

func (q *Queries) CountDatasetSpecialties(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetSpecialties)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountDatasetStudyFields = `-- name: CountDatasetStudyFields :one
SELECT COUNT(*) FROM dataset_study_fields
`

func (q *Queries) CountDatasetStudyFields(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDatasetStudyFields)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const InsertDatasetDegree = `-- name: InsertDatasetDegree :exec
INSERT INTO dataset_degrees ("name") VALUES (?)
`

func (q *Queries) InsertDatasetDegree(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetDegree, name)
	return err
}

const InsertDatasetIndustry = `-- name: InsertDatasetIndustry :exec
INSERT INTO dataset_industries ("name") VALUES (?)
`

func (q *Queries) InsertDatasetIndustry(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetIndustry, name)
	return err
}

const InsertDatasetLocation = `-- name: InsertDatasetLocation :exec
INSERT INTO dataset_locations
("name", city, "state", country)
VALUES
(?, ?, ?, ?)
`

type InsertDatasetLocationParams struct {
	Name    string  `db:"name"`
	City    *string `db:"city"`
	State   *string `db:"state"`
	Country *string `db:"country"`
}

func (q *Queries) InsertDatasetLocation(ctx context.Context, arg InsertDatasetLocationParams) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetLocation,
		arg.Name,
		arg.City,
		arg.State,
		arg.Country,
	)
	return err
}

const InsertDatasetSkill = `-- name: InsertDatasetSkill :exec
INSERT INTO dataset_skills ("name") VALUES (?)
`

func (q *Queries) InsertDatasetSkill(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetSkill, name)
	return err
}

const InsertDatasetSpecialty = `-- name: InsertDatasetSpecialty :exec
INSERT INTO dataset_specialties ("name") VALUES (?)
`

func (q *Queries) InsertDatasetSpecialty(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetSpecialty, name)
	return err
}

const InsertDatasetStudyField = `-- name: InsertDatasetStudyField :exec
INSERT INTO dataset_study_fields ("name") VALUES (?)
`

func (q *Queries) InsertDatasetStudyField(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetStudyField, name)
	return err
}
