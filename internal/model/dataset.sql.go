// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dataset.sql

package model

import (
	"context"
)

const insertDatasetDegree = `-- name: InsertDatasetDegree :exec
INSERT INTO dataset_degrees (id, "name") VALUES (?, ?)
`

type InsertDatasetDegreeParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) InsertDatasetDegree(ctx context.Context, arg InsertDatasetDegreeParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetDegree, arg.ID, arg.Name)
	return err
}

const insertDatasetIndustry = `-- name: InsertDatasetIndustry :exec
INSERT INTO dataset_industries (id, "name") VALUES (?, ?)
`

type InsertDatasetIndustryParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) InsertDatasetIndustry(ctx context.Context, arg InsertDatasetIndustryParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetIndustry, arg.ID, arg.Name)
	return err
}

const insertDatasetLocation = `-- name: InsertDatasetLocation :exec
INSERT INTO dataset_locations
(id, "name", city, "state", country, country_code)
VALUES
(?, ?, ?, ?, ?, ?)
`

type InsertDatasetLocationParams struct {
	ID          int64   `db:"id"`
	Name        string  `db:"name"`
	City        *string `db:"city"`
	State       *string `db:"state"`
	Country     *string `db:"country"`
	CountryCode *string `db:"country_code"`
}

func (q *Queries) InsertDatasetLocation(ctx context.Context, arg InsertDatasetLocationParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetLocation,
		arg.ID,
		arg.Name,
		arg.City,
		arg.State,
		arg.Country,
		arg.CountryCode,
	)
	return err
}

const insertDatasetSkill = `-- name: InsertDatasetSkill :exec
INSERT INTO dataset_skills (id, "name") VALUES (?, ?)
`

type InsertDatasetSkillParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) InsertDatasetSkill(ctx context.Context, arg InsertDatasetSkillParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetSkill, arg.ID, arg.Name)
	return err
}

const insertDatasetSpecialty = `-- name: InsertDatasetSpecialty :exec
INSERT INTO dataset_specialties (id, "name") VALUES (?, ?)
`

type InsertDatasetSpecialtyParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) InsertDatasetSpecialty(ctx context.Context, arg InsertDatasetSpecialtyParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetSpecialty, arg.ID, arg.Name)
	return err
}

const insertDatasetStudyField = `-- name: InsertDatasetStudyField :exec
INSERT INTO dataset_study_fields (id, "name") VALUES (?, ?)
`

type InsertDatasetStudyFieldParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) InsertDatasetStudyField(ctx context.Context, arg InsertDatasetStudyFieldParams) error {
	_, err := q.db.ExecContext(ctx, insertDatasetStudyField, arg.ID, arg.Name)
	return err
}
