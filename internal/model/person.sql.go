// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: person.sql

package model

import (
	"context"
	"strings"
)

const InsertPerson = `-- name: InsertPerson :exec
INSERT INTO persons
(first_name, last_name, headline, profile_url, public_identifier, profile_picture_url, about, location_id, urn, created_at)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertPersonParams struct {
	FirstName         string  `db:"first_name"`
	LastName          string  `db:"last_name"`
	Headline          *string `db:"headline"`
	ProfileUrl        string  `db:"profile_url"`
	PublicIdentifier  string  `db:"public_identifier"`
	ProfilePictureUrl *string `db:"profile_picture_url"`
	About             *string `db:"about"`
	LocationID        *int64  `db:"location_id"`
	Urn               string  `db:"urn"`
	CreatedAt         int64   `db:"created_at"`
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.ExecContext(ctx, InsertPerson,
		arg.FirstName,
		arg.LastName,
		arg.Headline,
		arg.ProfileUrl,
		arg.PublicIdentifier,
		arg.ProfilePictureUrl,
		arg.About,
		arg.LocationID,
		arg.Urn,
		arg.CreatedAt,
	)
	return err
}

const SelectPersonsByLinkedinURLs = `-- name: SelectPersonsByLinkedinURLs :many
SELECT id, profile_url FROM persons WHERE profile_url IN (/*SLICE:linkedin_urls*/?)
`

type SelectPersonsByLinkedinURLsRow struct {
	ID         int64  `db:"id"`
	ProfileUrl string `db:"profile_url"`
}

func (q *Queries) SelectPersonsByLinkedinURLs(ctx context.Context, linkedinUrls []string) ([]SelectPersonsByLinkedinURLsRow, error) {
	query := SelectPersonsByLinkedinURLs
	var queryParams []interface{}
	if len(linkedinUrls) > 0 {
		for _, v := range linkedinUrls {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", strings.Repeat(",?", len(linkedinUrls))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectPersonsByLinkedinURLsRow{}
	for rows.Next() {
		var i SelectPersonsByLinkedinURLsRow
		if err := rows.Scan(&i.ID, &i.ProfileUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
