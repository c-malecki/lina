// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package model

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (username, "password") VALUES (?, ?)
`

type InsertUserParams struct {
	Username string `db:"username"`
	Password string `db:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password)
	return err
}

const selectUser = `-- name: SelectUser :one
SELECT id, username, password, apify_token FROM users WHERE username = ?
`

func (q *Queries) SelectUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, selectUser, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApifyToken,
	)
	return i, err
}

const updateUserApifyToken = `-- name: UpdateUserApifyToken :exec
UPDATE users SET apify_token = ? WHERE id = ?
`

type UpdateUserApifyTokenParams struct {
	ApifyToken *string `db:"apify_token"`
	ID         int64   `db:"id"`
}

func (q *Queries) UpdateUserApifyToken(ctx context.Context, arg UpdateUserApifyTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserApifyToken, arg.ApifyToken, arg.ID)
	return err
}
