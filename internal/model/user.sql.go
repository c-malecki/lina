// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package model

import (
	"context"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const InsertUser = `-- name: InsertUser :exec
INSERT INTO users (username, "password", created_at) VALUES (?, ?, ?)
`

type InsertUserParams struct {
	Username  string `db:"username"`
	Password  string `db:"password"`
	CreatedAt int64  `db:"created_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, InsertUser, arg.Username, arg.Password, arg.CreatedAt)
	return err
}

const SelectUser = `-- name: SelectUser :one
SELECT id, username, password, apify_token, created_at, updated_at FROM users WHERE username = ?
`

func (q *Queries) SelectUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, SelectUser, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApifyToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectUsers = `-- name: SelectUsers :many
SELECT id, username, password, apify_token, created_at, updated_at FROM users
`

func (q *Queries) SelectUsers(ctx context.Context) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, SelectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.ApifyToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserApifyToken = `-- name: UpdateUserApifyToken :exec
UPDATE users SET apify_token = ? WHERE id = ?
`

type UpdateUserApifyTokenParams struct {
	ApifyToken *string `db:"apify_token"`
	ID         int64   `db:"id"`
}

func (q *Queries) UpdateUserApifyToken(ctx context.Context, arg UpdateUserApifyTokenParams) error {
	_, err := q.db.ExecContext(ctx, UpdateUserApifyToken, arg.ApifyToken, arg.ID)
	return err
}
