// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: compare_phase.sql

package model

import (
	"context"
)

const CountConnectionsToAdd = `-- name: CountConnectionsToAdd :one
SELECT COUNT(t.id)
FROM tmp_connections t
LEFT JOIN connections c ON c.person_id = t.person_id
  AND c.network_id = ?
WHERE c.id IS NULL AND t.person_id IS NOT NULL
`

func (q *Queries) CountConnectionsToAdd(ctx context.Context, networkID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountConnectionsToAdd, networkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountConnectionsToRemove = `-- name: CountConnectionsToRemove :one
SELECT COUNT(c.id)
FROM connections c
LEFT JOIN tmp_connections t ON t.person_id = c.person_id
  AND t.person_id IS NOT NULL
WHERE t.id IS NULL AND c.network_id = ?
`

func (q *Queries) CountConnectionsToRemove(ctx context.Context, networkID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountConnectionsToRemove, networkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const SelectTmpConnectionsNoPersonIDs = `-- name: SelectTmpConnectionsNoPersonIDs :many
SELECT profile_url FROM tmp_connections WHERE person_id IS NULL
`

func (q *Queries) SelectTmpConnectionsNoPersonIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, SelectTmpConnectionsNoPersonIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var profile_url string
		if err := rows.Scan(&profile_url); err != nil {
			return nil, err
		}
		items = append(items, profile_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTmpConnectionPersonIDs = `-- name: UpdateTmpConnectionPersonIDs :exec
UPDATE tmp_connections
SET person_id = (
  SELECT p.id 
  FROM persons p 
  WHERE p.profile_url = tmp_connections.profile_url
)
WHERE EXISTS (
  SELECT 1 
  FROM persons p 
  WHERE p.profile_url = tmp_connections.profile_url
)
`

func (q *Queries) UpdateTmpConnectionPersonIDs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, UpdateTmpConnectionPersonIDs)
	return err
}
