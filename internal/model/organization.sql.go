// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: organization.sql

package model

import (
	"context"
	"strings"
)

const InsertOrganization = `-- name: InsertOrganization :exec
INSERT INTO organizations
("name", universal_name, website, profile_url, logo_url, founded_year, founded_month, organization_type, employee_count, student_count, urn, created_at)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertOrganizationParams struct {
	Name             string  `db:"name"`
	UniversalName    string  `db:"universal_name"`
	Website          *string `db:"website"`
	ProfileUrl       string  `db:"profile_url"`
	LogoUrl          *string `db:"logo_url"`
	FoundedYear      *int64  `db:"founded_year"`
	FoundedMonth     *int64  `db:"founded_month"`
	OrganizationType int64   `db:"organization_type"`
	EmployeeCount    *int64  `db:"employee_count"`
	StudentCount     *int64  `db:"student_count"`
	Urn              string  `db:"urn"`
	CreatedAt        int64   `db:"created_at"`
}

func (q *Queries) InsertOrganization(ctx context.Context, arg InsertOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, InsertOrganization,
		arg.Name,
		arg.UniversalName,
		arg.Website,
		arg.ProfileUrl,
		arg.LogoUrl,
		arg.FoundedYear,
		arg.FoundedMonth,
		arg.OrganizationType,
		arg.EmployeeCount,
		arg.StudentCount,
		arg.Urn,
		arg.CreatedAt,
	)
	return err
}

const InsertOrganizationIndustry = `-- name: InsertOrganizationIndustry :exec
INSERT INTO organization_industries
(organization_id, industry_id)
VALUES
(?, ?)
`

type InsertOrganizationIndustryParams struct {
	OrganizationID int64 `db:"organization_id"`
	IndustryID     int64 `db:"industry_id"`
}

func (q *Queries) InsertOrganizationIndustry(ctx context.Context, arg InsertOrganizationIndustryParams) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationIndustry, arg.OrganizationID, arg.IndustryID)
	return err
}

const InsertOrganizationLocation = `-- name: InsertOrganizationLocation :exec
INSERT INTO organization_locations
(organization_id, location_id, is_headquarters)
VALUES
(?, ?, ?)
`

type InsertOrganizationLocationParams struct {
	OrganizationID int64 `db:"organization_id"`
	LocationID     int64 `db:"location_id"`
	IsHeadquarters int64 `db:"is_headquarters"`
}

func (q *Queries) InsertOrganizationLocation(ctx context.Context, arg InsertOrganizationLocationParams) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationLocation, arg.OrganizationID, arg.LocationID, arg.IsHeadquarters)
	return err
}

const InsertOrganizationSpecialty = `-- name: InsertOrganizationSpecialty :exec
INSERT INTO organization_specialties
(organization_id, specialty_id)
VALUES
(?, ?)
`

type InsertOrganizationSpecialtyParams struct {
	OrganizationID int64 `db:"organization_id"`
	SpecialtyID    int64 `db:"specialty_id"`
}

func (q *Queries) InsertOrganizationSpecialty(ctx context.Context, arg InsertOrganizationSpecialtyParams) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationSpecialty, arg.OrganizationID, arg.SpecialtyID)
	return err
}

const SelectOrganizationsByLinkedinURLs = `-- name: SelectOrganizationsByLinkedinURLs :many
SELECT id, profile_url FROM organizations WHERE profile_url IN (/*SLICE:linkedin_urls*/?)
`

type SelectOrganizationsByLinkedinURLsRow struct {
	ID         int64  `db:"id"`
	ProfileUrl string `db:"profile_url"`
}

func (q *Queries) SelectOrganizationsByLinkedinURLs(ctx context.Context, linkedinUrls []string) ([]SelectOrganizationsByLinkedinURLsRow, error) {
	query := SelectOrganizationsByLinkedinURLs
	var queryParams []interface{}
	if len(linkedinUrls) > 0 {
		for _, v := range linkedinUrls {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", strings.Repeat(",?", len(linkedinUrls))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectOrganizationsByLinkedinURLsRow{}
	for rows.Next() {
		var i SelectOrganizationsByLinkedinURLsRow
		if err := rows.Scan(&i.ID, &i.ProfileUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
