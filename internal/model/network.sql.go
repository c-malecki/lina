// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: network.sql

package model

import (
	"context"
	"strings"
)

const insertNetwork = `-- name: InsertNetwork :exec
INSERT INTO networks (user_id, "name") VALUES (?, ?)
`

type InsertNetworkParams struct {
	UserID int64  `db:"user_id"`
	Name   string `db:"name"`
}

func (q *Queries) InsertNetwork(ctx context.Context, arg InsertNetworkParams) error {
	_, err := q.db.ExecContext(ctx, insertNetwork, arg.UserID, arg.Name)
	return err
}

const selectNetworkByUserID = `-- name: SelectNetworkByUserID :one
SELECT id, user_id, name FROM networks WHERE user_id = ?
`

func (q *Queries) SelectNetworkByUserID(ctx context.Context, userID int64) (Networks, error) {
	row := q.db.QueryRowContext(ctx, selectNetworkByUserID, userID)
	var i Networks
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const selectNetworks = `-- name: SelectNetworks :many
SELECT id, user_id, name FROM networks WHERE user_id = ? LIMIT ? OFFSET ?
`

type SelectNetworksParams struct {
	UserID int64 `db:"user_id"`
	Limit  int64 `db:"limit"`
	Offset int64 `db:"offset"`
}

func (q *Queries) SelectNetworks(ctx context.Context, arg SelectNetworksParams) ([]Networks, error) {
	rows, err := q.db.QueryContext(ctx, selectNetworks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Networks{}
	for rows.Next() {
		var i Networks
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPersonsByLinkedinURLs = `-- name: SelectPersonsByLinkedinURLs :many
SELECT id, profile_url FROM persons WHERE profile_url IN (/*SLICE:linkedin_urls*/?)
`

type SelectPersonsByLinkedinURLsRow struct {
	ID         int64  `db:"id"`
	ProfileUrl string `db:"profile_url"`
}

func (q *Queries) SelectPersonsByLinkedinURLs(ctx context.Context, linkedinUrls []string) ([]SelectPersonsByLinkedinURLsRow, error) {
	query := selectPersonsByLinkedinURLs
	var queryParams []interface{}
	if len(linkedinUrls) > 0 {
		for _, v := range linkedinUrls {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", strings.Repeat(",?", len(linkedinUrls))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkedin_urls*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectPersonsByLinkedinURLsRow{}
	for rows.Next() {
		var i SelectPersonsByLinkedinURLsRow
		if err := rows.Scan(&i.ID, &i.ProfileUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPersonsByNetworkConnections = `-- name: SelectPersonsByNetworkConnections :many
SELECT p.id, p.profile_url
FROM network_connections nc
INNER JOIN persons p ON p.id = nc.person_id
WHERE network_id = ?
`

type SelectPersonsByNetworkConnectionsRow struct {
	ID         int64  `db:"id"`
	ProfileUrl string `db:"profile_url"`
}

func (q *Queries) SelectPersonsByNetworkConnections(ctx context.Context, networkID int64) ([]SelectPersonsByNetworkConnectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectPersonsByNetworkConnections, networkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectPersonsByNetworkConnectionsRow{}
	for rows.Next() {
		var i SelectPersonsByNetworkConnectionsRow
		if err := rows.Scan(&i.ID, &i.ProfileUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
