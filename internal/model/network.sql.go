// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: network.sql

package model

import (
	"context"
)

const CountConnectionsByNetworkID = `-- name: CountConnectionsByNetworkID :one
SELECT COUNT(*) FROM connections WHERE network_id = ?
`

func (q *Queries) CountConnectionsByNetworkID(ctx context.Context, networkID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountConnectionsByNetworkID, networkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const InsertConnection = `-- name: InsertConnection :exec
INSERT INTO connections
(network_id, person_id)
VALUES
(?, ?)
`

type InsertConnectionParams struct {
	NetworkID int64 `db:"network_id"`
	PersonID  int64 `db:"person_id"`
}

func (q *Queries) InsertConnection(ctx context.Context, arg InsertConnectionParams) error {
	_, err := q.db.ExecContext(ctx, InsertConnection, arg.NetworkID, arg.PersonID)
	return err
}

const InsertNetwork = `-- name: InsertNetwork :exec
INSERT INTO networks (user_id, "name") VALUES (?, ?)
`

type InsertNetworkParams struct {
	UserID int64  `db:"user_id"`
	Name   string `db:"name"`
}

func (q *Queries) InsertNetwork(ctx context.Context, arg InsertNetworkParams) error {
	_, err := q.db.ExecContext(ctx, InsertNetwork, arg.UserID, arg.Name)
	return err
}

const SelectNetworkByUserID = `-- name: SelectNetworkByUserID :one
SELECT id, user_id, name, updated_at FROM networks WHERE user_id = ?
`

func (q *Queries) SelectNetworkByUserID(ctx context.Context, userID int64) (Networks, error) {
	row := q.db.QueryRowContext(ctx, SelectNetworkByUserID, userID)
	var i Networks
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectNetworks = `-- name: SelectNetworks :many
SELECT id, user_id, name, updated_at FROM networks WHERE user_id = ? LIMIT ? OFFSET ?
`

type SelectNetworksParams struct {
	UserID int64 `db:"user_id"`
	Limit  int64 `db:"limit"`
	Offset int64 `db:"offset"`
}

func (q *Queries) SelectNetworks(ctx context.Context, arg SelectNetworksParams) ([]Networks, error) {
	rows, err := q.db.QueryContext(ctx, SelectNetworks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Networks{}
	for rows.Next() {
		var i Networks
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SelectPersonsByConnections = `-- name: SelectPersonsByConnections :many
SELECT p.id, p.profile_url
FROM connections nc
INNER JOIN persons p ON p.id = nc.person_id
WHERE network_id = ?
`

type SelectPersonsByConnectionsRow struct {
	ID         int64  `db:"id"`
	ProfileUrl string `db:"profile_url"`
}

func (q *Queries) SelectPersonsByConnections(ctx context.Context, networkID int64) ([]SelectPersonsByConnectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, SelectPersonsByConnections, networkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectPersonsByConnectionsRow{}
	for rows.Next() {
		var i SelectPersonsByConnectionsRow
		if err := rows.Scan(&i.ID, &i.ProfileUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
