// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tmp.sql

package model

import (
	"context"
)

const CreateTmpDatasetDegreesTable = `-- name: CreateTmpDatasetDegreesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_degrees (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE
)
`

func (q *Queries) CreateTmpDatasetDegreesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetDegreesTable)
	return err
}

const CreateTmpDatasetIndustriesTable = `-- name: CreateTmpDatasetIndustriesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_industries (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE
)
`

func (q *Queries) CreateTmpDatasetIndustriesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetIndustriesTable)
	return err
}

const CreateTmpDatasetLocationsTable = `-- name: CreateTmpDatasetLocationsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_locations (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE,
  city TEXT,
  "state" TEXT,
  country TEXT,
  UNIQUE (city, "state", country)
)
`

func (q *Queries) CreateTmpDatasetLocationsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetLocationsTable)
	return err
}

const CreateTmpDatasetSkillsTable = `-- name: CreateTmpDatasetSkillsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_skills (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE
)
`

func (q *Queries) CreateTmpDatasetSkillsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetSkillsTable)
	return err
}

const CreateTmpDatasetSpecialtiesTable = `-- name: CreateTmpDatasetSpecialtiesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_specialties (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE
)
`

func (q *Queries) CreateTmpDatasetSpecialtiesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetSpecialtiesTable)
	return err
}

const CreateTmpDatasetStudyFieldsTable = `-- name: CreateTmpDatasetStudyFieldsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_dataset_study_fields (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL UNIQUE
)
`

func (q *Queries) CreateTmpDatasetStudyFieldsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpDatasetStudyFieldsTable)
	return err
}

const CreateTmpEducationsTable = `-- name: CreateTmpEducationsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_educations (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  person_urn TEXT NOT NULL,
  organization_urn TEXT NOT NULL,
  degree TEXT,
  study TEXT,
  start_year INTEGER,
  start_month INTEGER,
  end_year INTEGER,
  end_month INTEGER
)
`

func (q *Queries) CreateTmpEducationsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpEducationsTable)
	return err
}

const CreateTmpExperiencesTable = `-- name: CreateTmpExperiencesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_experiences (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  person_urn TEXT NOT NULL,
  organization_urn TEXT NOT NULL,
  title TEXT NOT NULL,
  location_raw TEXT,
  "description" TEXT,
  start_year INTEGER,
  start_month INTEGER,
  is_current INTEGER NOT NULL,
  end_year INTEGER,
  end_month INTEGER,
  skills_url TEXT
)
`

func (q *Queries) CreateTmpExperiencesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpExperiencesTable)
	return err
}

const CreateTmpNetworkConnectionsTable = `-- name: CreateTmpNetworkConnectionsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_network_connections (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  network_id INTEGER NOT NULL,
  person_id INTEGER NOT NULL,
  UNIQUE (network_id, person_id)
)
`

func (q *Queries) CreateTmpNetworkConnectionsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpNetworkConnectionsTable)
	return err
}

const CreateTmpOrganizationIndustriesTable = `-- name: CreateTmpOrganizationIndustriesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_organization_industries (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  organization_urn TEXT NOT NULL,
  industry TEXT NOT NULL,
  UNIQUE (organization_urn, industry)
)
`

func (q *Queries) CreateTmpOrganizationIndustriesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpOrganizationIndustriesTable)
	return err
}

const CreateTmpOrganizationLocationsTable = `-- name: CreateTmpOrganizationLocationsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_organization_locations (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  organization_urn TEXT NOT NULL,
  "location" TEXT NOT NULL,
  is_headquarters INTEGER NOT NULL DEFAULT 0,
  UNIQUE (organization_urn, "location")
)
`

func (q *Queries) CreateTmpOrganizationLocationsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpOrganizationLocationsTable)
	return err
}

const CreateTmpOrganizationSpecialtiesTable = `-- name: CreateTmpOrganizationSpecialtiesTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_organization_specialties (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  organization_urn TEXT NOT NULL,
  specialty TEXT NOT NULL,
  UNIQUE (organization_urn, specialty)
)
`

func (q *Queries) CreateTmpOrganizationSpecialtiesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpOrganizationSpecialtiesTable)
	return err
}

const CreateTmpOrganizationsTable = `-- name: CreateTmpOrganizationsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_organizations (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  "name" TEXT NOT NULL,
  universal_name TEXT NOT NULL,
  website TEXT,
  profile_url TEXT NOT NULL,
  logo_url TEXT,
  founded_year INTEGER,
  founded_month INTEGER,
  organization_type INTEGER NOT NULL DEFAULT 0,
  employee_count INTEGER,
  student_count INTEGER,
  urn TEXT NOT NULL UNIQUE,
  created_at INTEGER NOT NULL
)
`

func (q *Queries) CreateTmpOrganizationsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpOrganizationsTable)
	return err
}

const CreateTmpPersonSkillsTable = `-- name: CreateTmpPersonSkillsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_person_skills (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  person_urn TEXT NOT NULL,
  skill TEXT NOT NULL,
  UNIQUE (person_id, skill_id)
)
`

func (q *Queries) CreateTmpPersonSkillsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpPersonSkillsTable)
	return err
}

const CreateTmpPersonsTable = `-- name: CreateTmpPersonsTable :exec
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_persons (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  headline TEXT,
  profile_url TEXT NOT NULL,
  public_identifier TEXT NOT NULL,
  profile_picture_url TEXT,
  about TEXT,
  "location" TEXT,
  urn TEXT NOT NULL UNIQUE,
  created_at INTEGER NOT NULL
)
`

func (q *Queries) CreateTmpPersonsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, CreateTmpPersonsTable)
	return err
}

const InsertDatasetDegreesFromTmp = `-- name: InsertDatasetDegreesFromTmp :exec
INSERT INTO dataset_degrees
("name")
SELECT
  t.name
FROM tmp_dataset_degrees t
LEFT JOIN dataset_degrees d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetDegreesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetDegreesFromTmp)
	return err
}

const InsertDatasetIndustriesFromTmp = `-- name: InsertDatasetIndustriesFromTmp :exec
INSERT INTO dataset_industries
("name")
SELECT
  t.name
FROM tmp_dataset_industries t
LEFT JOIN dataset_industries d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetIndustriesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetIndustriesFromTmp)
	return err
}

const InsertDatasetLocationsFromTmp = `-- name: InsertDatasetLocationsFromTmp :exec
INSERT INTO dataset_locations
("name", city, "state", country)
SELECT
  t.name,
  t.city,
  t.state,
  t.country
FROM tmp_dataset_locations t
LEFT JOIN dataset_locations d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetLocationsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetLocationsFromTmp)
	return err
}

const InsertDatasetSkillsFromTmp = `-- name: InsertDatasetSkillsFromTmp :exec
INSERT INTO dataset_skills
("name")
SELECT
  t.name
FROM tmp_dataset_skills t
LEFT JOIN dataset_skills d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetSkillsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetSkillsFromTmp)
	return err
}

const InsertDatasetSpecialtiesFromTmp = `-- name: InsertDatasetSpecialtiesFromTmp :exec
INSERT INTO dataset_specialties
("name")
SELECT
  t.name
FROM tmp_dataset_specialties t
LEFT JOIN dataset_specialties d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetSpecialtiesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetSpecialtiesFromTmp)
	return err
}

const InsertDatasetStudyFieldsFromTmp = `-- name: InsertDatasetStudyFieldsFromTmp :exec
INSERT INTO dataset_study_fields
("name")
SELECT
  t.name
FROM tmp_dataset_study_fields t
LEFT JOIN dataset_study_fields d ON d.name = t.name
WHERE d.id IS NULL
`

func (q *Queries) InsertDatasetStudyFieldsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertDatasetStudyFieldsFromTmp)
	return err
}

const InsertEducationsFromTmp = `-- name: InsertEducationsFromTmp :exec
INSERT INTO educations
(person_id, organization_id, degree_id, study_field_id, start_year, start_month, end_year, end_month)
SELECT
  p.id AS person_id,
  o.id AS organization_id,
  dd.id AS degree_id,
  dsf.id AS study_field_id,
  t.start_year,
  t.start_month,
  t.end_year,
  t.end_month
FROM tmp_educations t
INNER JOIN persons p ON p.urn = t.person_urn
INNER JOIN organizations o ON o.urn = t.organization_urn
LEFT JOIN dataset_degrees dd ON dd.name = t.degree
LEFT JOIN dataset_study_fields dsf ON dsf.name = t.study_field
`

func (q *Queries) InsertEducationsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertEducationsFromTmp)
	return err
}

const InsertExperiencesFromTmp = `-- name: InsertExperiencesFromTmp :exec
INSERT INTO experiences
(person_id, organization_id, title, location_raw, "description", start_year, start_month, is_current, end_year, end_month, skills_url)
SELECT
  p.id AS person_id,
  o.id AS organization_id,
  t.title,
  t.description,
  t.start_year,
  t.start_month,
  t.is_current,
  t.end_year,
  t.end_month,
  t.skills_url
FROM tmp_experiences t
INNER JOIN persons p ON p.urn = t.person_urn
INNER JOIN organizations o ON o.urn = t.organization_urn
`

func (q *Queries) InsertExperiencesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertExperiencesFromTmp)
	return err
}

const InsertOrganizationIndustriesFromTmp = `-- name: InsertOrganizationIndustriesFromTmp :exec
INSERT INTO organization_industries
(organization_id, industry_id)
SELECT
  o.id AS organization_id,
  d.id AS industry_id
FROM tmp_organization_industries t
INNER JOIN organizations o ON o.urn = t.organization_urn
INNER JOIN dataset_industries d ON d.name = t.industry
`

func (q *Queries) InsertOrganizationIndustriesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationIndustriesFromTmp)
	return err
}

const InsertOrganizationLocationsFromTmp = `-- name: InsertOrganizationLocationsFromTmp :exec
INSERT INTO organization_locations
(organization_id, location_id, is_headquarters)
SELECT
  o.id AS organization_id,
  d.id AS location_id,
  t.is_headquarters
FROM tmp_organization_locations t
INNER JOIN organizations o ON o.urn = t.organization_urn
INNER JOIN dataset_locations d ON d.name = t.location
`

func (q *Queries) InsertOrganizationLocationsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationLocationsFromTmp)
	return err
}

const InsertOrganizationSpecialtiesFromTmp = `-- name: InsertOrganizationSpecialtiesFromTmp :exec
INSERT INTO organization_specialties
(organization_id, specialty_id)
SELECT
  o.id AS organization_id,
  d.id AS specialty_id
FROM tmp_organization_specialties t
INNER JOIN organizations o ON o.urn = t.organization_urn
INNER JOIN dataset_specialties d ON d.name = t.specialty
`

func (q *Queries) InsertOrganizationSpecialtiesFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationSpecialtiesFromTmp)
	return err
}

const InsertOrganizationsFromTmp = `-- name: InsertOrganizationsFromTmp :exec
INSERT INTO organizations
("name", universal_name, website, profile_url, logo_url, founded_year, founded_month, organization_type, employee_count, student_count, urn, created_at)
SELECT
  t.name,
  t.universal_name,
  t.website,
  t.profile_url,
  t.logo_url,
  t.founded_year,
  t.founded_month,
  t.organization_type,
  t.employee_count,
  t.student_count,
  t.urn,
  t.created_at
FROM tmp_organizations t
LEFT JOIN organizations o ON o.urn = t.urn
WHERE o.id IS NULL
`

func (q *Queries) InsertOrganizationsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertOrganizationsFromTmp)
	return err
}

const InsertPersonSkillsFromTmp = `-- name: InsertPersonSkillsFromTmp :exec
INSERT INTO person_skills
(person_id, skill_id)
SELECT
  p.id AS person_id,
  d.id AS skill
FROM tmp_person_skills t
INNER JOIN persons p ON p.urn = t.person_urn
INNER JOIN dataset_skills d ON d.name = t.skill
`

func (q *Queries) InsertPersonSkillsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertPersonSkillsFromTmp)
	return err
}

const InsertPersonsFromTmp = `-- name: InsertPersonsFromTmp :exec
INSERT INTO persons
(first_name, last_name, headline, profile_url, profile_picture_url, public_identifier, about, location_id, urn, created_at)
SELECT
  t.first_name,
  t.last_name,
  t.headline,
  t.profile_url,
  t.profile_picture_url,
  t.public_identifier,
  t.about,
  dl.id AS location_id,
  t.urn,
  t.created_at
FROM tmp_persons t
LEFT JOIN dataset_locations dl ON dl.name = t.location
`

func (q *Queries) InsertPersonsFromTmp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, InsertPersonsFromTmp)
	return err
}

const InsertTmpDatasetDegree = `-- name: InsertTmpDatasetDegree :exec
INSERT INTO tmp_dataset_degrees ("name") VALUES (?)
`

func (q *Queries) InsertTmpDatasetDegree(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetDegree, name)
	return err
}

const InsertTmpDatasetIndustry = `-- name: InsertTmpDatasetIndustry :exec
INSERT INTO tmp_dataset_industries ("name") VALUES (?)
`

func (q *Queries) InsertTmpDatasetIndustry(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetIndustry, name)
	return err
}

const InsertTmpDatasetLocation = `-- name: InsertTmpDatasetLocation :exec
INSERT INTO tmp_dataset_locations
("name", city, "state", country)
VALUES
(?, ?, ?, ?)
`

type InsertTmpDatasetLocationParams struct {
	Name    string  `db:"name"`
	City    *string `db:"city"`
	State   *string `db:"state"`
	Country *string `db:"country"`
}

func (q *Queries) InsertTmpDatasetLocation(ctx context.Context, arg InsertTmpDatasetLocationParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetLocation,
		arg.Name,
		arg.City,
		arg.State,
		arg.Country,
	)
	return err
}

const InsertTmpDatasetSkill = `-- name: InsertTmpDatasetSkill :exec
INSERT INTO tmp_dataset_skills ("name") VALUES (?)
`

func (q *Queries) InsertTmpDatasetSkill(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetSkill, name)
	return err
}

const InsertTmpDatasetSpecialty = `-- name: InsertTmpDatasetSpecialty :exec
INSERT INTO tmp_dataset_specialties ("name") VALUES (?)
`

func (q *Queries) InsertTmpDatasetSpecialty(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetSpecialty, name)
	return err
}

const InsertTmpDatasetStudyField = `-- name: InsertTmpDatasetStudyField :exec
INSERT INTO tmp_dataset_study_fields ("name") VALUES (?)
`

func (q *Queries) InsertTmpDatasetStudyField(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, InsertTmpDatasetStudyField, name)
	return err
}

const InsertTmpEducation = `-- name: InsertTmpEducation :exec
INSERT INTO tmp_educations
(person_urn, organization_urn, degree, study_field, start_year, start_month, end_year, end_month)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertTmpEducationParams struct {
	PersonUrn       string  `db:"person_urn"`
	OrganizationUrn string  `db:"organization_urn"`
	Degree          *string `db:"degree"`
	StudyField      *string `db:"study_field"`
	StartYear       *int64  `db:"start_year"`
	StartMonth      *int64  `db:"start_month"`
	EndYear         *int64  `db:"end_year"`
	EndMonth        *int64  `db:"end_month"`
}

func (q *Queries) InsertTmpEducation(ctx context.Context, arg InsertTmpEducationParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpEducation,
		arg.PersonUrn,
		arg.OrganizationUrn,
		arg.Degree,
		arg.StudyField,
		arg.StartYear,
		arg.StartMonth,
		arg.EndYear,
		arg.EndMonth,
	)
	return err
}

const InsertTmpExperience = `-- name: InsertTmpExperience :exec
INSERT INTO tmp_experiences
(person_urn, organization_urn, title, location_raw, "description", start_year, start_month, is_current, end_year, end_month, skills_url)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertTmpExperienceParams struct {
	PersonUrn       string  `db:"person_urn"`
	OrganizationUrn string  `db:"organization_urn"`
	Title           string  `db:"title"`
	LocationRaw     *string `db:"location_raw"`
	Description     *string `db:"description"`
	StartYear       *int64  `db:"start_year"`
	StartMonth      *int64  `db:"start_month"`
	IsCurrent       int64   `db:"is_current"`
	EndYear         *int64  `db:"end_year"`
	EndMonth        *int64  `db:"end_month"`
	SkillsUrl       *string `db:"skills_url"`
}

func (q *Queries) InsertTmpExperience(ctx context.Context, arg InsertTmpExperienceParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpExperience,
		arg.PersonUrn,
		arg.OrganizationUrn,
		arg.Title,
		arg.LocationRaw,
		arg.Description,
		arg.StartYear,
		arg.StartMonth,
		arg.IsCurrent,
		arg.EndYear,
		arg.EndMonth,
		arg.SkillsUrl,
	)
	return err
}

const InsertTmpOrganization = `-- name: InsertTmpOrganization :exec
INSERT INTO tmp_organizations
("name", universal_name, website, profile_url, logo_url, founded_year, founded_month, organization_type, employee_count, student_count, urn, created_at)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertTmpOrganizationParams struct {
	Name             string  `db:"name"`
	UniversalName    string  `db:"universal_name"`
	Website          *string `db:"website"`
	ProfileUrl       string  `db:"profile_url"`
	LogoUrl          *string `db:"logo_url"`
	FoundedYear      *int64  `db:"founded_year"`
	FoundedMonth     *int64  `db:"founded_month"`
	OrganizationType int64   `db:"organization_type"`
	EmployeeCount    *int64  `db:"employee_count"`
	StudentCount     *int64  `db:"student_count"`
	Urn              string  `db:"urn"`
	CreatedAt        int64   `db:"created_at"`
}

func (q *Queries) InsertTmpOrganization(ctx context.Context, arg InsertTmpOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpOrganization,
		arg.Name,
		arg.UniversalName,
		arg.Website,
		arg.ProfileUrl,
		arg.LogoUrl,
		arg.FoundedYear,
		arg.FoundedMonth,
		arg.OrganizationType,
		arg.EmployeeCount,
		arg.StudentCount,
		arg.Urn,
		arg.CreatedAt,
	)
	return err
}

const InsertTmpOrganizationIndustry = `-- name: InsertTmpOrganizationIndustry :exec
INSERT INTO tmp_organization_industries
(organization_urn, industry)
VALUES
(?, ?)
`

type InsertTmpOrganizationIndustryParams struct {
	OrganizationUrn string `db:"organization_urn"`
	Industry        string `db:"industry"`
}

func (q *Queries) InsertTmpOrganizationIndustry(ctx context.Context, arg InsertTmpOrganizationIndustryParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpOrganizationIndustry, arg.OrganizationUrn, arg.Industry)
	return err
}

const InsertTmpOrganizationLocation = `-- name: InsertTmpOrganizationLocation :exec
INSERT INTO tmp_organization_locations
(organization_urn, "location", is_headquarters)
VALUES
(?, ?, ?)
`

type InsertTmpOrganizationLocationParams struct {
	OrganizationUrn string `db:"organization_urn"`
	Location        string `db:"location"`
	IsHeadquarters  int64  `db:"is_headquarters"`
}

func (q *Queries) InsertTmpOrganizationLocation(ctx context.Context, arg InsertTmpOrganizationLocationParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpOrganizationLocation, arg.OrganizationUrn, arg.Location, arg.IsHeadquarters)
	return err
}

const InsertTmpOrganizationSpecialty = `-- name: InsertTmpOrganizationSpecialty :exec
INSERT INTO tmp_organization_specialties
(organization_urn, specialty)
VALUES
(?, ?)
`

type InsertTmpOrganizationSpecialtyParams struct {
	OrganizationUrn string `db:"organization_urn"`
	Specialty       string `db:"specialty"`
}

func (q *Queries) InsertTmpOrganizationSpecialty(ctx context.Context, arg InsertTmpOrganizationSpecialtyParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpOrganizationSpecialty, arg.OrganizationUrn, arg.Specialty)
	return err
}

const InsertTmpPerson = `-- name: InsertTmpPerson :exec
INSERT INTO tmp_persons
(first_name, last_name, headline, profile_url, public_identifier, profile_picture_url, about, "location", urn, created_at)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertTmpPersonParams struct {
	FirstName         string  `db:"first_name"`
	LastName          string  `db:"last_name"`
	Headline          *string `db:"headline"`
	ProfileUrl        string  `db:"profile_url"`
	PublicIdentifier  string  `db:"public_identifier"`
	ProfilePictureUrl *string `db:"profile_picture_url"`
	About             *string `db:"about"`
	Location          *string `db:"location"`
	Urn               string  `db:"urn"`
	CreatedAt         int64   `db:"created_at"`
}

func (q *Queries) InsertTmpPerson(ctx context.Context, arg InsertTmpPersonParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpPerson,
		arg.FirstName,
		arg.LastName,
		arg.Headline,
		arg.ProfileUrl,
		arg.PublicIdentifier,
		arg.ProfilePictureUrl,
		arg.About,
		arg.Location,
		arg.Urn,
		arg.CreatedAt,
	)
	return err
}

const InsertTmpPersonSkill = `-- name: InsertTmpPersonSkill :exec
INSERT INTO tmp_person_skills
(person_urn, skill)
VALUES
(?, ?)
`

type InsertTmpPersonSkillParams struct {
	PersonUrn string `db:"person_urn"`
	Skill     string `db:"skill"`
}

func (q *Queries) InsertTmpPersonSkill(ctx context.Context, arg InsertTmpPersonSkillParams) error {
	_, err := q.db.ExecContext(ctx, InsertTmpPersonSkill, arg.PersonUrn, arg.Skill)
	return err
}
